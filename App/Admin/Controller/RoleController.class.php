<?php
namespace Admin\Controller;
use Think\Controller;
// 角色模块
class RoleController extends BaseController {
	protected $role_model;

	public function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->role_model = D("Role");
	}

	public function index(){
		$data = $this->role_model->order(array("listorder" => "asc", "id" => "desc"))->select();
        foreach($data as $key => $val){
            $member = M("Admin")->where(array('roleid'=>$val['id'],'status'=>1))->getField('name',true);
            $data[$key]['member'] = trim(implode(',',$member),',');
        }
		$this->assign("roles", $data);
		$this->display();

	}
	public function add(){
		if (IS_POST) {
			if ($this->role_model->create()) {
				if ($this->role_model->add()!==false) {
                    write_system_log();
					$this->success("添加角色成功",U("Role/index"));
				} else {
					$this->error("添加失败！");
				}
			} else {
				$this->error($this->role_model->getError());
			}
		}
		$this->display();
	}
	/**
	 * 删除角色
	 */
	public function delete() {
		$id = intval(I("get.id"));
		if ($id >=1 && $id <=4) {
			$this->error("该角色不能被删除！");
		}
		$member_model=M("Admin");
		$count=$member_model->where("roleid=$id")->count();
		if($count){
			$this->error("该角色已经有用户！");
		}else{
			$status = $this->role_model->delete($id);
			if ($status!==false) {
                write_system_log();
				$this->success("删除成功！", U('Role/index'));
			} else {
				$this->error("删除失败！");
			}
		}

	}
    /**
     * 编辑角色
     */
    public function edit() {
        $id = intval(I("param.id"));
        if ($id >=1 && $id <=4) {
            $this->error("该角色不能被修改！");
        }
        if(IS_POST){
            if (IS_POST) {
                $data = $this->role_model->create();
                if ($data) {
                    if ($this->role_model->save($data)!==false) {
                        write_system_log();
                        $this->success("修改成功！", U('Role/index'));
                    } else {
                        $this->error("修改失败！");
                    }
                } else {
                    $this->error($this->role_model->getError());
                }
            }
        }
        $data = $this->role_model->where(array("id" => $id))->find();
        if (!$data) {
            $this->error("该角色不存在！");
        }
        $this->assign("data", $data);
        $this->display();
    }
    /**
     * 角色授权
     */
    public function authorize() {
        $auth_access_model = M("AuthAccess");

        //角色ID
        $roleid = intval(I("param.id"));
        if (!$roleid) {
            $this->error("参数错误！");
        }
        if($roleid < 5){
            $this->error("该角色不需要分配权限！");
        }
        if (IS_POST) {
            if (is_array($_POST['menuid']) &&  count($_POST['menuid'])>0 ) {
                $menu_model=M("Menu");
                $auth_access_model->where(array("role_id"=>$roleid,'type'=>'admin_url'))->delete();
				$auth_access_model->where(array("role_id"=>$roleid,'type'=>'admin_business'))->delete();//业务删除

                foreach ($_POST['menuid'] as $menuid) {
                    $menu=$menu_model->where(array("id"=>$menuid))->field("app,model,action")->find();
                    if($menu){
                        $app=$menu['app'];
                        $model=$menu['model'];
                        $action=$menu['action'];
                        $name=strtolower("$app/$model/$action");
                        $auth_access_model->add(array("role_id"=>$roleid,"rule_name"=>$name,'type'=>'admin_url'));
                    }

                }
                write_system_log();
                $this->success("授权成功！", U("Role/index"));
            }else{
                //当没有数据时，清除当前角色授权
                $auth_access_model->where(array("role_id" => $roleid))->delete();
                $this->error("没有接收到数据，执行清除授权成功！");
            }
        }
        $menu = new \Extend\Tree();
        $menu->icon = array('│ ', '├─ ', '└─ ');
        $menu->nbsp = '&nbsp;&nbsp;&nbsp;';
        $result = D("Menu")->all_admin_menu();
        $newmenus=array();
        $priv_data=$auth_access_model->where(array("role_id"=>$roleid))->getField("rule_name",true);//获取权限表数据
        foreach ($result as $m){
            $newmenus[$m['id']]=$m;
        }
        foreach ($result as $n => $t) {
            $result[$n]['checked'] = ($this->_is_checked($t, $roleid, $priv_data)) ? ' checked' : '';
            $result[$n]['level'] = _get_level($t['id'], $newmenus);
            $result[$n]['parentid_node'] = ($t['parentid']) ? ' class="child-of-node-' . $t['parentid'] . '"' : '';
        }
        $str = "<tr id='node-\$id' \$parentid_node><td style='padding-left:30px;'><span  class='Hui-iconfont Hui-iconfont-arrow2-right' ></span>\$spacer
                       <input type='checkbox' name='menuid[]' value='\$id' level='\$level' \$checked onclick='javascript:checknode(this);'> \$name</td>
	    			</tr>";

        $menu->init($result);
        $categorys = $menu->get_tree(0, $str);
        $this->assign("categorys", $categorys);
        $this->assign("roleid", $roleid);
        $this->display();
    }

    /**
     *  检查指定菜单是否有权限
     * @param array $menu menu表中数组
     * @param int $roleid 需要检查的角色ID
     */
    private function _is_checked($menu, $roleid, $priv_data) {

        $app=$menu['app'];
        $model=$menu['model'];
        $action=$menu['action'];
        $name=strtolower("$app/$model/$action");
        if($priv_data){
            if (in_array($name, $priv_data)) {
                return true;
            } else {
                return false;
            }
        }else{
            return false;
        }

    }


}