/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.5.40-log : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `blog`;

/*Table structure for table `cache` */

DROP TABLE IF EXISTS `cache`;

CREATE TABLE `cache` (
  `caID` char(32) NOT NULL,
  `caContent` text,
  PRIMARY KEY (`caID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

/*Data for the table `cache` */

/*Table structure for table `my_article` */

DROP TABLE IF EXISTS `my_article`;

CREATE TABLE `my_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(150) NOT NULL,
  `intro` varchar(255) DEFAULT '',
  `content` text NOT NULL,
  `time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `source` varchar(150) DEFAULT '' COMMENT '来源',
  `tag_id` varchar(500) DEFAULT NULL COMMENT '标签ID',
  `cate_id` int(11) NOT NULL,
  `member_id` int(11) NOT NULL,
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1:普通,2:置顶,3:热门,4:推荐',
  `z_num` int(10) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `view_num` int(10) DEFAULT '0' COMMENT '查看数据',
  `sort` smallint(8) DEFAULT '0' COMMENT '排序值',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1上线，0下线',
  PRIMARY KEY (`id`),
  KEY `cate_id` (`cate_id`) USING BTREE,
  KEY `user_id` (`member_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=128 DEFAULT CHARSET=utf8;

/*Data for the table `my_article` */

insert  into `my_article`(`id`,`title`,`intro`,`content`,`time`,`source`,`tag_id`,`cate_id`,`member_id`,`type`,`z_num`,`view_num`,`sort`,`status`) values (107,'linux命令大全之crontab命令使用详解','crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有则自动执行。','&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;http://files.jb51.net/file_images/article/201404/20140409140602.jpg?20143914750&amp;quot; alt=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;minute： 表示分钟，可以是从0到59之间的任何整数。&amp;lt;br/&amp;gt;hour：表示小时，可以是从0到23之间的任何整数。&amp;lt;br/&amp;gt;day：表示日期，可以是从1到31之间的任何整数。&amp;lt;br/&amp;gt;month：表示月份，可以是从1到12之间的任何整数。&amp;lt;br/&amp;gt;week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。&amp;lt;br/&amp;gt;command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;基本格式 : &amp;lt;br/&amp;gt;*　　*　　*　　*　　*　　command &amp;lt;br/&amp;gt;分　时　日　月　周　命令 &amp;lt;br/&amp;gt;第1列表示分钟1～59 每分钟用*或者 */1表示 &amp;lt;br/&amp;gt;第2列表示小时1～23（0表示0点） &amp;lt;br/&amp;gt;第3列表示日期1～31 &amp;lt;br/&amp;gt;第4列表示月份1～12 &amp;lt;br/&amp;gt;第5列标识号星期0～6（0表示星期天） &amp;lt;br/&amp;gt;第6列要运行的命令 &amp;lt;br/&amp;gt;crontab文件的一些例子： &amp;lt;br/&amp;gt;30 21 * * * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;上面的例子表示每晚的21:30重启apache。 &amp;lt;br/&amp;gt;45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;上面的例子表示每月1、10、22日的4 : 45重启apache。 &amp;lt;br/&amp;gt;10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;上面的例子表示每周六、周日的1 : 10重启apache。 &amp;lt;br/&amp;gt;0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 &amp;lt;br/&amp;gt;0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;上面的例子表示每星期六的11 : 00 pm重启apache。 &amp;lt;br/&amp;gt;* */1 * * * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;每一小时重启apache &amp;lt;br/&amp;gt;* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;晚上11点到早上7点之间，每隔一小时重启apache &amp;lt;br/&amp;gt;0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;每月的4号与每周一到周三的11点重启apache &amp;lt;br/&amp;gt;0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart &amp;lt;br/&amp;gt;一月一号的4点重启apache &amp;lt;br/&amp;gt;名称 : crontab &amp;lt;br/&amp;gt;使用权限 : 所有使用者 &amp;lt;br/&amp;gt;使用方式 : &amp;lt;br/&amp;gt;crontab file [-u user]-用指定的文件替代目前的crontab。 &amp;lt;br/&amp;gt;crontab-[-u user]-用标准输入替代目前的crontab. &amp;lt;br/&amp;gt;crontab-1[user]-列出用户目前的crontab. &amp;lt;br/&amp;gt;crontab-e[user]-编辑用户目前的crontab. &amp;lt;br/&amp;gt;crontab-d[user]-删除用户目前的crontab. &amp;lt;br/&amp;gt;crontab-c dir- 指定crontab的目录。 &amp;lt;br/&amp;gt;crontab文件的格式：M H D m d cmd. &amp;lt;br/&amp;gt;M: 分钟（0-59）。 &amp;lt;br/&amp;gt;H：小时（0-23）。 &amp;lt;br/&amp;gt;D：天（1-31）。 &amp;lt;br/&amp;gt;m: 月（1-12）。 &amp;lt;br/&amp;gt;d: 一星期内的天（0~6，0为星期天）。 &amp;lt;br/&amp;gt;cmd要运行的程序，程序被送入sh执行，这个shell只有USER,HOME,SHELL这三个环境变量 &amp;lt;br/&amp;gt;说明 : &amp;lt;br/&amp;gt;crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。-u user 是指设定指定 &amp;lt;br/&amp;gt;user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设 &amp;lt;br/&amp;gt;定自己的时程表。 &amp;lt;br/&amp;gt;参数 : &amp;lt;br/&amp;gt;crontab -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数 &amp;lt;br/&amp;gt;来指定使用那个文字编辑器(比如说 setenv VISUAL joe) &amp;lt;br/&amp;gt;crontab -r : 删除目前的时程表 &amp;lt;br/&amp;gt;crontab -l : 列出目前的时程表 &amp;lt;br/&amp;gt;crontab file [-u user]-用指定的文件替代目前的crontab。 &amp;lt;br/&amp;gt;时程表的格式如下 : &amp;lt;br/&amp;gt;f1 f2 f3 f4 f5 program &amp;lt;br/&amp;gt;其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执 &amp;lt;br/&amp;gt;行的程序。 &amp;lt;br/&amp;gt;当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推 &amp;lt;br/&amp;gt;当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推 &amp;lt;br/&amp;gt;当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推 &amp;lt;br/&amp;gt;当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推 &amp;lt;br/&amp;gt;使用者也可以将所有的设定先存放在档案 file 中，用 crontab file 的方式来设定时程表。 &amp;lt;br/&amp;gt;例子 : &amp;lt;br/&amp;gt;#每天早上7点执行一次 /bin/ls : &amp;lt;br/&amp;gt;0 7 * * * /bin/ls &amp;lt;br/&amp;gt;在 12 月内, 每天的早上 6 点到 12 点中，每隔3个小时执行一次 /usr/bin/backup : &amp;lt;br/&amp;gt;0 6-12/3 * 12 * /usr/bin/backup &amp;lt;br/&amp;gt;周一到周五每天下午 5:00 寄一封信给 alex@domain.name : &amp;lt;br/&amp;gt;0 17 * * 1-5 mail -s &amp;amp;quot;hi&amp;amp;quot; alex@domain.name &amp;amp;lt; /tmp/maildata &amp;lt;br/&amp;gt;每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo &amp;amp;quot;haha&amp;amp;quot; &amp;lt;br/&amp;gt;20 0-23/2 * * * echo &amp;amp;quot;haha&amp;amp;quot; &amp;lt;br/&amp;gt;注意 : &amp;lt;br/&amp;gt;当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之 &amp;lt;br/&amp;gt;后加上 &amp;amp;gt; /dev/null 2&amp;amp;gt;&amp;amp;amp;1 即可 &amp;lt;br/&amp;gt;例子2 : &amp;lt;br/&amp;gt;#每天早上6点10分 &amp;lt;br/&amp;gt;10 6 * * * date &amp;lt;br/&amp;gt;#每两个小时 &amp;lt;br/&amp;gt;0 */2 * * * date &amp;lt;br/&amp;gt;#晚上11点到早上8点之间每两个小时，早上8点 &amp;lt;br/&amp;gt;0 23-7/2，8 * * * date &amp;lt;br/&amp;gt;#每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 &amp;lt;br/&amp;gt;0 11 4 * mon-wed date &amp;lt;br/&amp;gt;#1月份日早上4点 &amp;lt;br/&amp;gt;0 4 1 jan * date &amp;lt;br/&amp;gt;范例 &amp;lt;br/&amp;gt;$crontab -l 列出用户目前的crontab.&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-20 18:17:24','http://www.jb51.net/LINUXjishu/19905.html','5',33,1,1,0,40,0,1),(108,'MySQL server has gone away 问题的解决方法','mysql出现ERROR : MySQL server has gone away 的问题意思就是指client和MySQL server之间的链接断开了。\n造成这样的原因一般是sql操作的时间过长，或者是传送的数据太大(例如使用insert ... values的语句过长， 这种情况可以通过修改max_allowed_packed的配置参数来避免，也可以在程序中将数据分批插','&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;第一种方法：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 增加你的 \nwait-timeout值，这个参数是在my.cnf(在Windows下台下面是my.ini）中设置，我的数据库负荷稍微大一点，所以，我设置的值\n 为10，（这个值的单位是秒，意思是当一个数据库连接在10秒钟内没有任何操作的话，就会强行关闭，我使用的不是永久链接 \n（mysql_pconnect),用的是mysql_connect,关于这个wait-timeout的效果你可以在MySQL的进程列表中看到 \n（show processlist) \n），你可以把这个wait-timeout设置成更大，比如300秒，一般来讲300秒足够用了，其实你也可以不用设置，MySQL默认是8个小 \n时。情况由你的服务器和站点来定。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;第二种方法&amp;lt;/strong&amp;gt;：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这也是我个人认为最好的方法，即检查 MySQL的链接状态，使其重新链接。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;可能大家都知道有mysql_ping这么一个函数，在很多资料中都说这个mysql_ping的 \nAPI会检查数据库是否链接，如果是断开的话会尝试重新连接，但在我的测试过程中发现事实并不是这样子的，是有条件的，必须要通过 \nmysql_options这个C \nAPI传递相关参数，让MYSQL有断开自动链接的选项（MySQL默认为不自动连接），但我测试中发现PHP的MySQL的API中并不带这个函数，你重新编辑MySQL吧，呵呵。但mysql_ping这个函数还是终于能用得上的，只是要在其中有一个小小的操作技巧：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是我的的数据库操作类中间的一个函数&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-c list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;amp;nbsp;ping(){&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt;(!mysql_ping(&amp;lt;span class=&amp;quot;vars&amp;quot;&amp;gt;$this&amp;lt;/span&amp;gt;-&amp;amp;gt;link)){&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;mysql_close(&amp;lt;span class=&amp;quot;vars&amp;quot;&amp;gt;$this&amp;lt;/span&amp;gt;-&amp;amp;gt;link);&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;//注意：一定要先执行数据库关闭，这是关键&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;vars&amp;quot;&amp;gt;$this&amp;lt;/span&amp;gt;-&amp;amp;gt;connect();&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;}&amp;amp;nbsp; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;我需要调用这个函数的代码可能是这样子的&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;$str&amp;amp;nbsp;=&amp;amp;nbsp;file_get_contents(’http://www.tianqiyugao.net’);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$db-&amp;amp;gt;ping();//经过前面的网页抓取后，或者会导致数据库连接关闭,检查并重新连接&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;$db-&amp;amp;gt;query(’select&amp;amp;nbsp;*&amp;amp;nbsp;from&amp;amp;nbsp;table’);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;ping()这个函数先检测数据连接是否正常，如果被关闭，整个把当前脚本的MYSQL实例关闭，再重新连接。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;经 过这样处理后，可以非常有效的解决MySQL server has gone away这样的问题，而且不会对系统造成额外的开销。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;今天遇到类似的情景，MySQL只是冷冷的说：MySQL server has gone away。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;大概浏览了一下，主要可能是因为以下几种原因：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;一种可能是发送的SQL语句太长，以致超过了max_allowed_packet的大小，如果是这种原因，你只要修改my.cnf，加大max_allowed_packet的值即可。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;还有一种可能是因为某些原因导致超时，比如说程序中获取数据库连接时采用了Singleton的做法，虽然多次连接数据库，但其实使用的都是同一个连接，而且程序中某两次操作数据库的间隔时间超过了wait_timeout（SHOW\n \nSTATUS能看到此设置），那么就可能出现问题。最简单的处理方式就是把wait_timeout改大，当然你也可以在程序里时不时顺手mysql_ping()一下，这样MySQL就知道它不是一个人在战斗。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决MySQL server has gone away&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;1、应用程序（比如PHP）长时间的执行批量的MYSQL语句。最常见的就是采集或者新旧数据转化。&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决方案：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在my.cnf文件中添加或者修改以下两个变量：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;wait_timeout=2880000&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;interactive_timeout = 2880000&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;关于两个变量的具体说明可以google或者看官方手册。如果不能修改my.cnf，则可以在连接数据库的时候设置CLIENT_INTERACTIVE，比如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;sql = &amp;amp;quot;set interactive_timeout=24*3600&amp;amp;quot;;&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;mysql_real_query(...)&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;2、执行一个SQL，但SQL语句过大或者语句中含有BLOB或者longblob字段。比如，图片数据的处理&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决方案：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在my.cnf文件中添加或者修改以下变量：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;max_allowed_packet = 10M&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;(也可以设置自己需要的大小)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;lt;span style=&amp;quot;font-family:NSimsun&amp;quot;&amp;gt;max_allowed_packet&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;参数的作用是，用来控制其通信缓冲区的最大长度&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;http://database.51cto.com/art/201105/261107.htm&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;http://www.cnblogs.com/aiyuchen/archive/2011/05/11/2042798.html&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 16:45:14','http://database.51cto.com/art/201105/261107.htm','1',31,1,1,0,6,0,1),(109,' 20分钟MySQL基础入门','MySQL为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成。本文介绍MySQL最基础的入门知识，包括登录MySQL、创建数据库、创建数据库表等。','&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s4.51cto.com/wyfs02/M02/87/3A/wKiom1fX-XrTtQ2oAACkeG4NJ88942.png-wh_651x-s_2689879232.png&amp;quot; alt=&amp;quot;&amp;quot; style=&amp;quot;width: 401px; height: 400px;&amp;quot; width=&amp;quot;401&amp;quot; height=&amp;quot;400&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;开始使用&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, &amp;amp;nbsp;如图所示的一个表格：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s1.51cto.com/wyfs02/M01/87/38/wKioL1fX-aDzfSx1AAB0CFihD7c335.jpg&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s1.51cto.com/wyfs02/M01/87/38/wKioL1fX-aDzfSx1AAB0CFihD7c335.jpg&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;表头(header): 每一列的名称;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;列(row): 具有相同数据类型的数据的集合;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;行(col): 每一行用来描述某个人/物的具体信息;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;值(value): 行的具体信息, 每个值必须与该列的数据类型相同;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;登录MySQL&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;mysql&amp;amp;nbsp;-h&amp;amp;nbsp;127.0.0.1&amp;amp;nbsp;-u&amp;amp;nbsp;用户名&amp;amp;nbsp;-p&amp;amp;nbsp;mysql&amp;amp;nbsp;-D&amp;amp;nbsp;所选择的数据库名&amp;amp;nbsp;-h&amp;amp;nbsp;主机名&amp;amp;nbsp;-u&amp;amp;nbsp;用户名&amp;amp;nbsp;-p&amp;amp;nbsp;mysql&amp;amp;gt;&amp;amp;nbsp;exit&amp;amp;nbsp;#&amp;amp;nbsp;退出&amp;amp;nbsp;mysql&amp;amp;gt;&amp;amp;nbsp;quit&amp;amp;nbsp;#&amp;amp;nbsp;退出&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;创建数据库&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对于表的操作需要先进入库use 库名;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;创建一个名为&amp;amp;nbsp;samp_db&amp;amp;nbsp;的数据库，数据库字符编码指定为&amp;amp;nbsp;gbk&amp;amp;nbsp;create&amp;amp;nbsp;database&amp;amp;nbsp;samp_db&amp;amp;nbsp;character&amp;amp;nbsp;set&amp;amp;nbsp;gbk;&amp;amp;nbsp;drop&amp;amp;nbsp;database&amp;amp;nbsp;samp_db;&amp;amp;nbsp;--&amp;amp;nbsp;删除&amp;amp;nbsp;库名为samp_db的库&amp;amp;nbsp;show&amp;amp;nbsp;databases;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;显示数据库列表。&amp;amp;nbsp;use&amp;amp;nbsp;samp_db;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;选择创建的数据库samp_db&amp;amp;nbsp;show&amp;amp;nbsp;表名;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;显示samp_db下面所有的表名字&amp;amp;nbsp;describe&amp;amp;nbsp;表名;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;显示数据表的结构&amp;amp;nbsp;delete&amp;amp;nbsp;from&amp;amp;nbsp;表名;&amp;amp;nbsp;--&amp;amp;nbsp;清空表中记录&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;创建数据库表&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;使用 create table 语句可完成对表的创建, create table 的常见形式:语法：create table 表名称(列声明);&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;CREATE&amp;amp;nbsp;TABLE&amp;amp;nbsp;`user_accounts`&amp;amp;nbsp;(&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`id`&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;int(100)&amp;amp;nbsp;unsigned&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;AUTO_INCREMENT&amp;amp;nbsp;primary&amp;amp;nbsp;key,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`password`&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;varchar(32)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;&amp;amp;#39;&amp;amp;#39;&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;用户密码&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`reset_password`&amp;amp;nbsp;tinyint(32)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;0&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;用户类型：0－不需要重置密码；1-需要重置密码&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`mobile`&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;varchar(20)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;&amp;amp;#39;&amp;amp;#39;&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;手机&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`create_at`&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;timestamp(6)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CURRENT_TIMESTAMP(6),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`update_at`&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;timestamp(6)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CURRENT_TIMESTAMP(6)&amp;amp;nbsp;ON&amp;amp;nbsp;UPDATE&amp;amp;nbsp;CURRENT_TIMESTAMP(6),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;创建唯一索引，不允许重复&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;UNIQUE&amp;amp;nbsp;INDEX&amp;amp;nbsp;idx_user_mobile(`mobile`)&amp;amp;nbsp;)&amp;amp;nbsp;ENGINE=InnoDB&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CHARSET=utf8&amp;amp;nbsp;COMMENT=&amp;amp;#39;用户表信息&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;数据类型的属性解释&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;NULL：数据列可包含NULL值;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;NOT NULL：数据列不允许包含NULL值;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;DEFAULT：默认值;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;PRIMARY：KEY 主键;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;AUTO_INCREMENT：自动递增，适用于整数类型;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;UNSIGNED：是指数值类型只能为正数;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;CHARACTER SET name：指定一个字符集;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;COMMENT：对表或者字段说明;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;增删改查&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;SELECT&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;SELECT 语句用于从表中选取数据。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT 列名称 FROM 表名称&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT * FROM 表名称&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;表abc&amp;amp;nbsp;两个&amp;amp;nbsp;id&amp;amp;nbsp;&amp;amp;nbsp;表abc中不包含&amp;amp;nbsp;字段a=b&amp;amp;nbsp;的&amp;amp;nbsp;查询出来，只显示id&amp;amp;nbsp;SELECT&amp;amp;nbsp;s.id&amp;amp;nbsp;from&amp;amp;nbsp;station&amp;amp;nbsp;s&amp;amp;nbsp;WHERE&amp;amp;nbsp;id&amp;amp;nbsp;in&amp;amp;nbsp;(13,14)&amp;amp;nbsp;and&amp;amp;nbsp;user_id&amp;amp;nbsp;not&amp;amp;nbsp;in&amp;amp;nbsp;(4);&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;从表&amp;amp;nbsp;Persons&amp;amp;nbsp;选取&amp;amp;nbsp;LastName&amp;amp;nbsp;列的数据&amp;amp;nbsp;SELECT&amp;amp;nbsp;LastName&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;结果集中会自动去重复数据&amp;amp;nbsp;SELECT&amp;amp;nbsp;DISTINCT&amp;amp;nbsp;Company&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UPDATE&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Update 语句用于修改表中的数据。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;update语句设置字段值为另一个结果取出来的字段&amp;amp;nbsp;update&amp;amp;nbsp;user&amp;amp;nbsp;set&amp;amp;nbsp;name&amp;amp;nbsp;=&amp;amp;nbsp;(select&amp;amp;nbsp;name&amp;amp;nbsp;from&amp;amp;nbsp;user1&amp;amp;nbsp;where&amp;amp;nbsp;user1&amp;amp;nbsp;.id&amp;amp;nbsp;=&amp;amp;nbsp;1&amp;amp;nbsp;)&amp;amp;nbsp;where&amp;amp;nbsp;id&amp;amp;nbsp;=&amp;amp;nbsp;(select&amp;amp;nbsp;id&amp;amp;nbsp;from&amp;amp;nbsp;user2&amp;amp;nbsp;where&amp;amp;nbsp;user2&amp;amp;nbsp;.name=&amp;amp;#39;小苏&amp;amp;#39;)&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;INSERT&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;INSERT INTO 语句用于向表格中插入新的行。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：INSERT INTO 表名称 VALUES (值1, 值2,....)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;向表&amp;amp;nbsp;Persons&amp;amp;nbsp;插入一条字段&amp;amp;nbsp;LastName&amp;amp;nbsp;=&amp;amp;nbsp;Wilson&amp;amp;nbsp;字段&amp;amp;nbsp;Address&amp;amp;nbsp;=&amp;amp;nbsp;shanghai&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;Persons&amp;amp;nbsp;(LastName,&amp;amp;nbsp;Address)&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;JSLite&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;shanghai&amp;amp;#39;);&amp;amp;nbsp;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;meeting&amp;amp;nbsp;SET&amp;amp;nbsp;a=1,b=2;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;DELETE&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;DELETE 语句用于删除表中的行。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：DELETE FROM 表名称 WHERE 列名称 = 值&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;在不删除table_name表的情况下删除所有的行，清空表。&amp;amp;nbsp;DELETE&amp;amp;nbsp;FROM&amp;amp;nbsp;table_name&amp;amp;nbsp;--&amp;amp;nbsp;或者&amp;amp;nbsp;DELETE&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;table_name&amp;amp;nbsp;--&amp;amp;nbsp;删除&amp;amp;nbsp;Person表字段&amp;amp;nbsp;LastName&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;Wilson&amp;amp;#39;&amp;amp;nbsp;&amp;amp;nbsp;DELETE&amp;amp;nbsp;FROM&amp;amp;nbsp;Person&amp;amp;nbsp;WHERE&amp;amp;nbsp;LastName&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;Wilson&amp;amp;#39;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;删除&amp;amp;nbsp;表meeting&amp;amp;nbsp;id&amp;amp;nbsp;为2和3的两条数据&amp;amp;nbsp;DELETE&amp;amp;nbsp;from&amp;amp;nbsp;meeting&amp;amp;nbsp;where&amp;amp;nbsp;id&amp;amp;nbsp;in&amp;amp;nbsp;(2,3);&amp;amp;nbsp;--&amp;amp;nbsp;表&amp;amp;nbsp;Persons&amp;amp;nbsp;字段&amp;amp;nbsp;Id_P&amp;amp;nbsp;等于&amp;amp;nbsp;Orders&amp;amp;nbsp;字段&amp;amp;nbsp;Id_P&amp;amp;nbsp;的值，&amp;amp;nbsp;--&amp;amp;nbsp;结果集显示&amp;amp;nbsp;Persons表的&amp;amp;nbsp;LastName、FirstName字段，Orders表的OrderNo字段&amp;amp;nbsp;SELECT&amp;amp;nbsp;p.LastName,&amp;amp;nbsp;p.FirstName,&amp;amp;nbsp;o.OrderNo&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;p,&amp;amp;nbsp;Orders&amp;amp;nbsp;o&amp;amp;nbsp;WHERE&amp;amp;nbsp;p.Id_P&amp;amp;nbsp;=&amp;amp;nbsp;o.Id_P&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;WHERE&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;WHERE 子句用于规定选择的标准。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT 列名称 FROM 表名称 WHERE 列 运算符 值&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;从表&amp;amp;nbsp;Persons&amp;amp;nbsp;中选出&amp;amp;nbsp;Year&amp;amp;nbsp;字段大于&amp;amp;nbsp;1965&amp;amp;nbsp;的数据&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;WHERE&amp;amp;nbsp;Year&amp;amp;gt;1965&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;AND 和 OR&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;AND - 如果第一个条件和第二个条件都成立; OR - 如果第一个条件和第二个条件中只要有一个成立;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;删除&amp;amp;nbsp;meeting&amp;amp;nbsp;表字段&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;id=2&amp;amp;nbsp;并且&amp;amp;nbsp;user_id=5&amp;amp;nbsp;的数据&amp;amp;nbsp;&amp;amp;nbsp;和&amp;amp;nbsp;--&amp;amp;nbsp;id=3&amp;amp;nbsp;并且&amp;amp;nbsp;user_id=6&amp;amp;nbsp;的数据&amp;amp;nbsp;&amp;amp;nbsp;DELETE&amp;amp;nbsp;from&amp;amp;nbsp;meeting&amp;amp;nbsp;where&amp;amp;nbsp;id&amp;amp;nbsp;in&amp;amp;nbsp;(2,3)&amp;amp;nbsp;and&amp;amp;nbsp;user_id&amp;amp;nbsp;in&amp;amp;nbsp;(5,6);&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;使用&amp;amp;nbsp;AND&amp;amp;nbsp;来显示所有姓为&amp;amp;nbsp;&amp;amp;quot;Carter&amp;amp;quot;&amp;amp;nbsp;并且名为&amp;amp;nbsp;&amp;amp;quot;Thomas&amp;amp;quot;&amp;amp;nbsp;的人：&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;WHERE&amp;amp;nbsp;FirstName=&amp;amp;#39;Thomas&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;LastName=&amp;amp;#39;Carter&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;使用&amp;amp;nbsp;OR&amp;amp;nbsp;来显示所有姓为&amp;amp;nbsp;&amp;amp;quot;Carter&amp;amp;quot;&amp;amp;nbsp;或者名为&amp;amp;nbsp;&amp;amp;quot;Thomas&amp;amp;quot;&amp;amp;nbsp;的人：&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;WHERE&amp;amp;nbsp;firstname=&amp;amp;#39;Thomas&amp;amp;#39;&amp;amp;nbsp;OR&amp;amp;nbsp;lastname=&amp;amp;#39;Carter&amp;amp;#39;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;ORDER BY&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语句默认按照升序对记录进行排序。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;ORDER BY - 语句用于根据指定的列对结果集进行排序。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;DESC - 按照降序对记录进行排序。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;ASC - 按照顺序对记录进行排序。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;Company在表Orders中为字母，则会以字母顺序显示公司名称&amp;amp;nbsp;SELECT&amp;amp;nbsp;Company,&amp;amp;nbsp;OrderNumber&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;Company&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;后面跟上&amp;amp;nbsp;DESC&amp;amp;nbsp;则为降序显示&amp;amp;nbsp;SELECT&amp;amp;nbsp;Company,&amp;amp;nbsp;OrderNumber&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;Company&amp;amp;nbsp;DESC&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;Company以降序显示公司名称，并OrderNumber以顺序显示&amp;amp;nbsp;SELECT&amp;amp;nbsp;Company,&amp;amp;nbsp;OrderNumber&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;Company&amp;amp;nbsp;DESC,&amp;amp;nbsp;OrderNumber&amp;amp;nbsp;ASC&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;IN&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;IN - 操作符允许我们在 WHERE 子句中规定多个值。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT &amp;amp;quot;字段名&amp;amp;quot;FROM &amp;amp;quot;表格名&amp;amp;quot;WHERE &amp;amp;quot;字段名&amp;amp;quot; IN (&amp;amp;#39;值一&amp;amp;#39;, &amp;amp;#39;值二&amp;amp;#39;, ...);&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;从表&amp;amp;nbsp;Persons&amp;amp;nbsp;选取&amp;amp;nbsp;字段&amp;amp;nbsp;LastName&amp;amp;nbsp;等于&amp;amp;nbsp;Adams、Carter&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;WHERE&amp;amp;nbsp;LastName&amp;amp;nbsp;IN&amp;amp;nbsp;(&amp;amp;#39;Adams&amp;amp;#39;,&amp;amp;#39;Carter&amp;amp;#39;)&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;vend_id,&amp;amp;nbsp;prod_name&amp;amp;nbsp;FROM&amp;amp;nbsp;Products&amp;amp;nbsp;WHERE&amp;amp;nbsp;NOT&amp;amp;nbsp;vend_id&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;DLL01&amp;amp;#39;&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;prod_name;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;AS&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;as - 可理解为：用作、当成，作为;别名&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;一般是重命名列名或者表名。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：select column_1 as 列1,column_2 as 列2 from table as 表&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;Employee&amp;amp;nbsp;AS&amp;amp;nbsp;emp&amp;amp;nbsp;--&amp;amp;nbsp;这句意思是查找所有Employee&amp;amp;nbsp;表里面的数据，并把Employee表格命名为&amp;amp;nbsp;emp。&amp;amp;nbsp;--&amp;amp;nbsp;当你命名一个表之后，你可以在下面用&amp;amp;nbsp;emp&amp;amp;nbsp;代替&amp;amp;nbsp;Employee.&amp;amp;nbsp;--&amp;amp;nbsp;例如&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;emp.&amp;amp;nbsp;&amp;amp;nbsp;SELECT&amp;amp;nbsp;MAX(OrderPrice)&amp;amp;nbsp;AS&amp;amp;nbsp;LargestOrderPrice&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;amp;nbsp;--&amp;amp;nbsp;列出表&amp;amp;nbsp;Orders&amp;amp;nbsp;字段&amp;amp;nbsp;OrderPrice&amp;amp;nbsp;列最大值，&amp;amp;nbsp;--&amp;amp;nbsp;结果集列不显示&amp;amp;nbsp;OrderPrice&amp;amp;nbsp;显示&amp;amp;nbsp;LargestOrderPrice&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;显示表&amp;amp;nbsp;users_profile&amp;amp;nbsp;中的&amp;amp;nbsp;name&amp;amp;nbsp;列&amp;amp;nbsp;SELECT&amp;amp;nbsp;t.name&amp;amp;nbsp;from&amp;amp;nbsp;(SELECT&amp;amp;nbsp;*&amp;amp;nbsp;from&amp;amp;nbsp;users_profile&amp;amp;nbsp;a)&amp;amp;nbsp;AS&amp;amp;nbsp;t;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;表&amp;amp;nbsp;user_accounts&amp;amp;nbsp;命名别名&amp;amp;nbsp;ua，表&amp;amp;nbsp;users_profile&amp;amp;nbsp;命名别名&amp;amp;nbsp;up&amp;amp;nbsp;--&amp;amp;nbsp;满足条件&amp;amp;nbsp;表&amp;amp;nbsp;user_accounts&amp;amp;nbsp;字段&amp;amp;nbsp;id&amp;amp;nbsp;等于&amp;amp;nbsp;表&amp;amp;nbsp;users_profile&amp;amp;nbsp;字段&amp;amp;nbsp;user_id&amp;amp;nbsp;--&amp;amp;nbsp;结果集只显示mobile、name两列&amp;amp;nbsp;SELECT&amp;amp;nbsp;ua.mobile,up.name&amp;amp;nbsp;FROM&amp;amp;nbsp;user_accounts&amp;amp;nbsp;as&amp;amp;nbsp;ua&amp;amp;nbsp;INNER&amp;amp;nbsp;JOIN&amp;amp;nbsp;users_profile&amp;amp;nbsp;as&amp;amp;nbsp;up&amp;amp;nbsp;ON&amp;amp;nbsp;ua.id&amp;amp;nbsp;=&amp;amp;nbsp;up.user_id;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;JION&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;用于根据两个或多个表中的列之间的关系，从这些表中查询数据。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;JOIN: 如果表中有至少一个匹配，则返回行&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;INNER JOIN:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;FULL JOIN: 只要其中一个表中存在匹配，就返回行&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;Persons.LastName,&amp;amp;nbsp;Persons.FirstName,&amp;amp;nbsp;Orders.OrderNo&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons&amp;amp;nbsp;INNER&amp;amp;nbsp;JOIN&amp;amp;nbsp;Orders&amp;amp;nbsp;ON&amp;amp;nbsp;Persons.Id_P&amp;amp;nbsp;=&amp;amp;nbsp;Orders.Id_P&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;Persons.LastName;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;SQL 函数&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;COUNT&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;COUNT 让我们能够数出在表格中有多少笔资料被选出来。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT COUNT(&amp;amp;quot;字段名&amp;amp;quot;) FROM &amp;amp;quot;表格名&amp;amp;quot;;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;表&amp;amp;nbsp;Store_Information&amp;amp;nbsp;有几笔&amp;amp;nbsp;store_name&amp;amp;nbsp;栏不是空白的资料。&amp;amp;nbsp;--&amp;amp;nbsp;&amp;amp;quot;IS&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;quot;&amp;amp;nbsp;是&amp;amp;nbsp;&amp;amp;quot;这个栏位不是空白&amp;amp;quot;&amp;amp;nbsp;的意思。&amp;amp;nbsp;SELECT&amp;amp;nbsp;COUNT&amp;amp;nbsp;(Store_Name)&amp;amp;nbsp;FROM&amp;amp;nbsp;Store_Information&amp;amp;nbsp;WHERE&amp;amp;nbsp;Store_Name&amp;amp;nbsp;IS&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;获取&amp;amp;nbsp;Persons&amp;amp;nbsp;表的总数&amp;amp;nbsp;SELECT&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;AS&amp;amp;nbsp;totals&amp;amp;nbsp;FROM&amp;amp;nbsp;Persons;&amp;amp;nbsp;--&amp;amp;nbsp;获取表&amp;amp;nbsp;station&amp;amp;nbsp;字段&amp;amp;nbsp;user_id&amp;amp;nbsp;相同的总数&amp;amp;nbsp;select&amp;amp;nbsp;user_id,&amp;amp;nbsp;count(*)&amp;amp;nbsp;as&amp;amp;nbsp;totals&amp;amp;nbsp;from&amp;amp;nbsp;station&amp;amp;nbsp;group&amp;amp;nbsp;by&amp;amp;nbsp;user_id;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;MAX&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MAX 函数返回一列中的最大值。NULL 值不包括在计算中。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：SELECT MAX(&amp;amp;quot;字段名&amp;amp;quot;) FROM &amp;amp;quot;表格名&amp;amp;quot;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;列出表&amp;amp;nbsp;Orders&amp;amp;nbsp;字段&amp;amp;nbsp;OrderPrice&amp;amp;nbsp;列最大值，&amp;amp;nbsp;--&amp;amp;nbsp;结果集列不显示&amp;amp;nbsp;OrderPrice&amp;amp;nbsp;显示&amp;amp;nbsp;LargestOrderPrice&amp;amp;nbsp;SELECT&amp;amp;nbsp;MAX(OrderPrice)&amp;amp;nbsp;AS&amp;amp;nbsp;LargestOrderPrice&amp;amp;nbsp;FROM&amp;amp;nbsp;Orders&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;添加索引&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;普通索引(INDEX)&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：ALTER TABLE 表名字 ADD INDEX 索引名字 ( 字段名字 )&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;–直接创建索引&amp;amp;nbsp;CREATE&amp;amp;nbsp;INDEX&amp;amp;nbsp;index_user&amp;amp;nbsp;ON&amp;amp;nbsp;user(title)&amp;amp;nbsp;--&amp;amp;nbsp;–修改表结构的方式添加索引&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;table_name&amp;amp;nbsp;ADD&amp;amp;nbsp;INDEX&amp;amp;nbsp;index_name&amp;amp;nbsp;ON&amp;amp;nbsp;(column(length))&amp;amp;nbsp;--&amp;amp;nbsp;给&amp;amp;nbsp;user&amp;amp;nbsp;表中的&amp;amp;nbsp;name字段&amp;amp;nbsp;添加普通索引(INDEX)&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;`table`&amp;amp;nbsp;ADD&amp;amp;nbsp;INDEX&amp;amp;nbsp;index_name&amp;amp;nbsp;(name)&amp;amp;nbsp;--&amp;amp;nbsp;–创建表的时候同时创建索引&amp;amp;nbsp;CREATE&amp;amp;nbsp;TABLE&amp;amp;nbsp;`table`&amp;amp;nbsp;(&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`id`&amp;amp;nbsp;int(11)&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;AUTO_INCREMENT&amp;amp;nbsp;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`title`&amp;amp;nbsp;char(255)&amp;amp;nbsp;CHARACTER&amp;amp;nbsp;SET&amp;amp;nbsp;utf8&amp;amp;nbsp;COLLATE&amp;amp;nbsp;utf8_general_ci&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`content`&amp;amp;nbsp;text&amp;amp;nbsp;CHARACTER&amp;amp;nbsp;SET&amp;amp;nbsp;utf8&amp;amp;nbsp;COLLATE&amp;amp;nbsp;utf8_general_ci&amp;amp;nbsp;NULL&amp;amp;nbsp;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;`time`&amp;amp;nbsp;int(10)&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;NULL&amp;amp;nbsp;,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PRIMARY&amp;amp;nbsp;KEY&amp;amp;nbsp;(`id`),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;INDEX&amp;amp;nbsp;index_name&amp;amp;nbsp;(title(length))&amp;amp;nbsp;)&amp;amp;nbsp;--&amp;amp;nbsp;–删除索引&amp;amp;nbsp;DROP&amp;amp;nbsp;INDEX&amp;amp;nbsp;index_name&amp;amp;nbsp;ON&amp;amp;nbsp;table&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;主键索引(PRIMARY key)&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：ALTER TABLE 表名字 ADD PRIMARY KEY ( 字段名字 )&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;给&amp;amp;nbsp;user&amp;amp;nbsp;表中的&amp;amp;nbsp;id字段&amp;amp;nbsp;添加主键索引(PRIMARY&amp;amp;nbsp;key)&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;`user`&amp;amp;nbsp;ADD&amp;amp;nbsp;PRIMARY&amp;amp;nbsp;key&amp;amp;nbsp;(id);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;唯一索引(UNIQUE)&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：ALTER TABLE 表名字 ADD UNIQUE (字段名字)&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;给&amp;amp;nbsp;user&amp;amp;nbsp;表中的&amp;amp;nbsp;creattime&amp;amp;nbsp;字段添加唯一索引(UNIQUE)&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;`user`&amp;amp;nbsp;ADD&amp;amp;nbsp;UNIQUE&amp;amp;nbsp;(creattime);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;全文索引(FULLTEXT)&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：ALTER TABLE 表名字 ADD FULLTEXT (字段名字)&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;给&amp;amp;nbsp;user&amp;amp;nbsp;表中的&amp;amp;nbsp;description&amp;amp;nbsp;字段添加全文索引(FULLTEXT)&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;`user`&amp;amp;nbsp;ADD&amp;amp;nbsp;FULLTEXT&amp;amp;nbsp;(description);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;添加多列索引&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;ALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3)&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;给&amp;amp;nbsp;user&amp;amp;nbsp;表中的&amp;amp;nbsp;name、city、age&amp;amp;nbsp;字段添加名字为name_city_age的普通索引(INDEX)&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;user&amp;amp;nbsp;ADD&amp;amp;nbsp;INDEX&amp;amp;nbsp;name_city_age&amp;amp;nbsp;(name(10),city,age);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;建立索引的时机&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在WHERE和JOIN中出现的列需要建立索引，但也不完全如此：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;MySQL只对&amp;amp;lt;，&amp;amp;lt;=，=，&amp;amp;gt;，&amp;amp;gt;=，BETWEEN，IN使用索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;某些时候的LIKE也会使用索引。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;在LIKE以通配符%和_开头作查询时，MySQL不会使用索引。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;此时就需要对city和age建立索引，&amp;amp;nbsp;--&amp;amp;nbsp;由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。&amp;amp;nbsp;SELECT&amp;amp;nbsp;t.Name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;mytable&amp;amp;nbsp;t&amp;amp;nbsp;LEFT&amp;amp;nbsp;JOIN&amp;amp;nbsp;mytable&amp;amp;nbsp;m&amp;amp;nbsp;ON&amp;amp;nbsp;t.Name=m.username&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;m.age=20&amp;amp;nbsp;AND&amp;amp;nbsp;m.city=&amp;amp;#39;上海&amp;amp;#39;;&amp;amp;nbsp;&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;mytable&amp;amp;nbsp;WHERE&amp;amp;nbsp;username&amp;amp;nbsp;like&amp;amp;#39;admin%&amp;amp;#39;;&amp;amp;nbsp;--&amp;amp;nbsp;而下句就不会使用：&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;mytable&amp;amp;nbsp;WHEREt&amp;amp;nbsp;Name&amp;amp;nbsp;like&amp;amp;#39;%admin&amp;amp;#39;;&amp;amp;nbsp;--&amp;amp;nbsp;因此，在使用LIKE时应注意以上的区别。&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;索引的注意事项&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;索引不会包含有NULL值的列&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;使用短索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不要在列上进行运算 索引会失效&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;创建后表的修改&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;添加列&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：alter table 表名 add 列名 列数据类型 [after 插入位置];&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;示例:&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;在表students的最后追加列&amp;amp;nbsp;address:&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;add&amp;amp;nbsp;address&amp;amp;nbsp;char(60);&amp;amp;nbsp;--&amp;amp;nbsp;在名为&amp;amp;nbsp;age&amp;amp;nbsp;的列后插入列&amp;amp;nbsp;birthday:&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;add&amp;amp;nbsp;birthday&amp;amp;nbsp;date&amp;amp;nbsp;after&amp;amp;nbsp;age;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;修改列&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：alter table 表名 change 列名称 列新名称 新数据类型;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;将表&amp;amp;nbsp;tel&amp;amp;nbsp;列改名为&amp;amp;nbsp;telphone:&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;change&amp;amp;nbsp;tel&amp;amp;nbsp;telphone&amp;amp;nbsp;char(13)&amp;amp;nbsp;default&amp;amp;nbsp;&amp;amp;quot;-&amp;amp;quot;;&amp;amp;nbsp;--&amp;amp;nbsp;将&amp;amp;nbsp;name&amp;amp;nbsp;列的数据类型改为&amp;amp;nbsp;char(16):&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;change&amp;amp;nbsp;name&amp;amp;nbsp;name&amp;amp;nbsp;char(16)&amp;amp;nbsp;not&amp;amp;nbsp;null;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;删除列&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：alter table 表名 drop 列名称;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;删除表students中的&amp;amp;nbsp;birthday&amp;amp;nbsp;列:&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;drop&amp;amp;nbsp;birthday;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;重命名表&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：alter table 表名 rename 新表名;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;重命名&amp;amp;nbsp;students&amp;amp;nbsp;表为&amp;amp;nbsp;workmates:&amp;amp;nbsp;&amp;amp;nbsp;alter&amp;amp;nbsp;table&amp;amp;nbsp;students&amp;amp;nbsp;rename&amp;amp;nbsp;workmates;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;清空表数据&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：delete from 表名;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;清空表为&amp;amp;nbsp;workmates&amp;amp;nbsp;里面的数据，不删除表。&amp;amp;nbsp;&amp;amp;nbsp;delete&amp;amp;nbsp;from&amp;amp;nbsp;workmates;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;删除整张表&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：drop table 表名;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;删除&amp;amp;nbsp;workmates&amp;amp;nbsp;表:&amp;amp;nbsp;&amp;amp;nbsp;drop&amp;amp;nbsp;table&amp;amp;nbsp;workmates;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;删除整个数据库&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;语法：drop database 数据库名;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;--&amp;amp;nbsp;删除&amp;amp;nbsp;samp_db&amp;amp;nbsp;数据库:&amp;amp;nbsp;&amp;amp;nbsp;drop&amp;amp;nbsp;database&amp;amp;nbsp;samp_db;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;其它相关&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/jaywcjlove/handbook/blob/master/MySQL/%E8%AE%A9MySQL%E6%94%AF%E6%8C%81emoji%E5%9B%BE%E6%A0%87%E5%AD%98%E5%82%A8.md&amp;quot;&amp;gt;让MySQL支持emoji图标存储&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/jaywcjlove/handbook/blob/master/MySQL/Mac%E4%B8%8B%E9%87%8D%E7%BD%AEMySQL%E7%9A%84root%E5%AF%86%E7%A0%81.md&amp;quot;&amp;gt;Mac下重置MySQL的root密码&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/jaywcjlove/handbook/blob/master/MySQL/mysql%E5%AE%89%E8%A3%85.md&amp;quot;&amp;gt;MySQL安装&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/jaywcjlove/handbook/blob/master/MySQL/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md&amp;quot;&amp;gt;MySQL数据类型&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;【编辑推荐】&amp;lt;/p&amp;gt;&amp;lt;ol class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://database.51cto.com/art/201608/515550.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;详解MySQL大表优化方案&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://database.51cto.com/art/201608/515609.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MySQL去除“关联表”重复数据，以建立联合唯一索引&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://database.51cto.com/art/201608/516661.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MySQL基础教程之存储过程&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://database.51cto.com/art/201609/516968.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MySQL存储过程中的错误处理&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://database.51cto.com/art/201609/517154.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MySQL支持emoji图标存储&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;原文链接：http://database.51cto.com/art/201609/517226.htm&amp;lt;/p&amp;gt;','2016-12-12 16:51:27','http://database.51cto.com/art/201609/517226.htm','1',31,1,1,0,0,0,1),(110,' 详解MySQL大表优化方案','\n详解MySQL大表优化方案\n\n当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：单表优化、字段、索引、查询SQL、引擎等。','&amp;lt;p&amp;gt;当MySQL单表记录数过大时，增删改查性能都会急剧下降，可以参考以下步骤来优化：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;单表优化&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度，一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。而事实上很多时候MySQL单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;字段&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;VARCHAR的长度只分配真正需要的空间&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;使用枚举或整数代替字符串类型&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;尽量使用TIMESTAMP而非DATETIME，&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;单表不要有太多字段，建议在20以内&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;避免使用NULL字段，很难查询优化且占用额外索引空间&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;用整型来存IP&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;索引&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;索引并不是越多越好，要根据查询有针对性的创建，考虑在WHERE和ORDER &amp;amp;nbsp;BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;值分布很稀少的字段不适合建索引，例如&amp;amp;quot;性别&amp;amp;quot;这种只有两三个值的字段&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;字符字段只建前缀索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;字符字段最好不要做主键&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不用外键，由程序保证约束&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;尽量不用UNIQUE，由程序保证约束&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;查询SQL&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可通过开启慢查询日志来找出较慢的SQL&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不做列运算：SELECT id WHERE age + 1 = &amp;amp;nbsp;10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;sql语句尽可能简单：一条sql只能在一个cpu运算;大语句拆小语句，减少锁时间;一条大sql可以堵死整个库&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不用SELECT *&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;OR改写成IN：OR的效率是n级别，IN的效率是log(n)级别，in的个数建议控制在200以内&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不用函数和触发器，在应用程序实现&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;避免%xxx式查询&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;少用JOIN&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;使用同类型进行比较，比如用&amp;amp;#39;123&amp;amp;#39;和&amp;amp;#39;123&amp;amp;#39;比，123和123比&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;尽量避免在WHERE子句中使用!=或&amp;amp;lt;&amp;amp;gt;操作符，否则将引擎放弃使用索引而进行全表扫描&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;对于连续数值，使用BETWEEN不用IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;引擎&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;目前广泛使用的是MyISAM和InnoDB两种引擎：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MyISAM&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不支持事务&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不支持外键&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不支持崩溃后的安全恢复&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;在表有读取查询的同时，支持往表中插入新纪录&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持BLOB和TEXT的前500个字符索引，支持全文索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持延迟更新索引，极大提升写入性能&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;InnoDB&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;InnoDB在MySQL 5.5后成为默认索引，它的特点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持行锁，采用MVCC来支持高并发&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持事务&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持外键&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;支持崩溃后的安全恢复&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不支持全文索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;总体来讲，MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;系统调优参数&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;可以使用下面几个工具来做基准测试：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;sysbench：一个模块化，跨平台以及多线程的性能测试工具&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;iibench-mysql：基于 Java 的 MySQL/Percona/MariaDB 索引进行插入性能测试工具&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;tpcc-mysql：Percona开发的TPC-C测试工具&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;具体的调优参数内容较多，具体可参考官方文档，这里介绍一些比较重要的参数：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;back_log：back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。可以从默认的50升至500&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;max_user_connection: 最大连接数，默认为0无上限，最好设一个合理上限&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;thread_concurrency：并发线程数，设为CPU核数的两倍&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;skip_name_resolve：禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询show\n &amp;amp;nbsp;status like &amp;amp;#39;key_read%&amp;amp;#39;，保证key_reads / key_read_requests在0.1%以下最好&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;innodb_buffer_pool_size：缓存数据块和索引块，对InnoDB表性能影响最大。通过查询show status\n like &amp;amp;nbsp;&amp;amp;#39;Innodb_buffer_pool_read%&amp;amp;#39;，保证 (Innodb_buffer_pool_read_requests –\n &amp;amp;nbsp;Innodb_buffer_pool_reads) / Innodb_buffer_pool_read_requests越高越好&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;innodb_additional_mem_pool_size：InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;innodb_log_buffer_size：InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;query_cache_size：缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query\n &amp;amp;nbsp;Cache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用Query &amp;amp;nbsp;\nCache可能会得不偿失。根据命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以通过命令show status like &amp;amp;#39;Qcache_%&amp;amp;#39;查看目前系统Query catch使用大小&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;read_buffer_size：MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;sort_buffer_size：MySql执行排序使用的缓冲大小。如果想要增加ORDER &amp;amp;nbsp;BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sort_buffer_size变量的大小&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;read_rnd_buffer_size：MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;table_cache：类似于thread_cache_size，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;升级硬件&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Scale up，这个不多说了，根据MySQL是CPU密集型还是I/O密集型，通过提升CPU和内存、使用SSD，都能显著提升MySQL性能&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;读写分离&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;也是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用文中的其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;缓存&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;缓存可以发生在这些层次：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;MySQL内部：在系统调优参数介绍了相关设置&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;数据访问层：比如MyBatis针对SQL语句做缓存，而Hibernate可以精确到单个记录，这里缓存的对象主要是持久化对象Persistence &amp;amp;nbsp;Object&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;应用服务层：这里可以通过编程手段对缓存做到更精准的控制和更多的实现策略，这里缓存的对象是数据传输对象Data Transfer Object&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Web层：针对web页面做缓存&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;浏览器客户端：用户端的缓存&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;可以根据实际情况在一个层次或多个层次结合加入缓存。这里重点介绍下服务层的缓存实现，目前主要有两种方式：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;直写式(Write Through)：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性。这也是当前大多数应用缓存框架如Spring &amp;amp;nbsp;Cache的工作方式。这种实现非常简单，同步好，但效率一般。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;回写式(Write &amp;amp;nbsp;Back)：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上。这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;表分区&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL在5.1版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对SQL层来说是一个完全封装底层的黑盒子。MySQL实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s5.51cto.com/wyfs02/M01/85/69/wKioL1ei0pGQzZFrAACLuVKnfKU285.png-wh_651x-s_238824208.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s5.51cto.com/wyfs02/M01/85/69/wKioL1ei0pGQzZFrAACLuVKnfKU285.png-wh_651x-s_238824208.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;用户的SQL语句是需要针对分区表做优化，SQL条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区，可以通过EXPLAIN\n &amp;amp;nbsp;PARTITIONS来查看某条SQL语句会落在那些分区上，从而进行SQL优化，如下图5条记录落在两个分区上：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt; explain partitions select count(1) from user_partition where id in &amp;amp;nbsp;(1,2,3,4,5);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;| id | select_type | table | partitions | type | possible_keys | key | &amp;amp;nbsp;key_len | ref | rows | Extra |&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;| 1 | SIMPLE | user_partition | p1,p4 | range | PRIMARY | PRIMARY | 8 | NULL &amp;amp;nbsp;| 5 | Using where; Using index |&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;+----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1 row in set (0.00 sec)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;分区的好处是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以让单表存储更多的数据&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分区表的数据更容易维护，可以通过清楚整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;部分查询能够从查询条件确定只落在少数分区上，速度会很快&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分区表的数据还可以分布在不同的物理设备上，从而搞笑利用多个硬件设备&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以使用分区表赖避免某些特殊瓶颈，例如InnoDB单个索引的互斥访问、ext3文件系统的inode锁竞争&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以备份和恢复单个分区&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;分区的限制和缺点：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;一个表最多只能有1024个分区&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分区表无法使用外键约束&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;NULL值会使分区过滤无效&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;所有分区必须使用相同的存储引擎&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;分区的类型：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;LIST分区：类似于按RANGE分区，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;HASH分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL中有效的、产生非负整数值的任何表达式&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;KEY分区：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;分区适合的场景有：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;最适合的场景数据的时间序列性比较强，则可以按时间来分区，如下所示：&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;pre&amp;gt;CREATE&amp;amp;nbsp;TABLE&amp;amp;nbsp;members&amp;amp;nbsp;(&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;firstname&amp;amp;nbsp;VARCHAR(25)&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;lastname&amp;amp;nbsp;VARCHAR(25)&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;username&amp;amp;nbsp;VARCHAR(16)&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL,&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;email&amp;amp;nbsp;VARCHAR(35),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;joined&amp;amp;nbsp;DATE&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;)&amp;amp;nbsp;PARTITION&amp;amp;nbsp;BY&amp;amp;nbsp;RANGE(&amp;amp;nbsp;YEAR(joined)&amp;amp;nbsp;)&amp;amp;nbsp;(&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PARTITION&amp;amp;nbsp;p0&amp;amp;nbsp;VALUES&amp;amp;nbsp;LESS&amp;amp;nbsp;THAN&amp;amp;nbsp;(1960),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PARTITION&amp;amp;nbsp;p1&amp;amp;nbsp;VALUES&amp;amp;nbsp;LESS&amp;amp;nbsp;THAN&amp;amp;nbsp;(1970),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PARTITION&amp;amp;nbsp;p2&amp;amp;nbsp;VALUES&amp;amp;nbsp;LESS&amp;amp;nbsp;THAN&amp;amp;nbsp;(1980),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PARTITION&amp;amp;nbsp;p3&amp;amp;nbsp;VALUES&amp;amp;nbsp;LESS&amp;amp;nbsp;THAN&amp;amp;nbsp;(1990),&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;PARTITION&amp;amp;nbsp;p4&amp;amp;nbsp;VALUES&amp;amp;nbsp;LESS&amp;amp;nbsp;THAN&amp;amp;nbsp;MAXVALUE&amp;amp;nbsp;);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;查询时加上时间范围条件效率会非常高，同时对于不需要的历史数据能很容的批量删除。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将热点数据单独放在一个分区，让这个分区的数据能够有机会都缓存在内存中，查询时只访问一个很小的分区表，能够有效使用索引和缓存&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;另外MySQL有一种早期的简单的分区实现 - 合并表(merge table)，限制较多且缺乏优化，不建议使用，应该用新的分区机制来替代&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;垂直拆分&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、把订单数据放到订单库。垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数一般情况下是相同的，只是字段不一样，使用主键关联&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;比如原始的用户表是：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s5.51cto.com/wyfs02/M00/85/69/wKioL1ei0xuQZR0xAAFq_IwQiM8469.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s5.51cto.com/wyfs02/M00/85/69/wKioL1ei0xuQZR0xAAFq_IwQiM8469.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;垂直拆分后是：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s1.51cto.com/wyfs02/M00/85/69/wKioL1ei0y3BdOmhAAF3UetlCzg603.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s1.51cto.com/wyfs02/M00/85/69/wKioL1ei0y3BdOmhAAF3UetlCzg603.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;垂直拆分的优点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少I/O次数(每次查询时读取的Block 就少)&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可以达到最大化利用Cache的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;数据维护简单&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;缺点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;主键出现冗余，需要管理冗余列&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;会引起表连接JOIN操作(增加CPU开销)可以通过在业务服务器上进行join来减少数据库压力&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;依然存在单表数据量过大的问题(需要水平拆分)&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;事务处理复杂&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;水平拆分&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;概述&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的MySQL表或库，达到分布式的效果，能够支持非常大的数据量。前面的表分区本质上也是一种特殊的库内分表&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;库内分表，仅仅是单纯的解决了单一表数据过大的问题，由于没有把表的数据分布到不同的机器上，因此对于减轻MySQL服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的IO、CPU、网络，这个就要通过分库来解决&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;前面垂直拆分的用户表如果进行水平拆分，结果是：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s1.51cto.com/wyfs02/M02/85/6A/wKiom1ei02TD1VlcAAGtSsiZ4mA203.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s1.51cto.com/wyfs02/M02/85/6A/wKiom1ei02TD1VlcAAGtSsiZ4mA203.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;实际情况中往往会是垂直拆分和水平拆分的结合，即将Users_A_M和Users_N_Z再拆成Users和UserExtras，这样一共四张表&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;水平拆分的优点是:&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;不存在单库大数据和高并发的性能瓶颈&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;应用端改造较少&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;提高了系统的稳定性和负载能力&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;缺点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分片事务一致性难以解决&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;跨节点Join性能差，逻辑复杂&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;数据多次扩展难度跟维护量极大&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;分片原则&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;能不分就不分，参考单表优化&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分片数量尽量少，分片尽量均匀分布在多个数据结点上，因为一个查询SQL跨分片越多，则总体性能越差，虽然要好于所有数据在一个分片的结果，只在必要的时候进行扩容，增加分片数量&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;分片规则需要慎重选择做好提前规划，分片规则的选择，需要考虑数据的增长模式，数据的访问模式，分片关联性问题，以及分片扩容问题，最近的分片策略为范围分片，枚举分片，一致性Hash分片，这几种分片都有利于扩容&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;尽量不要在一个事务中的SQL跨越多个分片，分布式事务一直是个不好处理的问题&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;查询条件尽量优化，尽量避免Select * &amp;amp;nbsp;的方式，大量数据结果集下，会消耗大量带宽和CPU资源，查询尽量避免返回大量结果集，并且尽量为频繁使用的查询语句建立索引。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;通过数据冗余和表分区赖降低跨库Join的可能&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;这里特别强调一下分片规则的选择问题，如果某个表的数据有明显的时间特征，比如订单、交易记录等，则他们通常比较合适用时间范围分片，因为具有时效性的数据，我们往往关注其近期的数据，查询条件中往往带有时间字段进行过滤，比较好的方案是，当前活跃的数据，采用跨度比较短的时间段进行分片，而历史性的数据，则采用比较长的跨度存储。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;总体上来说，分片的选择是取决于最频繁的查询SQL的条件，因为不带任何Where语句的查询SQL，会遍历所有的分片，性能相对最差，因此这种SQL越多，对系统的影响越大，所以我们要尽量避免这种SQL的产生。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决方案&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;由于水平拆分牵涉的逻辑比较复杂，当前也有了不少比较成熟的解决方案。这些方案分为两大类：客户端架构和代理架构。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;客户端架构&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通过修改数据访问层，如JDBC、Data &amp;amp;nbsp;Source、MyBatis，通过配置来管理多个数据源，直连数据库，并在模块内完成数据的分片整合，一般以Jar包的方式呈现&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是一个客户端架构的例子：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s2.51cto.com/wyfs02/M00/85/6A/wKiom1ei06Lw977QAAF4ze1z4Xs719.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s2.51cto.com/wyfs02/M00/85/6A/wKiom1ei06Lw977QAAF4ze1z4Xs719.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;可以看到分片的实现是和应用服务器在一起的，通过修改Spring JDBC层来实现&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;客户端架构的优点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;应用直连数据库，降低外围系统依赖所带来的宕机风险&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;集成成本低，无需额外运维的组件&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;缺点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;限于只能在数据库访问层上做文章，扩展性一般，对于比较复杂的系统可能会力不从心&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;将分片逻辑的压力放在应用服务器上，造成额外风险&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;代理架构&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通过独立的中间件来统一管理所有数据源和数据分片整合，后端数据库集群对前端应用程序透明，需要独立部署和运维代理组件&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是一个代理架构的例子：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s2.51cto.com/wyfs02/M02/85/69/wKioL1ei0_iSteSRAAK5uqS-sjY336.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s2.51cto.com/wyfs02/M02/85/69/wKioL1ei0_iSteSRAAK5uqS-sjY336.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;代理组件为了分流和防止单点，一般以集群形式存在，同时可能需要Zookeeper之类的服务组件来管理&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;代理架构的优点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;能够处理非常复杂的需求，不受数据库访问层原来实现的限制，扩展性强&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;对于应用服务器透明且没有增加任何额外负载&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;缺点是：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;需部署和运维独立的代理中间件，成本高&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;应用需经过代理来连接数据库，网络上多了一跳，性能有损失且有额外风险&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;各方案比较&amp;lt;/p&amp;gt;&amp;lt;table width=&amp;quot;825&amp;quot;&amp;gt;&amp;lt;thead style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot; class=&amp;quot;firstRow&amp;quot;&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;出品方&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;架构模型&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;支持数据库&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;分库&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;分表&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;读写分离&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;外部依赖&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;是否开源&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;实现语言&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;支持语言&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;最后更新&amp;lt;/th&amp;gt;&amp;lt;th style=&amp;quot;box-sizing: border-box; border: 1px solid rgb(230, 230, 230); word-break: normal; padding: 5px 8px; background: rgb(243, 243, 243);&amp;quot;&amp;gt;Github星数&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://www.mysql.com/products/enterprise/fabric.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MySQL &amp;amp;nbsp;Fabric&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;MySQL官方&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;代理架构&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;MySQL&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;是&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;python&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无限制&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;4个月前&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;35&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://github.com/alibaba/cobar&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Cobar&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;阿里巴巴&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;代理架构&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;MySQL&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;是&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无限制&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;两年前&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;1287&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://github.com/alibaba/cobarclient&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Cobar &amp;amp;nbsp;Client&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;阿里巴巴&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;客户端架构&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;MySQL&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;是&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;三年前&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;344&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://github.com/alibaba/tb_tddl&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;TDDL&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;淘宝&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;客户端架构&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无限制&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Diamond&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;只开源部分&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;Java&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;未知&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;519&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://github.com/Qihoo360/Atlas&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Atlas&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;奇虎360&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;代理架构&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;MySQL&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;有&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;是&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;C&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;无限制&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;10个月前&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;1941&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr style=&amp;quot;BOX-SIZING: border-box&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDING-RIGHT: 8px&amp;quot;&amp;gt;&amp;lt;a style=&amp;quot;BOX-SIZING: border-box; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(0,154,97); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; OUTLINE-COLOR: invert&amp;quot; href=&amp;quot;https://github.com/brucexx/heisenberg&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Heisenberg&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td style=&amp;quot;BOX-SIZING: border-box; BORDER-TOP: rgb(230,230,230) 1px solid; BORDER-RIGHT: rgb(230,230,230) 1px solid; BORDER-BOTTOM: rgb(230,230,230) 1px solid; WORD-BREAK: normal; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 8px; BORDER-LEFT: rgb(230,230,230) 1px solid; PADDI','2016-12-12 16:55:02','http://database.51cto.com/art/201608/515550.htm','1',31,1,1,0,0,0,1),(111,' 小白学习mysql之高新能索引基础篇','索引在数据库中的地位是及其的重要，同时要想完全的掌握索引并不是一件容易的事，需要对数据的查询原理以及计算机操作系统有深刻的认识，当然相关的算法和数据结构也是必须的。因此，这篇文章感到了一些压力，不过还是决定先拿出来总结一下，理一理索引，就当做学习笔记了。','&amp;lt;p&amp;gt;索引在数据库中的地位是及其的重要，同时要想完全的掌握索引并不是一件容易的事，需要对数据的查询原理以及计算机操作系统有深刻的认识，当然相关的算法和数据结构也是必须的。因此，这篇文章感到了一些压力，不过还是决定先拿出来总结一下，理一理索引，就当做学习笔记了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;索引的重要习性犹如一本字典的拼音检索和部首检索部分，想象一下你买了一本只有正文的字典，那该有多么抓狂。而且在一个软件系统中，通常数据的查询与修改往往占到了10:1的比例，也就是我们需要将大部分的精力投入到数据的查询上，其中很多工作是用来提升查询的速度的，那么在这个过程中索引就扮演者非常重要的角色。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a name=&amp;quot;i0&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;h2&amp;gt;索引的实质&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;如果说一本字典的正文内容的实质是纸张的话，那么它前面按照拼音或者部首检索的索引的实质是什么呢!当然也是纸张了，可能有人觉得是废话，当我们同时类比到索引上就可以知道，一个数据表的实质是数据文件（即文件），那么索引的实质也当然是文件了，Mysql的InnoDB的数据表中的索引就是表空间的一部分。因此，初学者可以把索引完全想象成为一本字典，一本字典就是一个数据表，正文部分呢，就是这个数据表的详细内容，按照拼音和部首的检索都是索引。\n \n当我们通过索引查找一条数据项的时候就犹如通过拼音索引查找某一个字，当在索引中查找到那个字的时候，会根据右边对应的页码找到那个字的解释，同样，MySQL的索引工作原理也是如此，每个索引项都有一个建索引列的关键字和一个指向该数据项的指针（类似字典中的页码），当我们查找到那个目标关键字时，根据指针便可以直接定位到数据表中该关键字的位置。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;但现实中的真是数据表并不像字典那样，内容都是严格按照拼音序列排列的，因为有很多不确定的新内容要插入或者要进行其他操作，所以字典只是一种特殊的数据表，并不能把所有的数据表都拿来和字典比，这里用字典来类比只是为了对索引的实质有一个立体的认识。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a name=&amp;quot;i1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;h2&amp;gt;索引是如何实现快速查找的&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;假设A公司有1024名员工（员工编号1-1024），早上的出勤人数为1023次，现在想知道员工编号为8的小明是否出勤，如何通过早上的签到表快速的查询小明是否出勤呢！在没有索引的情况下，通常的做法是从第一条记录逐个向后查找，如果小明最后一个来或者没有来，那么就需要查找1023次，效率为O(N)。也许会觉得1023次查找对现在的计算机根本不算什么，但是对于很多系统动辄都是上千万的数据记录，你可以想象查找的时间，比如你用15分钟终于通过了qq的身份校验登陆上了qq是一种怎么样的体验。因此，索引就呼之欲出了，我们如何通过索引来提高一个数量级的查找效率，这个时候就需要对这1024条数据做些什么了，在每条记录插入的时候，可以根据每条记录的员工编号和存储该记录的地址（指针）建立一个二叉查找树，这样1023条记录便可以通过10次查找便可查到，查找效率足足提高了100倍。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;同样，为了效率的提升，也付出了一些代价，因为建立二叉查找树需要额外的存储空间，同时每次插入数据的时候需要对二叉查找树进行维护，减缓了数据的更新速度。但综合来考虑，一般认为这样做是值得的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当然在MySQL中，不是采用的二叉树查找树来完成索引的存储的，上面举得例子只是为了说明索引的工作过程，但其思想是相同的。MySQL中没有特殊说明的话，一般说的索引指的就是B-Tree索引，采用B-Tree这种数据结构是综合了计算机操作系统以及组成而综合考虑的。其核心思想主要是减少磁盘的IO次数，提高查询速度。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a name=&amp;quot;i2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;h2&amp;gt;如何理解聚簇索引&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;你只需记住它的名字叫聚簇索引，它不同于其他普通的索引！聚簇索引不仅仅是一种索引，更是一种存储方式，InnoDB中将B-Tree索引和数据行存储在一个数据结构中，意味着什么呢？这意味着数据行即索引，索引即数据行，它们是在一起，在一起，在一起的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;接着通过来建立字典的例子来理解聚簇索引和其他普通索引的区别，现在要建立一本中华字典，这个时候字典是空的，要我们造一本字典出来，首先我们要完成字典的正文，我们按照汉语拼音的顺序去组织字典的正文，第一个是“安\n an ”，放在一个位置，同时后面附加上注释(这里，“an”就相当于聚簇索引的关键字，而后面的注释就是数据行，它们存在一起)，第二个是“王 \nwang”字，通过和“安 an”字比较，拼音顺序靠后，所以放第二个。注意这里的放是指存储在磁盘中的位置，可以理解为存储顺序。第三个字是“小 \nxiao”字，通过拼音顺序，需要将第三个字存在第一个字“安”后面，那“王”字已经占了磁盘页面的位置，所以它需要向后面移动，如果移出该列，就导致了也分裂，所以可以看到聚集索引的更新代价真的很大，那为什么还要这样做呢？聚簇索引带来了那些好处？&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;......，假设按照上面方法已经建立好了字典的正文内容，这个时候就可以让我们体会一下聚簇索引的好处了，假如你要找“安 \nan”字，根据拼音序列，你一定知道它一定在前几个页面，所以直接可以翻到前面，同时你也可以找到拼音“an”所对应的所有的汉字，这就是聚簇索引带来的好处，同时聚簇索引是和数据行放在一起的，你不需要在根据索引里的指针找到对应的数据行，然后翻页找到（翻页就相当于磁盘IO），这些都是效率的提升。然而，上面也看到了聚簇索引的负面影响比如插入的时候，因此它就像一般利剑，用的合适效率提升，用的糟糕也会带来很大的不好影响。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;是时候区别一下非聚聚索引了，这个时候我们又按照部首建立了一个索引，那么按照部首建立的索引就是非聚簇索引，它单独的存在在字典的前几个页面，而且同一个部首的字所对应的页码也是没有顺序的，如果我们要山字旁所对应的所有汉字，那就要取很多个页面的值，导致很多随机IO产生，同时不能很好利用计算机存储系统的缓存系统，因此效率远没有聚簇索引高。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;InnoDB中聚簇索引产生的原则：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;当有主键时，主键为聚簇索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;当没有主键时，引擎会选择一个唯一的*非空*列来作为聚簇索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;如果没有以上两种情况的列，引擎会隐式的定义一个主键作为聚簇索引&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;最后，通过建立一个数据表来感受聚簇索引，首先建立有一个没有主键也没有唯一非空列索引的数据表，即聚簇索引是系统隐式生成这种情况。这种情况，一般就是按数据插入的先后顺序进行排列。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;CREATE&amp;amp;nbsp;TABLE&amp;amp;nbsp;user_log&amp;amp;nbsp;(user_id&amp;amp;nbsp;INT&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL,place&amp;amp;nbsp;VARCHAR(20)&amp;amp;nbsp;NOT&amp;amp;nbsp;&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;&amp;amp;#39;&amp;amp;#39;,login_time&amp;amp;nbsp;TIMESTAMP&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CURRENT_TIMESTAMP&amp;amp;nbsp;)&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CHARSET&amp;amp;nbsp;utf8;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;接下来插入三条数据：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;#39;中国&amp;amp;#39;);&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;2&amp;amp;#39;,&amp;amp;#39;中国&amp;amp;#39;);&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;#39;美国&amp;amp;#39;);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;然后，选择所有列（即按照存储顺序查看数据列），果然如我们猜想，是按照插入顺序存储的：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;user_log;&amp;amp;nbsp;user_id&amp;amp;nbsp;place&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;login_time1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;中国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:32:412&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;中国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:33:181&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;美国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:33:18&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;接下来，我们添加一个唯一的索引（ID+login_time），此时 \n系统引擎应该将此索引作为聚簇索引，因此我们再次插入新的数据的时候是按照ID聚簇存储的，就是说ID相同的会存储在一起，存储在同一个页面，甚至连续的几个页面。\n 下面首先添加这个唯一索引 并接着添加三条新的记录：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;amp;gt;&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;user_log&amp;amp;nbsp;ADD&amp;amp;nbsp;UNIQUE&amp;amp;nbsp;KEY&amp;amp;nbsp;U_USER_LOG_ID_LOGIN_TIME(user_id,login_time);&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;#39;法国&amp;amp;#39;);&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;2&amp;amp;#39;,&amp;amp;#39;日本&amp;amp;#39;);&amp;amp;gt;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;user_log(user_id,place)VALUES(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;#39;韩国&amp;amp;#39;);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;然后接着查看数据的存储情况：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;user_log;&amp;amp;nbsp;user_id&amp;amp;nbsp;place&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;login_time1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;中国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:32:411&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;美国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:33:181&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;法国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:48:002&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;中国&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:33:182&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;日本&amp;amp;nbsp;&amp;amp;nbsp;2015-11-20&amp;amp;nbsp;10:48:00&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;这样以来，如果我们要获取某一个用户的登陆情况，就可以非常的方便，因为该用户的所有登陆记录是按照ID聚集的存储在一起的，这样主存缓存一个页面的数据可能就OK了，如果是非聚集存储的，假如某个id的数据分散在100个页面，那么主存就要缓存这100个页面，效率可想而知。&amp;lt;/p&amp;gt;&amp;lt;h3&amp;gt;总结&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;这篇文中一开始的构想是想从计算机操作系统的存储系统和B-Tree入手写的，结果写着写着发现，有点不太现实，一来文章长度可能增加几倍，二来可能自己都写晕了，既然是小白篇嘛，就先来个综述吧！总之索引是非常强大而且有意思的，然而当数据量达到一定量时，感觉索引也是有点乏力，但是尽量用好每一个索引是非常有必要而且是一种态度。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://developer.51cto.com/art/201511/497995.htm&amp;lt;/p&amp;gt;','2016-12-12 16:56:43','http://developer.51cto.com/art/201511/497995.htm',NULL,31,1,1,0,0,0,1),(112,'PHP到MySQL数据查询过程概述','本篇文章主要介绍了&quot;PHP到MySQL数据查询过程概述&quot;，主要涉及到方面的内容，对于MySql感兴趣的同学可以参考一下','&amp;lt;p&amp;gt;HP层到MySQL层&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;Php到sql组件层次如下图所示：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s3.51cto.com/wyfs02/M02/71/EB/wKiom1XawIPQYdKAAAA6gsdLi2k540.jpg-wh_651x-s_3863671406.jpg&amp;quot; alt=&amp;quot;PHP到MySQL数据查询过程概述&amp;quot; title=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;ext/mysqli和ext/mysql 是客户端的扩展程序库(库函数) ，在客户端脚本层面的扩展库。 &amp;amp;nbsp;\nMysqli库是mysql库的扩展版本，扩展版本增加了列版定（Bind Column）绑定。PDO (PHP Data Object) &amp;amp;nbsp;\n是另外一种面向数据&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_%e5%af%b9%e8%b1%a1/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;对象&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;的\n 扩展库。这些扩展库直接面向编程者，而它的底层实现是mysql连接引擎（如mysqlnd和libmysql ）（参考 &amp;amp;nbsp;\nhttp://bbs.chinaunix.net/thread-3679393-1-1.html &amp;amp;nbsp;\n、http://blog.csdn.net/treesky/article/details/7286098 ）。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;mysqlnd和libmysql 是PHP端（客户端）的数据库连接驱动引擎。libmysql \n是通用的数据库连接引擎，而mysqlnd是专属PHP开发的连接引擎，从属于Zend中。 &amp;amp;nbsp;\n当PHP通过调用扩展库（ext/mysqli和ext/mysql）中的mysql_query() \n函数进行数据库查询的时候，Zend引擎将通过mysql（mysqlnd和libmysql）查询引擎向MySQL服务器发出查询请求。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL层的数据查询&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s4.51cto.com/wyfs02/M00/71/E8/wKioL1XawprAWk1dAABilUcvNiI194.jpg&amp;quot; alt=&amp;quot;PHP到MySQL数据查询过程概述&amp;quot; title=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL服务器接受到客户端的查询请求后，查询执行过程如上图所示： &amp;lt;br/&amp;gt;1. 查询缓存，如果命中则直接将结果集返回给到客户端，否则进入步骤2 &amp;lt;br/&amp;gt;2. 对SQL语句依次进行解析、预处理、查询优化等操作，最终生成查询执行计划（select的查询执行计划可以通过explain select 查看） &amp;lt;br/&amp;gt;3. MySQL服务端的查询执行引擎将依据查询执行计划 调用存储引擎对数据进行查询。当SQL语句的最后一层关联被执行后，将产生查询结果集 &amp;lt;br/&amp;gt;4. 查询结果集发送到客户端，传回的方式有两种：MySQL服务端缓存结果集 或 不缓存，这个由参数SQL_BUFFER_RESULT设置。 并且，如果用户设置了SQL_CACHE 那么本次的查询的结果集的一份副本存储于 查询缓存 中（步骤1相关）。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;SQL_CACHE参数的启示： &amp;lt;br/&amp;gt;将复杂的（多个关联）查询分解为多条简单的查询，因为 &amp;lt;br/&amp;gt;1）简单查询的缓存命中搞、 &amp;lt;br/&amp;gt;2）复杂查询结果的缓存易失效（关联太多表） &amp;lt;br/&amp;gt;3）简单查询锁的持有率低&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;My&amp;lt;/strong&amp;gt;&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_SQL+Server/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;SQL Server&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;strong&amp;gt; 到 PHP层&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通信模式My&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_SQL+Server/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;SQL Server&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;和客户端的通信采用“半双工通信”，意思是：客户端和服务端只能有一个在读，并且另外一个必须是写。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;优点：协议简单，客户端和服务端的写权限是互斥的&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;缺点：无法进行&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_%e6%b5%81%e9%87%8f/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;流量&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;控制，一端开始发送消息，另一端要完整的接受这个消息后才能响应它。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;启示：服务端查询后的结果集发送给客户端，客户端（客户端的查询引擎，例如mysqlnd）必须完整的接受。所以，如果只需要少数行，记得在sql语句添加使用limit，少用select *。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;结果集回传模式结果集回传中，每一行记录都通过 客户端-服务器通信协议进行包装，然后再交接给下层的tcp协议；当然，在tcp层，可以先缓存每行记录的协议包，组成大包在发出（对应用层透明）。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL服务端只有将结果集全部发送给客户端后，才能释放结果集所占用的buffer。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;服务端缓存模式&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s1.51cto.com/wyfs02/M01/71/EB/wKiom1XawImjdxF4AAAyoMnKIN0478.jpg&amp;quot; alt=&amp;quot;PHP到MySQL数据查询过程概述&amp;quot; title=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;客户端命令： mysql_unbuffer_query()，在客户端的sql驱动扩展（mysqlnd）中不设置结果集的缓存，所以在fecth_array_xxx从结果集中读取一条记录时，需要从服务端的缓冲区中读取。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;服务端无缓存模式&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s3.51cto.com/wyfs02/M00/71/EB/wKiom1XawI3ASw2KAAA3N3WeeIw889.jpg&amp;quot; alt=&amp;quot;PHP到MySQL数据查询过程概述&amp;quot; title=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;客户端命令： mysql_query()，在客户端的sql驱动扩展（mysqlnd）中设置了buffer用于缓存服务端的结果集，所以在fecth_array_xxx从结果集中读取一条记录时，是直接从mysqlnd扩展的缓冲区中取得row。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;小结&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;如果结果集很大： 服务端无缓存模式可以减少服务端的内存压力哟，但是占用客户端的内存。这样只有看情况取舍了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;PHP层到用户层&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在客户端，于服务端对接的是mysql扩展引擎（libmysql 或者 mysqlnd），而用户层是通过扩展库（ext/mysql 或 ext/mysqli）和mysql引擎进行交互（启示就是调用引擎的api读取结果集）。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;引 擎libmysql 和 mysqlnd &amp;amp;nbsp;\n的机制并不同，主要区别是mysqlnd是转为php写的，被编译到zend内部。而libmysql是通用的库，zend需要调用该库实现数据库的连 \n接。在这种却别下，mysqlnd和zend具有更好的粘合性，在数据传输到用户层时，少了一层数据的拷贝。具体的架构区别如下图所示。图中，五角星表示\n 缓存 buffer。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;img src=&amp;quot;http://s8.51cto.com/wyfs02/M02/71/E8/wKioL1XawqOSZTyNAABgXheWPDU583.jpg&amp;quot; alt=&amp;quot;PHP到MySQL数据查询过程概述&amp;quot; title=&amp;quot;&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;ext/mysqli和ext/mysql 是客户端的扩展程序库(库函数) ： 在客户端脚本层面mysqlInd和libmysql 是My&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_SQL+Server/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;SQL Server&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;端的&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_%e9%a9%b1%e5%8a%a8%e7%a8%8b%e5%ba%8f/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;驱动程序&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;。其中，libmysql是通用的MySQL查询&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_%e9%a9%b1%e5%8a%a8%e7%a8%8b%e5%ba%8f/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;驱动程序&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;，而mysqlnd是专为PHP设置的基于Zend引擎的SQL驱动，即mysqlnd的数据驱动动作需要经过Zend和my&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_sqlserver/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;sqlserver&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;交互，而libmysql直接和my&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_sqlserver/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;sqlserver&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;交互的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对比： &amp;lt;br/&amp;gt;ext/mysqli（或者ext/mysql）和libmysql的数据库查询中的过程为： &amp;lt;br/&amp;gt;1）mysqi向libmysql驱动发送查询请求 &amp;lt;br/&amp;gt;2）Libmysql执行请求并得到结果集存储域libmysql的buffers中 &amp;lt;br/&amp;gt;3）Mysqli申请内存：zval指定的一块buffer &amp;lt;br/&amp;gt;4）Mysqii从libmysql拷贝结果集到zval指定的buffer中 &amp;lt;br/&amp;gt;ext/mysqli（或者ext/mysql）和mysqlnd的数据库查询中的过程为： &amp;lt;br/&amp;gt;1) mysqi向mysqlnd驱动发送查询请求 &amp;lt;br/&amp;gt;2) mysqlnd驱动通过zend引擎执行sql查询，结果集的每一行由一个buffer存储（各个buffer是分散的） &amp;lt;br/&amp;gt;3) Mysqlnd创建多个zval，并指向这些buffers&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;例如： &amp;lt;br/&amp;gt;在ext/mysql &amp;amp;amp; libmysql &amp;amp;nbsp;\n中，libmysql驱动执行SQL语句后得到结果集Row1~Row3，然后ext/mysql将结果集拷贝到zend &amp;amp;nbsp;\nbuffer中，之后mysqli_fetch_xxx函数从该区域内存中读取结果集中的内容。 &amp;lt;br/&amp;gt;在ext/mysqli &amp;amp;amp; mysqlInd 中，mysqlnd &amp;amp;nbsp;\n驱动执行SQL语句得到结果集Row1~Row3，其中，每个row直接由zend的一个buffer存储，并由一个zval指向。客户端通过映射直接从\n 该内存区域中读取结果实现mysqli_fetch_xxx。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;小结&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;mysqlnd和zend更具有粘合性，在sql查询驱动中，mysqlnd通过zend引擎&amp;lt;a href=&amp;quot;http://www.codes51.com/article/search_%e8%ae%bf%e9%97%ae%e6%95%b0%e6%8d%ae%e5%ba%93/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;访问数据库&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;，并直接将将结果存储域zend的buffer中，相比libmysql驱动（独立于zend），少了一次结果集缓存拷贝。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;参考&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;《高性能MySQL》&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;http://www.cnxct.com/libmysql-mysqlnd-which-is-best-and-what-about-mysqli-pdomysql-mysql/&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;http://www.cnxct.com/wp-content/uploads/2012/12/andrey-mysqlnd.pdf&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://developer.51cto.com/art/201508/489240.htm&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:01:34','http://developer.51cto.com/art/201508/489240.htm','1',31,1,1,0,0,0,1),(113,'取消共享文档','默认情况下，在Windows XP中打开我的电脑，会看到在硬盘图标上方有一些文件夹。这些就是“共享文件夹”，这里有每一个用来户共享文件所用的文件夹。我们可以让这些文件夹在我的电脑中消失','&amp;lt;p&amp;gt;原理很简单，只要打开注册表找到如下位置：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows \n\\CurrentVersion\\ Explorer\\MyComputer\\NameSpace\\DelegateFolders，把 \n{59031a47-3f72-44a7-89c5-5595fe6b30ee}键值删掉，下次打开我的电脑，这些烦人的文件夹就不复存在了。&amp;lt;/p&amp;gt;','2016-12-18 16:19:00','',NULL,35,1,1,0,4,0,1),(114,'MySQL去除“关联表”重复数据，以建立联合唯一索引','需要对一张关系表进行重构和优化，然而这张关系表由于已有代码没有注重并发导致了很多的脏数据，即重复数据。解决办法：使用insert where not exists语句和清理脏数据并建立联合唯一索引。','&amp;lt;p&amp;gt;表名thread_recommend，帖子推荐表，为两个实体user_id和thread_id的(推荐)关系表，表结构很简单如下：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;/*用户推荐帖子记录表*/&amp;amp;nbsp;&amp;amp;nbsp;CREATE&amp;amp;nbsp;TABLE&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;(&amp;amp;nbsp;&amp;amp;nbsp;`id`&amp;amp;nbsp;int(11)&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;AUTO_INCREMENT,&amp;amp;nbsp;&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;int(11)&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;NULL&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;被用户推荐的帖子编号&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;`user_id`&amp;amp;nbsp;int(11)&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;NULL&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;推荐该帖子的用户编号&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;`status`&amp;amp;nbsp;int(11)&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;&amp;amp;#39;1&amp;amp;#39;&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;状态0&amp;amp;nbsp;取消推荐，1推荐&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;`created`&amp;amp;nbsp;TIMESTAMP&amp;amp;nbsp;NOT&amp;amp;nbsp;NULL&amp;amp;nbsp;DEFAULT&amp;amp;nbsp;CURRENT_TIMESTAMP&amp;amp;nbsp;COMMENT&amp;amp;nbsp;&amp;amp;#39;推荐时间&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;nbsp;PRIMARY&amp;amp;nbsp;KEY&amp;amp;nbsp;(`id`),&amp;amp;nbsp;&amp;amp;nbsp;KEY&amp;amp;nbsp;`userid`&amp;amp;nbsp;(`user_id`)&amp;amp;nbsp;USING&amp;amp;nbsp;BTREE&amp;amp;nbsp;&amp;amp;nbsp;)&amp;amp;nbsp;ENGINE=InnoDB;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;问题在于，由于代码不规范，在高并发时(或数据库压力大时造成的延时积压时)会出现多个(相同thread_id和user_id的)组合，如下：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s5.51cto.com/wyfs02/M01/85/76/wKiom1ekNUWjuUFcAAEqodpEt6I270.png-wh_651x-s_3716363602.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s5.51cto.com/wyfs02/M01/85/76/wKiom1ekNUWjuUFcAAEqodpEt6I270.png-wh_651x-s_3716363602.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;之后你们懂的，各种和原想不一致的神奇bug喷涌而出，比如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我刚刚取消了推荐，怎么还显示我推荐着!!&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;显示的总推荐数怎么和实际推荐用户加起来不一样!!&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决方案一：使用insert where not exists语句&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;声明：此方案并不是最佳方案，不推荐使用。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;先上代码：(这里拿另一个关系表的真实query举例，原理一样)&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`user_topic`&amp;amp;nbsp;(`user_id`,&amp;amp;nbsp;`topic_id`)&amp;amp;nbsp;&amp;amp;nbsp;SELECT&amp;amp;nbsp;:userId,&amp;amp;nbsp;:topicid&amp;amp;nbsp;FROM&amp;amp;nbsp;`user_topic`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;NOT&amp;amp;nbsp;EXISTS&amp;amp;nbsp;(SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`user_topic`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;`user_topic`.`user_id`&amp;amp;nbsp;=&amp;amp;nbsp;:userId&amp;amp;nbsp;&amp;amp;nbsp;AND&amp;amp;nbsp;`user_topic`.`topic_id`&amp;amp;nbsp;=&amp;amp;nbsp;:topicid)&amp;amp;nbsp;&amp;amp;nbsp;LIMIT&amp;amp;nbsp;1;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;(相同方法见&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/3164505/mysql-insert-record-if-not-exists-in-table/3164741#3164741&amp;quot;&amp;gt;http://stackoverflow.com/a/31...&amp;lt;/a&amp;gt;)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通过这种“插入时判断不存在才插入并返回行数为1，存在的话返回行数为0”的方法，可以做到：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;只有在返回行数为1的情况下才执行之后逻辑(如缓存内的统计数+1，缓存内帖子推荐人增加此userId等等)&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;如果返回行数为0，则接口返回error&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;解决方案二：清理脏数据并建立联合唯一索引&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这个方案是本文的核心了，也是我们目前认为的最佳实践。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;第一步：查找user_id, thread_id的联合duplication&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;a.*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;a&amp;amp;nbsp;&amp;amp;nbsp;INNER&amp;amp;nbsp;JOIN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`thread_id`,&amp;amp;nbsp;`user_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(id)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1)&amp;amp;nbsp;b&amp;amp;nbsp;ON&amp;amp;nbsp;a.`thread_id`&amp;amp;nbsp;=&amp;amp;nbsp;b.`thread_id`&amp;amp;nbsp;AND&amp;amp;nbsp;a.`user_id`&amp;amp;nbsp;=&amp;amp;nbsp;b.`user_id`&amp;amp;nbsp;&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;a.`user_id`&amp;amp;nbsp;ASC,&amp;amp;nbsp;a.`thread_id`&amp;amp;nbsp;ASC,&amp;amp;nbsp;a.`id`&amp;amp;nbsp;DESC&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;或简单的版本&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;(`user_id`,&amp;amp;nbsp;`thread_id`)&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;得到&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://s5.51cto.com/wyfs02/M00/85/76/wKioL1ekNfqym8OFAAHMmGBiyrQ046.png&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://s5.51cto.com/wyfs02/M00/85/76/wKioL1ekNfqym8OFAAHMmGBiyrQ046.png&amp;quot; alt=&amp;quot;&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;哇!所有的重复项都在这里了，好想马上把它们干掉!&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;现在需要将重复的条目中ID更大的所有条目都删除，只留ID最小的那一个。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;删之前先获得需要删除项，比对一下，&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;(`user_id`,&amp;amp;nbsp;`thread_id`)&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1)&amp;amp;nbsp;&amp;amp;nbsp;AND&amp;amp;nbsp;`id`&amp;amp;nbsp;NOT&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;MIN(`id`)&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;下一步，SELECT * FROM改成DELETE FROM，删除!&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;DELETE&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;(`user_id`,&amp;amp;nbsp;`thread_id`)&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1)&amp;amp;nbsp;&amp;amp;nbsp;AND&amp;amp;nbsp;`id`&amp;amp;nbsp;NOT&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;MIN(`id`)&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;Oops!报错! You can&amp;amp;#39;t specify target table &amp;amp;#39;thread_recommend&amp;amp;#39; for update in FROM &amp;amp;nbsp;clause&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是Mysql的一个小问题，我们参见解决方案 http://stackoverflow.com/a/14... 后修改一下SQL就好：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;DELETE&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;(`user_id`,&amp;amp;nbsp;`thread_id`)&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;FROM&amp;amp;nbsp;(SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`)&amp;amp;nbsp;a&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1)&amp;amp;nbsp;&amp;amp;nbsp;AND&amp;amp;nbsp;`id`&amp;amp;nbsp;NOT&amp;amp;nbsp;IN&amp;amp;nbsp;(SELECT&amp;amp;nbsp;MIN(`id`)&amp;amp;nbsp;FROM&amp;amp;nbsp;(SELECT&amp;amp;nbsp;*&amp;amp;nbsp;FROM&amp;amp;nbsp;`thread_recommend`)&amp;amp;nbsp;b&amp;amp;nbsp;GROUP&amp;amp;nbsp;BY&amp;amp;nbsp;`user_id`,&amp;amp;nbsp;`thread_id`&amp;amp;nbsp;HAVING&amp;amp;nbsp;COUNT(1)&amp;amp;nbsp;&amp;amp;gt;&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;最后，加联合唯一索引!&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;`thread_recommend`&amp;amp;nbsp;&amp;amp;nbsp;ADD&amp;amp;nbsp;UNIQUE&amp;amp;nbsp;KEY&amp;amp;nbsp;`thread_id_user_id_unique`(`thread_id`,`user_id`)&amp;amp;nbsp;USING&amp;amp;nbsp;BTREE;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;Of course，如果上述清理工作没有完成将会报错!&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://database.51cto.com/art/201608/515609.htm&amp;lt;/p&amp;gt;','2016-12-12 17:05:49','http://database.51cto.com/art/201608/515609.htm',NULL,31,1,1,0,0,0,1),(115,'MySQL索引之聚集索引','在MySQL里，聚集索引和非聚集索引分别是什么意思，有什么区别? 　　在MySQL中，InnoDB引擎表是(聚集)索引组织表(clustered index organize table)，而MyISAM引擎表则是堆组织表(heap organize table)。','&amp;lt;p&amp;gt;在MySQL里，聚集索引和非聚集索引分别是什么意思，有什么区别?&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在MySQL中，InnoDB引擎表是(聚集)索引组织表(clustered index organize &amp;amp;nbsp;table)，而MyISAM引擎表则是堆组织表(heap organize table)。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;也有人把聚集索引称为聚簇索引。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当然了，聚集索引的概念不是MySQL里特有的，其他数据库系统也同样有。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;简言之，聚集索引是一种索引组织形式，索引的键值逻辑顺序决定了表数据行的物理存储顺序，而非聚集索引则就是普通索引了，仅仅只是对数据列创建相应的索引，不影响整个表的物理存储顺序。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们先来看看两种存储形式的不同之处：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;简单说，IOT表里数据物理存储顺序和主键索引的顺序一致，所以如果新增数据是离散的，会导致数据块趋于离散，而不是趋于顺序。而HOT表数据写入的顺序是按写入时间顺序存储的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;IOT表相比HOT表的优势是：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;范围查询效率更高;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;数据频繁更新(聚集索引本身不更新)时，更不容易产生碎片;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;特别适合有一小部分热点数据频繁读写的场景;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通过主键访问数据时快速可达;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;IOT表的不足则有：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;数据变化如果是离散为主的话，那么效率会比HOT表差;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;HOT表的不足有：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;索引回表读开销很大;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;大部分数据读取时随机的，无法保证被顺序读取，开销大;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;每张InnoDB表只能创建一个聚集索引，聚集索引可以由一列或多列组成。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;上面说过，InnoDB是聚集索引组织表，它的聚集索引选择规则是这样的：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;首先选择显式定义的主键索引做为聚集索引;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;如果没有，则选择第一个不允许NULL的唯一索引;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;还是没有的话，就采用InnoDB引擎内置的ROWID作为聚集索引;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们来看看InnoDB主键索引的示意图：&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;http://s9.51cto.com/wyfs02/M02/75/23/wKiom1YzI3bAn2R9AADQPbaF1Ac306.jpg-wh_651x-s_990285560.jpg&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;http://s9.51cto.com/wyfs02/M02/75/23/wKiom1YzI3bAn2R9AADQPbaF1Ac306.jpg-wh_651x-s_990285560.jpg&amp;quot; border=&amp;quot;0&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;图片来自高性能MySQL&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;可以看到，在这个索引结构的叶子节点中，节点key值是主键的值，而节点的value则存储其余列数据，以及额外的ROWID、rollback &amp;amp;nbsp;pointer、trx id等信息。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;结合这个图，以及上面所述，我们可以知道：在InnoDB表中，其聚集索引相当于整张表，而整张表也是聚集索引。主键必然是聚集索引，而聚集索引则未必是主键。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MyISAM是堆组织表，它没有聚集索引的概念。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://database.51cto.com/art/201510/495630.htm&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:08:07','http://database.51cto.com/art/201510/495630.htm','1',31,1,1,0,0,0,1),(116,' 用脚本把csv文件导入mysql','windows做的csv文件默认是gbk字符集，而mysql设置了默认是utf8字符集，所以要把文件转为utf8格式。','&amp;lt;p&amp;gt;1、windows做的csv文件默认是gbk字符集，而mysql设置了默认是utf8字符集，所以要把文件转为utf8格式。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;iconv -f GBK -t UTF8 /tmp/文件名.csv -o /tmp/文件名2.csv&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2、用sql命令导入&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;load data infile &amp;amp;#39;/tmp/mailut2.csv&amp;amp;#39; into table db1.d fields \nterminated by &amp;amp;nbsp;&amp;amp;#39;,&amp;amp;#39; lines terminated by &amp;amp;#39;\\n&amp;amp;#39; ignore 1 lines &amp;amp;nbsp;\n(id,email,passwords,name,address,dept,mobile);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;ignore 1 lines 是忽略第1行，第1行是标题行&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;(id,email,passwords,name,address,dept,mobile) &amp;amp;nbsp;这里是指按这个字段顺序导入，即csv文件的第一列导入到表中的id字段，第二列导入email字段......&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;如果csv文件后面还有列，则忽略。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://database.51cto.com/art/201510/495292.htm&amp;lt;/p&amp;gt;','2016-12-12 17:15:34','http://database.51cto.com/art/201510/495292.htm','1',31,1,1,0,0,0,1),(117,' MySQL 数据库优化全攻略','本文主要讲述的是实现MySQL数据库简单实用优化的具体方法，以及在实际操作中有哪些具体操作步骤是值得我们大家注意的。希望在你今后的学习中会有所帮助。','&amp;lt;p&amp;gt;以下的文章主要讲述的是实现MySQL数据库简单实用优化的具体方法，以及在实际操作中有哪些具体操作步骤是值得我们大家注意的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;以下的文章主要描述的是MySQL数据库简单实用优化的具体方法的实现，中包括如何定期的表进行分析与检查， 以及如何正确对表进行定期的优化，以下就是具体方案的描述，希望在你今后的学习中会有所帮助。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;1、定期分析表和检查表&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;分析表的语法如下：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;ANALYZE&amp;amp;nbsp;[LOCAL&amp;amp;nbsp;|&amp;amp;nbsp;NO_WRITE_TO_BINLOG]&amp;amp;nbsp;TABLE&amp;amp;nbsp;tb1_name[,&amp;amp;nbsp;tbl_name]...&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;以上语句用于分析和存储表的关键字分布，分析的结果将可以使得系统得到准确的统计信息，使得SQL能够生成正确的执行计划。如果用户感觉实际执行计划并不是预期的执行计划，执行一次分析表可能会解决问题。在分析期间，使用一个读取锁定对表进行锁定。这对于MyISAM，DBD和InnoDB表有作用。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;例如分析一个数据表&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;analyze&amp;amp;nbsp;table&amp;amp;nbsp;table_name&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;检查表的语法如下：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;CHECK&amp;amp;nbsp;TABLE&amp;amp;nbsp;tb1_name[,tbl_name]...[option]...option&amp;amp;nbsp;=&amp;amp;nbsp;{QUICK&amp;amp;nbsp;|&amp;amp;nbsp;FAST&amp;amp;nbsp;|&amp;amp;nbsp;MEDIUM&amp;amp;nbsp;|&amp;amp;nbsp;EXTENDED&amp;amp;nbsp;|&amp;amp;nbsp;CHANGED}&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;检查表的作用是检查一个或多个表是否有错误，CHECK TABLE 对MyISAM 和 InnoDB表有作用，对于MyISAM表，关键字统计数据被更新&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;CHECK TABLE 也可以检查视图是否有错误，比如在视图定义中被引用的表不存在。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;2. 定期优化表&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;优化表的语法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;复制代码 代码如下:&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;OPTIMIZE&amp;amp;nbsp;[LOCAL&amp;amp;nbsp;|&amp;amp;nbsp;NO_WRITE_TO_BINLOG]&amp;amp;nbsp;TABLE&amp;amp;nbsp;tb1_name&amp;amp;nbsp;[,tbl_name]...&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;如果删除了表的一大部分，或者如果已经对含有可变长度行的表(含有 \nVARCHAR、BLOB或TEXT列的表)进行更多更改，则应使用OPTIMIZE \nTABLE命令来进行表优化。这个命令可以将表中的空间碎片进行合并，并且可以消除由于删除或者更新造成的空间浪费，但OPTIMIZE TABLE \n命令只对MyISAM、 BDB 和InnoDB表起作用。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;例如： optimize table table_name&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注意： analyze、check、optimize执行期间将对表进行锁定，因此一定注意要在MySQL数据库不繁忙的时候执行相关的操作。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;常用的SQL优化&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们在开发的时候常常用到的SQL语句，无非是INSERT、GROUPBY等等。对于这些SQL语句，我们怎么进行优化？&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;1. 大批量插入数据&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;当用load命令导入数据的时候，适当的设置可以提高导入的速度。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;对于MyISAM存储引擎的表，可以通过如下方式快速的导入大量的数据&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;复制代码 代码如下:&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;tb1_name&amp;amp;nbsp;DISABLE&amp;amp;nbsp;KEYS;&amp;amp;nbsp;loading&amp;amp;nbsp;the&amp;amp;nbsp;data&amp;amp;nbsp;ALTER&amp;amp;nbsp;TABLE&amp;amp;nbsp;tb1_name&amp;amp;nbsp;ENABLE&amp;amp;nbsp;KEYS;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;DISABLE KEYS 和 ENABLE KEYS 用来打开或者关闭MyISAM表非唯一索引的更新。在导入大量的数据到一个非空的MyISAM表时，通过设置这两个命令，可以提高导入的效率。&amp;lt;br/&amp;gt;对于导入大量的数据到一个空的MyISAM表时，默认就是先导入数据然后才创建索引的，索引不用进行设置。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;load&amp;amp;nbsp;data&amp;amp;nbsp;infile&amp;amp;nbsp;&amp;amp;#39;/home/mysql/text_txt&amp;amp;#39;&amp;amp;nbsp;into&amp;amp;nbsp;table&amp;amp;nbsp;text&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;对于InnoDB类型的表，这种方式不能提高导入数据的效率，但也有几种针对InnoDB类型的表进行优化的方式。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1. 因为InnoDB类型的表式按照主键的顺序保存的，所以将导入的数据按照主键的顺序排序，可以有效提高导入数据的效率。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2. 在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3. 如果应用使用自动提交的方式，建议在导入前执行SET AUTOCOMMIT=0，关闭自动提交，导入结束后执行SET AUTOCOMMIT=1，打开自动提交，也可以提高导入效率。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;优化INSERT语句&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当进行数据INSERT的时候，可以考虑采用以下几种方式进行优化&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1. 如果同时从一个客户插入很多行，尽量使用多个值表的INSERT语句，这种方式将大大缩短客户端与MySQL数据库的链接、关闭等消耗，使得效率比分开执行的单个INSERT语句快.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;例如：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;insert&amp;amp;nbsp;into&amp;amp;nbsp;test&amp;amp;nbsp;values(1,2)&amp;amp;nbsp;insert&amp;amp;nbsp;into&amp;amp;nbsp;test&amp;amp;nbsp;values(3,4)&amp;amp;nbsp;insert&amp;amp;nbsp;into&amp;amp;nbsp;test&amp;amp;nbsp;values(5,6)&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;将上面三句改为:insert into test values(1,2),(3,4),(5,6)......&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2. 如果从不同客户插入很多行，能通过使用INSERT DELAYED 语句得到更高的速度。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;DELAYED 的含义是让INSERT 语句马上执行，其实数据都被放在内存的队列中，并没有真正写入磁盘，这比每条语句分别插入要快得多；LOW_PRIORITY刚好相反，在所有其他用户对表的读写完后才进行插入。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3. 将索引文件和数据文件分在不同的磁盘上存放&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;4. 如果进行批量插入，可以增加bulk_insert_buffer_size变量值的方法来提高速度，但是，这只能对于MyISAM表使用。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;5. 当从一个文本文件中装载一个表时，使用LOAD DATA INFILE。 这通常比使用很多insert语句快20倍左右。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;以上是mysql 性能优化的一些其它需要注意的地方，大家结合和，充分发挥mysql的性能。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://database.51cto.com/art/201503/467246.htm&amp;lt;/p&amp;gt;','2016-12-12 17:18:02','http://database.51cto.com/art/201503/467246.htm','1',31,1,1,0,0,0,1),(118,'防止人为误操作MySQL数据库技巧一例','在若干年前，老男孩亲自遇到一个“命案”，老大登录数据库update一个记录，结果忘了加where，于是悲剧发生了，这使得我对MySQL的增量恢复熟练度远超过其他的知识点，同时也很在意对内的数据库安全，并且每次讲课讲到此处，都会给学生讲这个领导的故事。\n','&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;1、mysql帮助说明&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;table cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr class=&amp;quot;firstRow&amp;quot;&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;as3 plain&amp;quot;&amp;gt;[oldboy_c64 ~]# mysql --help|grep dummy&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;as3 spaces&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;as3 plain&amp;quot;&amp;gt;-U, --i-am-a-dummy Synonym &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;as3 keyword&amp;quot;&amp;gt;for&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;as3 plain&amp;quot;&amp;gt;option --safe-updates, -U.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;as3 plain&amp;quot;&amp;gt;i-am-a-dummy&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; FALSE&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;在mysql命令加上选项-U后，当发出没有WHERE或LIMIT关键字的UPDATE或DELETE时，mysql程序就会拒绝执行&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;2、指定-U登录测试&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;table cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr class=&amp;quot;firstRow&amp;quot;&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;4&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;5&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;6&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;7&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;8&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;9&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;10&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;11&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;12&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;13&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;[oldboy_c64 ~]# mysql -uroot -poldboy123 -S /data/3306/mysql.sock -U&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Welcome to the MySQL monitor. Commands end with ; or \\g.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Your MySQL connection id is 14&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Server version: 5.5.32-&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp functions bold&amp;quot;&amp;gt;log&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;MySQL Community Server (GPL)&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Oracle is a registered trademark of Oracle Corporation and/or its&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;affiliates. Other names may be trademarks of their respective&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;owners.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Type &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp string&amp;quot;&amp;gt;&amp;amp;#39;help;&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;or &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp string&amp;quot;&amp;gt;&amp;amp;#39;\\h&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp keyword bold&amp;quot;&amp;gt;for&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;help. Type &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp string&amp;quot;&amp;gt;&amp;amp;#39;\\c&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;to clear the current input statement.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;mysql&amp;amp;gt; &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp keyword bold&amp;quot;&amp;gt;delete&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;from oldboy.student; &amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;ERROR 1175 (HY000): You are &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;cpp keyword bold&amp;quot;&amp;gt;using&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;safe update mode and you tried to update a table without a WHERE that uses a KEY column&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;mysql&amp;amp;gt; quit&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;cpp plain&amp;quot;&amp;gt;Bye&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;提示：不加条件无法删除，目的达到。&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;3、做成别名防止老大和DBA误操作&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;table cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr class=&amp;quot;firstRow&amp;quot;&amp;gt;&amp;lt;td class=&amp;quot;gutter&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;4&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;5&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;6&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;7&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;8&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;9&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;10&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;11&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;12&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;13&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number14 index13 alt1&amp;quot;&amp;gt;14&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number15 index14 alt2&amp;quot;&amp;gt;15&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number16 index15 alt1&amp;quot;&amp;gt;16&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;code&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;line number1 index0 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;[oldboy_c64 ~]&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash comments&amp;quot;&amp;gt;# alias mysql=&amp;amp;#39;mysql -U&amp;amp;#39;&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number2 index1 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;[oldboy_c64 ~]&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash comments&amp;quot;&amp;gt;# mysql -uroot -poldboy123 -S /data/3306/mysql.sock&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number3 index2 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Welcome to the MySQL monitor. Commands end with ; or \\g.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number4 index3 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Your MySQL connection &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash functions&amp;quot;&amp;gt;id&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;is 15&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number5 index4 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Server version: 5.5.32-log MySQL Community Server (GPL)&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number6 index5 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Type &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash string&amp;quot;&amp;gt;&amp;amp;#39;help;&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;or &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash string&amp;quot;&amp;gt;&amp;amp;#39;\\h&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash keyword&amp;quot;&amp;gt;for&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;help. Type &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash string&amp;quot;&amp;gt;&amp;amp;#39;\\c&amp;amp;#39;&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;to &amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash functions&amp;quot;&amp;gt;clear&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;the current input statement.&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number7 index6 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;mysql&amp;amp;gt; delete from oldboy.student; &amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number8 index7 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;ERROR 1175 (HY000): You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number9 index8 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;mysql&amp;amp;gt; delete from oldboy.student where Sno=5;&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number10 index9 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Query OK, 1 row affected (0.02 sec)&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number11 index10 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;mysql&amp;amp;gt; quit&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number12 index11 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;Bye&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number13 index12 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;[oldboy_c64 ~]&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash comments&amp;quot;&amp;gt;# echo &amp;amp;quot;alias mysql=&amp;amp;#39;mysql -U&amp;amp;#39;&amp;amp;quot; &amp;amp;gt;&amp;amp;gt;/etc/profile&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number14 index13 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;[oldboy_c64 ~]&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash comments&amp;quot;&amp;gt;# . /etc/profile&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number15 index14 alt2&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;[oldboy_c64 ~]&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash comments&amp;quot;&amp;gt;# tail -1 /etc/profile&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;line number16 index15 alt1&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;bash functions&amp;quot;&amp;gt;alias&amp;lt;/code&amp;gt; &amp;lt;code class=&amp;quot;bash plain&amp;quot;&amp;gt;mysql=&amp;lt;/code&amp;gt;&amp;lt;code class=&amp;quot;bash string&amp;quot;&amp;gt;&amp;amp;#39;mysql -U&amp;amp;#39;&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;结论：&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;span style=&amp;quot;color:#000000;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;在mysql命令加上选项-U后，当发出没有WHERE或LIMIT关键字的UPDATE或DELETE时，mysql程序拒绝执行&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：http://oldboy.blog.51cto.com/2561410/1321061&amp;lt;/p&amp;gt;','2016-12-12 17:21:50','http://oldboy.blog.51cto.com/2561410/1321061',NULL,31,1,1,0,0,0,1),(119,'MySQL批量SQL插入性能优化','对于一些数据量较大的系统，数据库面临的问题除了查询效率低下，还有就是数据入库时间长。特别像报表系统，每天花费在数据导入上的时间可能会长达几个小时或十几个小时之久。因此，优化数据库插入性能是很有意义的。','&amp;lt;p&amp;gt;经过对MySQL innodb的一些性能测试，发现一些可以提高insert效率的方法，供大家参考参考。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1. 一条SQL语句插入多条数据。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;常用的插入语句如：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_0&amp;amp;#39;,&amp;amp;nbsp;0);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_1&amp;amp;#39;,&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;修改成：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_0&amp;amp;#39;,&amp;amp;nbsp;0),&amp;amp;nbsp;(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_1&amp;amp;#39;,&amp;amp;nbsp;1);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因是合并后日志量（MySQL的binlog和innodb的事务让\n 日志）减少了，降低日志刷盘的数据量和频率，从而提高效率。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的IO。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这里提供一些测试对比数据，分别是进行单条数据的导入与转化成一条SQL语句进行导入，分别测试1百、1千、1万条数据记录。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a title=&amp;quot;MySQL批量SQL插入性能优化&amp;quot; rel=&amp;quot;lightbox[48417]&amp;quot; href=&amp;quot;http://s3.51cto.com/wyfs01/M00/2C/4B/wKioOVI-VlWi-JzaAAAtsOthv_8566.jpg&amp;quot; class=&amp;quot;cboxElement&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;fit-image&amp;quot; src=&amp;quot;http://s3.51cto.com/wyfs01/M00/2C/4B/wKioOVI-VlWi-JzaAAAtsOthv_8566.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;295&amp;quot; height=&amp;quot;109&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2. 在事务中进行插入处理。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;把插入修改成：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;START&amp;amp;nbsp;TRANSACTION;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_0&amp;amp;#39;,&amp;amp;nbsp;0);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_1&amp;amp;#39;,&amp;amp;nbsp;1);&amp;amp;nbsp;...&amp;amp;nbsp;COMMIT;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，MySQL内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，所有插入都在执行后才进行提交操作。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这里也提供了测试对比，分别是不使用事务与使用事务在记录数为1百、1千、1万的情况。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a title=&amp;quot;MySQL批量SQL插入性能优化&amp;quot; rel=&amp;quot;lightbox[48417]&amp;quot; href=&amp;quot;http://s8.51cto.com/wyfs01/M01/2C/4B/wKioOVI-VlWRQHERAAAuZ06k-bc546.jpg&amp;quot; class=&amp;quot;cboxElement&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;fit-image&amp;quot; src=&amp;quot;http://s8.51cto.com/wyfs01/M01/2C/4B/wKioOVI-VlWRQHERAAAuZ06k-bc546.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;295&amp;quot; height=&amp;quot;109&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3. 数据有序插入。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;数据有序的插入是指插入记录在主键上是有序排列，例如datetime是记录的主键：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_1&amp;amp;#39;,&amp;amp;nbsp;1);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_0&amp;amp;#39;,&amp;amp;nbsp;0);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;2&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_2&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_2&amp;amp;#39;,2);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;修改成：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_0&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_0&amp;amp;#39;,&amp;amp;nbsp;0);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_1&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_1&amp;amp;#39;,&amp;amp;nbsp;1);&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;`insert_table`&amp;amp;nbsp;(`datetime`,&amp;amp;nbsp;`uid`,&amp;amp;nbsp;`content`,&amp;amp;nbsp;`type`)&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;2&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;userid_2&amp;amp;#39;,&amp;amp;nbsp;&amp;amp;#39;content_2&amp;amp;#39;,2);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;由于数据库插入时，需要维护索引数据，无序的记录会增大维护索引的成本。我们可以参照innodb使用的B+tree索引，如果每次插入记录都在索\n \n引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要B+tree进行分裂合并等处理，会消耗比较多计算资源，并且插入\n 记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;下面提供随机数据与顺序数据的性能对比，分别是记录为1百、1千、1万、10万、100万。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a title=&amp;quot;MySQL批量SQL插入性能优化&amp;quot; rel=&amp;quot;lightbox[48417]&amp;quot; href=&amp;quot;http://s6.51cto.com/wyfs01/M01/2C/4A/wKioJlI-VlWBA6cvAABH0QHskXA030.jpg&amp;quot; class=&amp;quot;cboxElement&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;fit-image&amp;quot; src=&amp;quot;http://s6.51cto.com/wyfs01/M01/2C/4A/wKioJlI-VlWBA6cvAABH0QHskXA030.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;362&amp;quot; height=&amp;quot;152&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;从测试结果来看，该优化方法的性能有所提高，但是提高并不是很明显。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;性能综合测试：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这里提供了同时使用上面三种方法进行INSERT效率优化的测试。&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;a title=&amp;quot;MySQL批量SQL插入性能优化&amp;quot; rel=&amp;quot;lightbox[48417]&amp;quot; href=&amp;quot;http://s6.51cto.com/wyfs01/M01/2C/4A/wKioJlI-VlWAuBWAAAB4F4n0yRk294.jpg&amp;quot; class=&amp;quot;cboxElement&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;fit-image&amp;quot; src=&amp;quot;http://s6.51cto.com/wyfs01/M01/2C/4A/wKioJlI-VlWAuBWAAAB4F4n0yRk294.jpg&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;498&amp;quot; height=&amp;quot;196&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;从测试结果可以看到，合并数据+事务的方法在较小数据量时，性能提高是很明显的，数据量较大时（1千万以上），性能会急剧下降，这是由于此时数据量\n \n超过了innodb_buffer的容量，每次定位索引涉及较多的磁盘读写操作，性能下降较快。而使用合并数据+事务+有序数据的方式在数据量达到千万级\n 以上表现依旧是良好，在数据量较大时，有序数据索引定位较为方便，不需要频繁对磁盘进行读写操作，所以可以维持较高的性能。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注意事项：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1. SQL语句是有长度限制，在进行数据合并在同一SQL中务必不能超过SQL长度限制，通过max_allowed_packet配置可以修改，默认是1M，测试时修改为8M。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2. 事务需要控制大小，事务太大可能会影响执行的效率。MySQL有innodb_log_buffer_size配置项，超过这个值会把innodb的数据刷到磁盘中，这时，效率会有所下降。所以比较好的做法是，在数据达到这个这个值前进行事务提交。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;a href=&amp;quot;http://tech.uc.cn/?p=634&amp;quot;&amp;gt;http://tech.uc.cn/?p=634&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;br/&amp;gt;','2016-12-12 17:24:15','http://tech.uc.cn/?p=634','1',31,1,1,0,0,0,1),(120,' SQL注入攻击','一个客户对我们请求说，请我们来检查一下他的内部网络，这个网络被公司的职员以及客户们来使用。这是一个较大的安全评估的一部分，而且，虽然我们以前从没 有真正的使用过SQL注入来破解一个网络，但是我们对于其一般的概念相当的熟悉。在此次“战斗”中，我们是完全成功的，而且想要通过把这个过程的每一个步 骤重新记录下来，并作为一个生动的例子。','&amp;lt;p&amp;gt;一个客户对我们请求说，请我们来检查一下他的内部网络，这个网络被公司的职员以及客户们来使用。这是一个较大的安全评估的一部分，而且，虽然我们以前从没\n \n有真正的使用过SQL注入来破解一个网络，但是我们对于其一般的概念相当的熟悉。在此次“战斗”中，我们是完全成功的，而且想要通过把这个过程的每一个步骤重新记录下来，并作为一个“生动的例子”。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;“SQL注入”是特定的一种未被确认或未明确身份的用户输入漏洞的一个子集（“缓冲溢出”是一个不同的子集），而这个想法的目标是，让应用程序确信从而去\n \n运行SQL代码，而这些代码并不在其目的之内。如果一个应用程序是在本地通过即时的方式来创建一个SQL字符串，结果很直接，会造成一些真正的出人意料的结果。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们要明确说明的是，这是一个有些曲折的过程，并且其中会有多次的错误的转折，而其余的更有经验的人当然会有着不同的－甚至更好的－方法。而事实上，我们成功的实现了建议，并没有被完全的误导。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;还有一些不同的论文讨论SQL注入问题，包括一些更加详细的文章，不过此文所展示的，与破解的过程同样份量的是发现了SQL注入的原因。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;目标内网&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这显然是一个完全自主开发的应用程序，而我们对于它没有预先的了解，或者访问源代码的权限：这已是一个“blind”攻击。若干次侦测之后，我们了解到服\n \n务器运行的是微软的IIS6，并使用ASP.NET框架，从这其中得到的，似乎可以假定数据库是微软的SQL服务器：我们相信这些技术可以应用于几乎任何\n 一种web应用，而此应用可能为任何一种SQL服务器所支持。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;登陆页面是一个传统的用户名－密码表单，带有一个用电子邮件给我传送密码的链接；而后者被证实是整个系统的败笔。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当输入一个电子邮件地址的时候，系统会假定次邮件存在的方式，再用户数据库里面寻找这个电子邮件地址，并且会邮寄一些内容到这个地址。由于我的电子邮件地址没有被找到，所以它不会给我发送任何内容。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;所以，第一个测试，对于任何SQL化的表单而言，是输入一个带有单引号构成的数据：这样做的目标是查看是否他们在构建SQL字符串的时候根本没有使用数据\n \n的清理机制。当为此表单提交了一个有单引号的电子邮件之后，我们得到了一个500错误（服务器失败），这就是说，这个“被破坏了的”的输入实际上被真实的\n 分析过。中！&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们猜测底层的SQL代码可能类似于如此：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;field&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;$EMAIL&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;这里，$EMAIL是由用户通过表单提交的电子邮件地址，而这段较长的查询提供的应用符号，是为了使得这个$EMAIL成为一个真正的字符串。我们不知道\n 这个数据域的确切的名字或者是于此相关的数据表的名字，但是我们却了解他们的特性，而此后我们将会得到一些很好的猜测结果。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当我们输入steve@unixwiz.net&amp;amp;#39; － 留意那个结尾的引号 － 这将产生出一个如下构建的SQL：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;field&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;steve@unixwiz.net&amp;amp;#39;&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;当这个SQL被执行的时候，SQL分析器发现了多余的引号，从而中止了工作，并给出一个语法错误。而这个错误如何表述给用户，取决于应用程序内部错误修复\n \n的过程，但是这通常不同于“电子邮件地址不存在”的错误提示。这个错误的响应是致命的第一通道，既用户的输入没有被正确的清理，而因此应用程序成为了破解\n 的美食。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;line-height:16.799999237060547px;&amp;quot;&amp;gt;由于我们输入的数据显然位于WHERE子语句中，让我们用合法的SQL方式改变一下这个子句的本貌并看看会发生什么。通过输入任何一种‘OR ’x‘＝x语句，结果SQL成为：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;field&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;anything&amp;amp;#39;&amp;amp;nbsp;OR&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;=&amp;amp;#39;x&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;因为应用程序没有真正的对这样的查询有所考虑，而仅仅是构建一个字符串，以致于我们使用的引号使得一个单元素的WHERE子句，变成了一个双元素的子句，\n 而且’x&amp;amp;#39;＝x字句是确定为真的，无论第一个字句是什么。（有一种更好的方式来确保“始终为真”，这部分我们后面会谈及）&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;不过与“真实”的查询不同，本应当一次返回一个单独的项，这个版本必然会返回成员数据库里面的每一个项。唯一的可以发现应用程序在这种情况下会做什么的方式，就是尝试。不断尝试，我们留意到以下结果：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;你的登录信息已经发送到 random.person@example.com.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们一般都会把查询返回的第一行作为作为猜测的主要入口。这哥们确实从E-mail里拿回了他的密码，同样这个邮件可能会让他感到吃惊并且会引起怀疑。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;现在我们知道怎么在本地玩这条查询了，虽然目前我们还不知道我们看不到的那部分SQL结构是怎么拼起来的。但是我们通过逆向工程看到了三个不同的查询结果：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;您的登陆信息已经以Email形式发送给您&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;我们无法识别您的Email地址&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;服务端错误&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;头两个响应是有效的查询的结果，最后一个是无效SQL造成的。 类似这样的响应结果会帮助我们更好的逆推服务端用来查询的SQL语句结构。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;预设字段映射&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们要干的第一步就是猜字段名，首先我们合理的推测查询带了“email address” 和 &amp;amp;nbsp;\n“password”，所以可能的字段名选择会有“US Mail Address”&amp;amp;nbsp; 或者 “userid” 亦或者“phone number”&amp;amp;nbsp;\n &amp;amp;nbsp;。当然最好能执行 show table，但是我们又不知道表名，貌似目前没什么明显的方法能让我们拿到表名。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;那就分步走吧。在每个例子里，我们会用我们已知的SQL加上我们自己的特殊“段”。我们已知的这条SQL的结尾是个Email地址的比对，那就猜下email是这个字段名吧&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;field&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;email&amp;amp;nbsp;IS&amp;amp;nbsp;NULL;&amp;amp;nbsp;--&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;如果服务器响应是报错，那基本上可以说明我们的SQL拼错了。但是如果我们得到任何正常的返回，例如“未知的邮件地址” 或 “密码已发送”&amp;amp;nbsp; ，说明我们的字段名蒙对了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;要注意的是，我们的“And” 关键字而没用“OR” &amp;amp;nbsp;\n关键字，这么做是有目地滴。在上一步中，我们不关心到底是哪一个Email，而且我们不想因为蒙中某人的Email然后给他发了重置密码的邮件。这么搞那\n 哥们儿一定会怀疑有人对他的帐号搞三搞四。所以用“And”关键字拼上一个不合法的Email地址，这样服务端总是返回空结果集，也就不会给任何人发邮\n 件。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;提交上面的SQL代码段确实返回了“未知的邮件地址” &amp;amp;nbsp;\n这么一个响应。现在我们确认了email地址的字段名是email。如果不是这么个响应，那我就再蒙“email_adress”或者“mail”亦或者\n 其他类似的。这个环节总是靠蒙的，但是蒙也得讲技巧和方法方式。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这段SQL的用意是我们假设预设的SQL查询中的字段名是 email &amp;amp;nbsp;\n，跑一下看看是不是有效。我不会管你到底有没有匹配的Email，所以用了个伪名“x” ， “－－” &amp;amp;nbsp;\n这个标示是表示SQL的起始。这样SQL解析到这就会把它直接当成一条命令，而“－－”后面的会是一个新的命令，这样就屏蔽掉了后面的那些不知道的玩意 \n儿。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;下一步，我们来猜下其他比较明显的字段名: &amp;amp;quot;password&amp;amp;quot;,&amp;amp;quot;userid&amp;amp;quot;,&amp;amp;quot;name&amp;amp;quot; 和类似的。每次我们只蒙一个名字，当返回结果不是“服务端错误” ， 那就说明我们蒙对了。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;userid&amp;amp;nbsp;IS&amp;amp;nbsp;NULL;&amp;amp;nbsp;--&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;通过这一步，我们蒙出来了下面几个字段名：&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;email&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;passwd&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;login_id&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;full_name&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;肯定还有更多其他的（把HTML页面表单的 &amp;amp;lt;Input&amp;amp;nbsp;&amp;amp;nbsp; name=&amp;amp;quot;XXXXX&amp;amp;quot;&amp;amp;gt; 拿来做参考是个非常不错的选择）后来我又挖了一下但是没挖出来更多的字段名。 到目前为止，我们还是不知道这些字段所属的表的表名--咋个弄呢？&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;搜寻表名&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;应用内建的query已经把表名放在语句中，但我们不知道表的名字。有几种方法可以找到这些插入在语句中表名（以及其他的表名）。我们用的是一种依赖于subselect的方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;下面这个单独的query&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;COUNT(*)&amp;amp;nbsp;FROM&amp;amp;nbsp;&amp;amp;lt;i&amp;amp;gt;tabname&amp;amp;lt;/i&amp;amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;返回表中记录的数量，当然，若表名是无效的，则查询失败。我们可以把这个查询放入我们的查询语句中来探查表名。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;&amp;amp;lt;i&amp;amp;gt;table&amp;amp;lt;/i&amp;amp;gt;&amp;amp;nbsp;WHERE&amp;amp;nbsp;&amp;amp;lt;b&amp;amp;gt;email&amp;amp;lt;/b&amp;amp;gt;&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;&amp;amp;lt;span&amp;amp;gt;x&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;1=(SELECT&amp;amp;nbsp;COUNT(*)&amp;amp;nbsp;FROM&amp;amp;nbsp;&amp;amp;lt;i&amp;amp;gt;tabname&amp;amp;lt;/i&amp;amp;gt;);&amp;amp;nbsp;--&amp;amp;#39;&amp;amp;lt;/span&amp;amp;gt;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;我们实际上并不关心表中有多少记录，我们关心的是表名是否有效。通过试探不同的猜测，我们最终确定members是数据库中的有效表名。但是，这是这个查\n 询中所用的表名吗？为此，我们需要另一个使用table.field的查询：这只在表名的确是查询中的表名时才工作，而不仅仅当表存在时工作。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;&amp;amp;lt;span&amp;amp;gt;x&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;members.email&amp;amp;nbsp;IS&amp;amp;nbsp;NULL;&amp;amp;nbsp;--&amp;amp;lt;/span&amp;amp;gt;&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;当这个语句返回 &amp;amp;quot;Email unknown&amp;amp;quot;时，可以确认我们的SQL正确执行了，并且我们成功的猜出了表名。这对后面的工作很重要，但我们先临时使用一下另一种方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;弄几个帐号先&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;目前我们搞到了members表结构的部分信息，但是我们只知道一个用户名，就是之前我们蒙中的那个发了邮件通知的那个用户名。当时我们只得到了邮件地址，但是拿不到邮件内容。所以我们得再弄几个有效得用户名，高端洋气上档次的最好。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们的从公司的网站开始人肉，找到那些人物介绍的页面，一般都是介绍公司内部人员的。这些介绍里大多都有这些人的Email地址和名字。就算没有这些信息也没啥，咱兜里还有货。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;思路是这样的，提交一个带有“Like” \n关键字的SQL，这样我们可以对Email地址或者用户名做些模糊匹配，每次提交如果返回“我们已发送您的密码至邮箱”那也就是说我们的模糊查询有效了，而且邮件也真的发了！！！。这么干虽然我们能拿到邮件地址，也意味着对方会收到邮件并引起警觉，所以&amp;amp;nbsp;\n 慎用！！&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们能做email、full_name（或者其他字段）的查询，每次放入%这个通配符执行如下的查询：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;&amp;amp;nbsp;OR&amp;amp;nbsp;full_name&amp;amp;nbsp;LIKE&amp;amp;nbsp;&amp;amp;#39;%Bob%&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;暴力破解密码&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们肯定可以在登陆页面尝试暴力破解密码，但是大多的应用都做了相应的防护手段。可能的防护会有操作日志，帐号锁定或者其他能大大降低我们效率的手段或设备，但是因为输入没有被过滤所以给我们绕过这些防护多了一些可能。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们将把密码和邮件名称的代码段加到我们已知的SQL里。在这个例子里我们会用一个倒霉催的哥们的邮箱，bob@example.com 然后试试我们准备的一些密码。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;bob@example.com&amp;amp;#39;&amp;amp;nbsp;AND&amp;amp;nbsp;passwd&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;hello123&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;这条SQL是完整有效的，所以服务器铁定不能够报错，所以我们知道当服务器响应是“您的密码已经发送至您的邮箱” 这么个结果是我们就知道刚提交的那个密码就是我们要的密码。虽然倒霉催的Bob也收到了邮件并且一定会警觉，但是我们在他警觉之前就干完我们想干的了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这个过程可以在Perl下用脚本自动化完成，所以我们就去搞了搞Perl的脚本，结果写脚本的时候发现了另外一种方法来干这事。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;数据库不是只读的&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;迄今为止，我们对数据库除了进行&amp;lt;strong&amp;gt;查询&amp;lt;/strong&amp;gt;外，没做其他事。尽管&amp;lt;strong&amp;gt;SELECT&amp;lt;/strong&amp;gt;是只读的，但不意味&amp;lt;strong&amp;gt;SQL&amp;lt;/strong&amp;gt;就只能这样。SQL使用分号来中断一个语句, 如果对输入没有做正确的处理, 它就不能阻止我们在查询语句后面添加不相关的字符串。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;最恰当的一个例子就是这样：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;;&amp;amp;nbsp;DROP&amp;amp;nbsp;TABLE&amp;amp;nbsp;members;&amp;amp;nbsp;--&amp;amp;#39;;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;Boom!&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;第一部分提供了一个假的邮件地址 -- &amp;lt;strong&amp;gt;&amp;amp;#39;x&amp;amp;#39;&amp;lt;/strong&amp;gt; -- 我们并不关系这个查询的返回，我们仅仅是给出了一个我们能够使用无关SQL指令的方式，一个尝试删除整个&amp;lt;strong&amp;gt;members&amp;lt;/strong&amp;gt;表而真的是无任何关系的操作.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这表明我们不仅仅可以切分SQL指令，我们还可以修改数据库，这完全是被允许的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;加入一个新成员&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;由上所得，我们获知了members表的部分的结构，尝试添加一个新的记录到这个表里面似乎是一个可拊掌称庆的方法：如果这能成功，我们就能够通过我们新插入的帐户来直接登陆了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这里，毫不惊奇的是，这只需要稍微加些SQL，我们把它放在不同的行从而让我们的展示更易理解，不过从头到尾这一部分其实仍然是一个字符串：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;;&amp;amp;nbsp;INSERT&amp;amp;nbsp;INTO&amp;amp;nbsp;members&amp;amp;nbsp;(&amp;amp;#39;email&amp;amp;#39;,&amp;amp;#39;passwd&amp;amp;#39;,&amp;amp;#39;login_id&amp;amp;#39;,&amp;amp;#39;full_name&amp;amp;#39;)&amp;amp;nbsp;&amp;amp;nbsp;VALUES&amp;amp;nbsp;(&amp;amp;#39;steve@unixwiz.net&amp;amp;#39;,&amp;amp;#39;hello&amp;amp;#39;,&amp;amp;#39;steve&amp;amp;#39;,&amp;amp;#39;Steve&amp;amp;nbsp;Friedl&amp;amp;#39;);--&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;即便是我们真的确定了表的名字以及使用的字段都是正确的，在成功的实施攻击之前，仍然有一些障碍：&amp;lt;/p&amp;gt;&amp;lt;ol class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;可能，在表单上，我们并没有足够的空间来直接输入这些文本（尽管，可以使用脚本来解决这个问题，而这并不是很简便的事情）&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;web应用程序的用户可能并没有在members表上的插入权限。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;毫无疑问，members表里面有一些别的字段，有一些可能需要初始化的数据，而这可能导致插入失败。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;即便是可以达到插入一个新的记录，应用程序可能会出现不当的行为，因为自动插入的时候有一些字段使用的是NULL。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;一个有效的“成员”可能不仅仅需要在members表里面的一个记录，而是和别的表有着数据上的关联，（如，“访问权限”），所以添加一个数据到一个表中，可能并不充分有效。&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;对于手头的案例而言，我们遇到了＃4或者是＃5上面的障碍 － 我们无法真正确定是哪一个 － &amp;amp;nbsp; \n因为在主登陆界面上，输入上面的用户名＋密码的时候，返回了一个服务器上的错误。这就是说，那些我们没有用到的字段可能是必要的字段，而尽管如此，它们仍\n 然没有被正确的处理。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这里，一个可行的方法，就是猜测别的字段，但是这可以保证是一个长时间而且耗费劳力的过程：虽然你可能可以猜测出来那些“显而易见”的字段，但是却很难构建出整个应用程序的组织图像。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;所以，最后我们选择走另一条不同的路。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;邮给我一个密码&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们意识到虽然不能添加一条新的记录在&amp;lt;strong&amp;gt;members&amp;lt;/strong&amp;gt;表中，但我们可以通过&amp;lt;strong&amp;gt;修改&amp;lt;/strong&amp;gt;一个存在的记录, 这也获得了我们的证明是可行的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;从先前的步骤中，我们知道&amp;lt;strong&amp;gt;bob@example.com&amp;lt;/strong&amp;gt;在系统中有一个帐号，我们使用SQL注入更新了他的数据库记录为&amp;lt;strong&amp;gt;我们&amp;lt;/strong&amp;gt;的邮件地址：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;passwd,&amp;amp;nbsp;login_id,&amp;amp;nbsp;full_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;x&amp;amp;#39;;&amp;amp;nbsp;UPDATE&amp;amp;nbsp;members&amp;amp;nbsp;SET&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;steve@unixwiz.net&amp;amp;#39;&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;bob@example.com&amp;amp;#39;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;运行这个之后，我们当然会收到&amp;amp;quot;we didn&amp;amp;#39;t know your email address&amp;amp;quot;消息，但这是预期的提供了不正确的邮件地址。&amp;lt;strong&amp;gt;UPDATE&amp;lt;/strong&amp;gt;操作并不会向应用程序通知, 因此他被悄然执行了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们可以用更新后的邮件地址，使用常规的&amp;amp;quot;I lost my password&amp;amp;quot;链接 - 一分钟后就会受到这样的邮件：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;From:&amp;amp;nbsp;system@example.com&amp;amp;nbsp;To:&amp;amp;nbsp;steve@unixwiz.net&amp;amp;nbsp;Subject:&amp;amp;nbsp;Intranet&amp;amp;nbsp;login&amp;amp;nbsp;&amp;amp;nbsp;This&amp;amp;nbsp;email&amp;amp;nbsp;is&amp;amp;nbsp;in&amp;amp;nbsp;response&amp;amp;nbsp;to&amp;amp;nbsp;your&amp;amp;nbsp;request&amp;amp;nbsp;for&amp;amp;nbsp;your&amp;amp;nbsp;Intranet&amp;amp;nbsp;log&amp;amp;nbsp;in&amp;amp;nbsp;information.&amp;amp;nbsp;Your&amp;amp;nbsp;User&amp;amp;nbsp;ID&amp;amp;nbsp;is:&amp;amp;nbsp;bob&amp;amp;nbsp;Your&amp;amp;nbsp;password&amp;amp;nbsp;is:&amp;amp;nbsp;hello&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;现在，就可以使用标准的登录流程进入系统，作为一个高等级的职员。这是一个高权限用户，远远高于我们&amp;lt;strong&amp;gt;INSERT&amp;lt;/strong&amp;gt;创建的受限用户。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们发现这个内网站点的信息比较全，甚至还有一个全用户列表。所以我们可以合理的推测很多内网站点会有公司Windows网络帐号，并且用的是同样的密\n 码。目前我们很明显可以拿到内网的用户密码，而且我们在公司防火墙找到了一个开放的PPTP模式的的VPN端口让我们很方便的做些登陆尝试。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们手动抽查了一些帐号，没成功。而且不知道到底服务端是因为“错误的密码”还是“内网帐号和Windows帐号不同”而拒绝登陆的。反正就是个没干成。不过我嚼得自动化的工具应该能让这步简单点。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;其他一些方法&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在这次渗透中，我们觉得其实已经挖的足够深了，不过还可以用其他的方法。我们就先看看我们现在想到一些普适性不是很高的方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们同时也注意到了不是所有的方法都是数据库无关的，有些方法得依赖特定的数据库。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;调用XP_CMDSHELL &amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Microsoft的SQL Server 有一个存储过程 “XP_CMDSHELL” &amp;amp;nbsp;\n允许执行任意的操作系统命令，如果这项功授权给Web用户调用的话，那基本上网站肯定会遭黑。我们现在干的都被限制在了Web应用和数据库这个环境下，一\n 旦能执行操作系统命令，防御再好的应用服务器也没辙了。调用这个存储过程的权限一般会赋给管理员帐号，但是还是存在授权给低级别用户的可能。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;数据库结构深度挖掘&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这个应用登陆后能干的事太多了，在我看来实在没啥必要再去挖了。不过在其他一些特殊的环境下我们的这些方法也许不够用。如果能深度挖掘数据库的结构，我们\n \n会发现更多的方法来黑掉站点。你可以试着看看其他的提交切入点（例如“留言板”，“帮助论坛”等等）。不过这都是对应用环境的强依赖而且还得靠有一定技术\n 含量的瞎蒙。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;减轻危害&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我们相信web应用的开发者，通常不会去想那些“令人意外的输入”，但是安全人员会（包括那些“坏人”），所以这里有三个宽泛的方法，可以用来除害。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;过滤输入，这是绝对重要的事情，过滤用户的输入，从而确保他们的输入没有包含具有威胁的代码，无论是对于SQL服务器，或则是HTML本身都要考虑。某人\n \n最初的想法来剥掉“恶意代码”，例如引号，分号或者是转义符号，其实这种尝试是被误导了的。尽管找出来些具有威胁的字符很容易，但是很难把他们全部找到。\n \nweb的语言种到处都是特定的字符以及奇特的组合（包括那些用来表达同一些字符的另类模式），而努力去鉴定那些没有被授权的“恶意代码”很可能不会成功。\n 换而言之，与其“除去那些已知的恶数据”，倒不如“去掉所有良好数据之外所有的内容”：这其中的分别是至关重要。如前 － 我们的例子中 － &amp;amp;nbsp;\n一个电子邮件地址仅能包括以下字符：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;abcdefghijklmnopqrstuvwxyz&amp;amp;nbsp;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;amp;nbsp;0123456789&amp;amp;nbsp;@.-_+&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;用没有意义的文字是不益的，应该早点拒绝这么做，这可能会产生一些错误信息，这样不仅可以帮助我们抢先SQL注入，而且可以让我们及时发现拼写错误以至于不会让错误存入数据库。&amp;lt;/p&amp;gt;&amp;lt;table width=&amp;quot;95%&amp;quot; cellspacing=&amp;quot;0&amp;quot; cellpadding=&amp;quot;6&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr class=&amp;quot;firstRow&amp;quot;&amp;gt;&amp;lt;td style=&amp;quot;word-wrap: break-word&amp;quot; bgcolor=&amp;quot;#fdfddf&amp;quot;&amp;gt;&amp;amp;nbsp; 电子邮件的一些选项&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;p&amp;gt;我们应该要特别的注意邮件地址，它会给验证编程带来麻烦的，因为，每个人看起来对邮件地址的“有效性”都有自己的想法，不用一个好的邮箱地址是不光彩的，这样你将遇到你想不到的文字。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这方面的真正权威是RFC 2822(比大家耳熟能详RFC822内容还多)，里面包含了什么是允许的比较范的定义。如果邮箱地址接受&amp;amp;amp;和*(和其它普通字符比较)是不好的，但是其它的，包括这篇文章的作者，都会对“大多数”邮件地址满意。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;那些采用严格方法的人应该充分的认识到不包括这些邮件地址的后果，特别是认为现在有很好的技术能够解决那些“奇怪”的字符所带来的安全问题。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;请注意“过滤输入”并不意味着“移除引号”，因为即使一个“正规”的字符也会很麻烦，在这个例子中，一个整型数字ID值被拿来和用户的输入做比较（叫数字型PIN）：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;table&amp;amp;nbsp;WHERE&amp;amp;nbsp;id&amp;amp;nbsp;=&amp;amp;nbsp;23&amp;amp;nbsp;OR&amp;amp;nbsp;1=1;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;Boom!&amp;amp;nbsp;Always&amp;amp;nbsp;matches!&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;不过实际情况是我们很难把输入项完全过滤掉潜在危险字符。“日期项”，“邮件地址”，或者“整形” 用上面的办法过滤是可以的。但是在真实环境中我们，我们还得用到其他的方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;输入项编码/转义&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;虽然现在可以过滤邮件地址或者电话号码，但是貌似“Bill O&amp;lt;span style=&amp;quot;color:#E53333;&amp;quot;&amp;gt;‘&amp;lt;/span&amp;gt;Reilly” 这样的合法的名字你是很难处理的，因为“&amp;lt;span style=&amp;quot;background-color:#FFFFFF;color:#E53333;&amp;quot;&amp;gt; ’&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;color:#64451D;&amp;quot;&amp;gt; ” &amp;lt;/span&amp;gt;这个单引号是合法的输入。于是有人就想到在过滤到单引号的时候我再加一个单引号这样就没问题了，其实这么干得出大事。&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;customers&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;name&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;Bill&amp;amp;nbsp;O&amp;amp;#39;&amp;amp;#39;Reilly&amp;amp;#39;;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;目前这样是OK的&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;但是，这个方法很容易就被绕过去了。像MySQL允许 \\&amp;amp;#39; 这个输入，然后如果有人造一段SQL “ &amp;amp;nbsp;\\&amp;amp;#39;; DROP TABLE users;” ,你又给单引号加了个单引号，那就变成&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;fieldlist&amp;amp;nbsp;FROM&amp;amp;nbsp;customers&amp;amp;nbsp;&amp;amp;nbsp;WHERE&amp;amp;nbsp;name&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;#39;\\&amp;amp;#39;&amp;amp;#39;;&amp;amp;nbsp;DROP&amp;amp;nbsp;TABLE&amp;amp;nbsp;users;&amp;amp;nbsp;--&amp;amp;#39;;&amp;amp;nbsp;&amp;amp;nbsp;--&amp;amp;nbsp;删表了&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;amp;#39;&amp;lt;span style=&amp;quot;color:#E53333;&amp;quot;&amp;gt; \\&amp;amp;#39;&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;#39;就被新加的单引号分成一个字符串(按照前面的过滤方法这里判断有一个单引号，所以过滤后再单引号后面加一个单引号)，后面接的是常见的SQL恶意代码。\n \n其实不仅仅有反斜线的情况，还有Unicode编码和其他编码规则或者其他的过滤漏洞都会给程序员挖坑。俺们都知道，实现输入过滤的绝对安全是超级难滴，\n 这就是为啥很多数据库接口都提供了相关功能。当同样的内容被系统自带的字符串过滤或字符串编码处理后会好很多。例如调用MySQL的函数 &amp;amp;nbsp;\nmysql_real_escape_string() 或者 perl&amp;amp;nbsp; DBD 的$dbh-&amp;amp;gt;quote($value)方法. &amp;amp;nbsp;\n这些方法都必用的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;参数绑定（预编译语句）&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;虽然数据库自带的过滤是个不错的实现，但是我们还是处在“用户输入被当成 SQL语句的一部分 &amp;amp;nbsp;\n”这么个圈子里，其实要跳出这个圈子还有一个实现，就是参数绑定。基本上所有的主流数据库都提供这种接口。这种方法提前预编译了SQL语句的逻辑，然后对\n 参数预留了位置（就是“ ?1&amp;amp;nbsp; ?2” 这种的）。这样语句在执行的时候只是按照输入的参数表来执行。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Perl环境的例子：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;$sth&amp;amp;nbsp;=&amp;amp;nbsp;$dbh-&amp;amp;gt;prepare(&amp;amp;quot;SELECT&amp;amp;nbsp;email,&amp;amp;nbsp;userid&amp;amp;nbsp;FROM&amp;amp;nbsp;members&amp;amp;nbsp;WHERE&amp;amp;nbsp;email&amp;amp;nbsp;=&amp;amp;nbsp;?;&amp;amp;quot;);&amp;amp;nbsp;&amp;amp;nbsp;$sth-&amp;amp;gt;execute($email);&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;感谢Stefan Wagner帮我写了个java的实现&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;不安全版&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;Statement&amp;amp;nbsp;s&amp;amp;nbsp;=&amp;amp;nbsp;connection.createStatement();&amp;amp;nbsp;ResultSet&amp;amp;nbsp;rs&amp;amp;nbsp;=&amp;amp;nbsp;s.executeQuery(&amp;amp;quot;SELECT&amp;amp;nbsp;email&amp;amp;nbsp;FROM&amp;amp;nbsp;member&amp;amp;nbsp;WHERE&amp;amp;nbsp;name&amp;amp;nbsp;=&amp;amp;nbsp;&amp;amp;quot;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;+&amp;amp;nbsp;formField);&amp;amp;nbsp;//&amp;amp;nbsp;*boom*&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;安全版&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;PreparedStatement&amp;amp;nbsp;ps&amp;amp;nbsp;=&amp;amp;nbsp;connection.prepareStatement(&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;quot;SELECT&amp;amp;nbsp;email&amp;amp;nbsp;FROM&amp;amp;nbsp;member&amp;amp;nbsp;WHERE&amp;amp;nbsp;name&amp;amp;nbsp;=&amp;amp;nbsp;?&amp;amp;quot;);&amp;amp;nbsp;ps.setString(1,&amp;amp;nbsp;formField);&amp;amp;nbsp;ResultSet&amp;amp;nbsp;rs&amp;amp;nbsp;=&amp;amp;nbsp;ps.executeQuery();&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;这儿&amp;lt;strong&amp;gt;$email&amp;lt;/strong&amp;gt;是从用户表单中获取来的数据，并且是做为位置参数#1（即第一个问号）传递进来的，因此在任 \n何情况下，这个变量的内容都可以解析为SQL语句。引号、分号、反斜杠、SQL注释表示法-其中的任何一个都不会产生任何特殊的效果，这个因为它们“只是\n 数据”。这不会对其他东西造成破坏，因此这个应用很大程度上防止了SQL注入攻击。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;如果对这个查询进行多次重用（这个查询只解析一次）的话，还可以提高性能。然而与获得大量的安全方面的好处相比，这个是微不足道的。这还可能是我们保证互联网应用安全所采取的一个重要的措施。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;font-size:16px;&amp;quot;&amp;gt;限制数据库权限和隔离用户&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在目前这种情况下，我们观察到只有两个交互式动作不在登录用户的上下文环境中：“登录”和“给我发送密码”。web应用应该使用尽可能少权限的数据库连接：仅对members表具有查询权限，对其它表没有任何访问权限的数据库连接。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这样做的结果是：即便是“成功地”进行了SQL注入攻击，也只能取得非常有限的成功。这种情况下，我们不能做最终授权给我们的任何更新（&amp;lt;strong&amp;gt;UPDATE&amp;lt;/strong&amp;gt;）请求，因此为了能够实现更新(&amp;lt;strong&amp;gt;UPDATE&amp;lt;/strong&amp;gt;)请求，我们不得不寻求其他解决方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;一旦web应用确定了通过登录表单传递认证凭证是有效的话，那么它将把这个会话切换到一个具有更多权限的数据库连接上。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对任何web应用来说，从不使用sa权限几乎是理所当然的事情。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;强调一下，虽然俺们在这次演示中选择“忘记密码”这么个功能点，不是因为这个功能点本身不安全，而是普遍存在各站点的几个容易遭受攻击的功能点之一。如果你把关注点放在如何通过“忘记密码”来进行渗透的话，那你就跑偏了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这篇文章的本意不是全面覆盖SQL注入的精髓，甚至连教学都算不上。其实只是我们花了几个小时做的一单渗透测试的工作纪录。我们也见过其他的文章讲SQL注入的技术背景，但是都只是展示了渗透结束后的成果而没有细节。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;对数据库的访问采用存储过程&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;当一个数据库服务器支持存储过程时，请使用存储过程执行这个应用的访问行为，这样（在存储过程编写正确的情况下）就完全不需要SQL了。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;通过把诸如查询、更新、删除等某个动作的规则封装成一个单独的存储过程，你就可以根据这个单独的存储过程和所执行的商务规则额对其进行测试和归档。（例如，“增加新的订单”存储过程在客户超过了信用限制的情况下可能拒绝添加这个订单。）&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对简单的查询来说，这么做可能仅仅获得很少的好处，不过当这个操作变的越来越复杂（或者是在多个地方使用这个操作）的情况下，给这样操作一个单独的定义就意味着维护这个操作将更简单而且这个操作的功能会更强壮。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注意：总可以编写动态构建查询语句的存储过程：这么做并不会防止SQL注入－它只不过把准备/执行过程正确地结合在一起，或者只不过把SQL语句与提供保护的变量直接捆绑在一起。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;但是那些结果需要大量的背景知识才能看的懂的，而且我觉得渗透的细节也是很有价值的。我们正常情况下是拿不到源码的，所以渗透人员的逆向黑盒渗透的能力也是有价值的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;我要感谢David Litchfield 和 Randal Schwartz 对本篇文章的技术贡献，和Chris Mospaw 牛逼的排版设计。（© 2005 by Chris Mospaw, used with permission）&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;a href=&amp;quot;http://www.unixwiz.net/techtips/sql-injection.html&amp;quot;&amp;gt;http://www.unixwiz.net/techtips/sql-injection.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;译文链接：&amp;lt;a href=&amp;quot;http://www.oschina.net/translate/sql-injection-attacks&amp;quot;&amp;gt;http://www.oschina.net/translate/sql-injection-attacks&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:32:10','http://developer.51cto.com/art/201309/410956.htm',NULL,31,1,1,0,0,0,1),(121,'优化临时表使用，SQL语句性能提升100倍','线上mysql数据库爆出一个慢查询，DBA观察发现，查询时服务器IO飙升，IO占用率达到100%， 执行时间长达7s左右。','&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【问题现象】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;线上mysql数据库爆出一个慢查询，DBA观察发现，查询时服务器IO飙升，IO占用率达到100%， 执行时间长达7s左右。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;SQL语句如下：&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;SELECT&amp;amp;nbsp;DISTINCT&amp;amp;nbsp;g.*,&amp;amp;nbsp;cp.name&amp;amp;nbsp;AS&amp;amp;nbsp;cp_name,&amp;amp;nbsp;c.name&amp;amp;nbsp;AS&amp;amp;nbsp;category_name,&amp;amp;nbsp;t.name&amp;amp;nbsp;AS&amp;amp;nbsp;type_name&amp;amp;nbsp;FROM&amp;amp;nbsp;gm_game&amp;amp;nbsp;g&amp;amp;nbsp;LEFT&amp;amp;nbsp;JOIN&amp;amp;nbsp;gm_cp&amp;amp;nbsp;cp&amp;amp;nbsp;ON&amp;amp;nbsp;cp.id&amp;amp;nbsp;=&amp;amp;nbsp;g.cp_id&amp;amp;nbsp;AND&amp;amp;nbsp;cp.deleted&amp;amp;nbsp;=&amp;amp;nbsp;0&amp;amp;nbsp;LEFT&amp;amp;nbsp;JOIN&amp;amp;nbsp;gm_category&amp;amp;nbsp;c&amp;amp;nbsp;ON&amp;amp;nbsp;c.id&amp;amp;nbsp;=&amp;amp;nbsp;g.category_id&amp;amp;nbsp;AND&amp;amp;nbsp;c.deleted&amp;amp;nbsp;=&amp;amp;nbsp;0&amp;amp;nbsp;LEFT&amp;amp;nbsp;JOIN&amp;amp;nbsp;gm_type&amp;amp;nbsp;t&amp;amp;nbsp;ON&amp;amp;nbsp;t.id&amp;amp;nbsp;=&amp;amp;nbsp;g.type_id&amp;amp;nbsp;AND&amp;amp;nbsp;t.deleted&amp;amp;nbsp;=&amp;amp;nbsp;0&amp;amp;nbsp;WHERE&amp;amp;nbsp;g.deleted&amp;amp;nbsp;=&amp;amp;nbsp;0&amp;amp;nbsp;ORDER&amp;amp;nbsp;BY&amp;amp;nbsp;g.modify_time&amp;amp;nbsp;DESC&amp;amp;nbsp;LIMIT&amp;amp;nbsp;20&amp;amp;nbsp;;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【问题分析】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;使用explain查看执行计划，结果如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://s8.51cto.com/wyfs01/M02/2F/B4/wKioJlJD2AKQm3wOAABT5_yvoac051.jpg&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;fit-image&amp;quot; alt=&amp;quot;slow&amp;quot; src=&amp;quot;http://s8.51cto.com/wyfs01/M02/2F/B4/wKioJlJD2AKQm3wOAABT5_yvoac051.jpg&amp;quot; width=&amp;quot;498&amp;quot; height=&amp;quot;115&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这条sql语句的问题其实还是比较明显的：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;查询了大量数据(包括数据条数、以及g.* )，然后使用临时表order by，但最终又只返回了20条数据。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;DBA观察到的IO高，是因为sql语句生成了一个巨大的临时表，内存放不下，于是全部拷贝到磁盘，导致IO飙升。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【优化方案】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;优化的总体思路是拆分sql，将排序操作和查询所有信息的操作分开。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;第一条语句：查询符合条件的数据，只需要查询g.id即可&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;SELECT DISTINCT &amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;g.id &amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt; FROM &amp;lt;code&amp;gt;gm_game&amp;lt;/code&amp;gt; g LEFT JOIN &amp;lt;code&amp;gt;gm_cp&amp;lt;/code&amp;gt; cp ON cp.id = g.cp_id AND cp.deleted = 0 LEFT JOIN &amp;lt;code&amp;gt;gm_category&amp;lt;/code&amp;gt; c ON c.id = g.category_id AND c.deleted = 0 LEFT JOIN &amp;lt;code&amp;gt;gm_type&amp;lt;/code&amp;gt; t ON t.id = g.type_id AND t.deleted = 0 WHERE g.deleted = 0 ORDER BY g.modify_time DESC LIMIT 20 ;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;第二条语句：查询符合条件的详细数据，将第一条sql的结果使用in操作拼接到第二条的sql&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;SELECT DISTINCT &amp;lt;strong&amp;gt;&amp;lt;span style=&amp;quot;color:blue&amp;quot;&amp;gt;g.*,&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt; cp.name AS cp_name,c.name AS category_name,t.name AS type_name FROM &amp;lt;code&amp;gt;gm_game&amp;lt;/code&amp;gt; g LEFT JOIN &amp;lt;code&amp;gt;gm_cp&amp;lt;/code&amp;gt; cp ON cp.id = g.cp_id AND cp.deleted = 0 LEFT JOIN &amp;lt;code&amp;gt;gm_category&amp;lt;/code&amp;gt; c ON c.id = g.category_id AND c.deleted = 0 LEFT JOIN &amp;lt;code&amp;gt;gm_type&amp;lt;/code&amp;gt; t ON t.id = g.type_id AND t.deleted = 0 WHERE g.deleted = 0 and g.id in(…………………) ORDER BY g.modify_time DESC ;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【实测效果】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在SATA机器上测试，优化前大约需要50s，优化后第一条0.3s，第二条0.1s，优化后&amp;lt;span style=&amp;quot;color:red&amp;quot;&amp;gt;执行速度是原来的100倍以上，IO从100%降到不到1%&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;在SSD机器上测试，优化前大约需要7s，优化后第一条0.3s，第二条0.1s，优化后&amp;lt;span style=&amp;quot;color:red&amp;quot;&amp;gt;执行速度是原来的10倍以上，IO从100%降到不到1%&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;可以看出，优化前磁盘io是性能瓶颈，SSD的速度要比SATA明显要快，优化后磁盘不再是瓶颈，SSD和SATA性能没有差别。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;【理论分析】&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;MySQL在执行SQL查询时可能会用到临时表，一般情况下，用到临时表就意味着性能较低。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;临时表存储&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;MySQL临时表分为“内存临时表”和“磁盘临时表”，其中内存临时表使用MySQL的MEMORY存储引擎，磁盘临时表使用MySQL的MyISAM存储引擎；&amp;lt;br/&amp;gt;一般情况下，MySQL会先创建内存临时表，但内存临时表超过配置指定的值后，MySQL会将内存临时表导出到磁盘临时表；&amp;lt;br/&amp;gt;Linux平台上缺省是/tmp目录，/tmp目录小的系统要注意啦。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;使用临时表的场景&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;1）ORDER BY子句和GROUP BY子句不同， 例如：ORDERY BY price GROUP BY name；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2）在JOIN查询中，ORDER BY或者GROUP BY使用了不是第一个表的列 例如：SELECT * from TableA, TableB ORDER BY TableA.price GROUP by TableB.name&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3）ORDER BY中使用了DISTINCT关键字 ORDERY BY DISTINCT(price)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;4）SELECT语句中指定了SQL_SMALL_RESULT关键字 &amp;amp;nbsp;\nSQL_SMALL_RESULT的意思就是告诉MySQL，结果会很小，请直接使用内存临时表，不需要使用索引排序 &amp;amp;nbsp;\nSQL_SMALL_RESULT必须和GROUP BY、DISTINCT或DISTINCTROW一起使用 &amp;amp;nbsp;\n一般情况下，我们没有必要使用这个选项，让MySQL服务器选择即可。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;直接使用磁盘临时表的场景&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;1）表包含TEXT或者BLOB列；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2）GROUP BY 或者 DISTINCT 子句中包含长度大于512字节的列；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3）使用UNION或者UNION ALL时，SELECT子句中包含大于512字节的列；&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;临时表相关配置&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;tmp_table_size：指定系统创建的内存临时表最大大小； &amp;lt;a href=&amp;quot;http://dev.mysql.com/doc/refman/5.1/en/server-system-variables.html#sysvar_tmp_table_size&amp;quot;&amp;gt;http://dev.mysql.com/doc/refman/5.1/en/server-system-variables.html#sysvar_tmp_table_size&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;max_heap_table_size: 指定用户创建的内存表的最大大小； &amp;lt;a href=&amp;quot;http://dev.mysql.com/doc/refman/5.1/en/server-system-variables.html#sysvar_max_heap_table_size&amp;quot;&amp;gt;http://dev.mysql.com/doc/refman/5.1/en/server-system-variables.html#sysvar_max_heap_table_size&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注意：最终的系统创建的内存临时表大小是取上述两个配置值的最小值。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;表的设计原则&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;使用临时表一般都意味着性能比较低，特别是使用磁盘临时表，性能更慢，因此我们在实际应用中应该尽量避免临时表的使用。 常见的避免临时表的方法有：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1）创建索引：在ORDER BY或者GROUP BY的列上创建索引；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2）分拆很长的列：一般情况下，TEXT、BLOB，大于512字节的字符串，基本上都是为了显示信息，而不会用于查询条件， 因此表设计的时候，应该将这些列独立到另外一张表。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;SQL优化&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;如果表的设计已经确定，修改比较困难，那么也可以通过优化SQL语句来减少临时表的大小，以提升SQL执行效率。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;常见的优化SQL语句方法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1）拆分SQL语句&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;临时表主要是用于排序和分组，很多业务都是要求排序后再取出详细的分页数据，这种情况下可以将排序和取出详细数据拆分成不同的SQL，以降低排序或分组时临时表的大小，提升排序和分组的效率，我们的案例就是采用这种方法。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2）优化业务，去掉排序分组等操作&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;有时候业务其实并不需要排序或分组，仅仅是为了好看或者阅读方便而进行了排序，例如数据导出、数据查询等操作，这种情况下去掉排序和分组对业务也没有多大影响。&amp;lt;/p&amp;gt;&amp;lt;ul class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;如何判断使用了临时表？&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;使用explain查看执行计划，Extra列看到Using temporary就意味着使用了临时表。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;详细信息请参考MySQL官方手册： &amp;lt;a href=&amp;quot;http://dev.mysql.com/doc/refman/5.1/en/internal-temporary-tables.html&amp;quot;&amp;gt;http://dev.mysql.com/doc/refman/5.1/en/internal-temporary-tables.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;a href=&amp;quot;http://tech.uc.cn/?p=2218&amp;quot;&amp;gt;http://tech.uc.cn/?p=2218&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:33:43','http://tech.uc.cn/?p=2218',NULL,31,1,1,0,0,0,1),(122,'MySQL之慢查询日志（1）','慢查询有什么用？它能记录下所有执行超过long_query_time时间的SQL语句，帮你找到执行慢的SQL，方便我们对这些SQL进行优化。','&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;慢查询有什么用？&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;它能记录下所有执行超过long_query_time时间的SQL语句，帮你找到执行慢的SQL，方便我们对这些SQL进行优化。&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;测试用 MySQL 版本&amp;lt;/span&amp;gt;：&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;Server version: 5.6.10-log Source distribution&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;未做任何慢日志设置时。&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;show&amp;amp;nbsp;variables&amp;amp;nbsp;like&amp;amp;nbsp;&amp;amp;quot;%query%&amp;amp;quot;;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n+------------------------------+--------------------------------------+&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;Variable_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;Value&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;\n+------------------------------+--------------------------------------+&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;binlog_rows_query_log_events&amp;amp;nbsp;|&amp;amp;nbsp;OFF&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;ft_query_expansion_limit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;20&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;have_query_cache&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;YES&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;long_query_time&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;10.000000&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_alloc_block_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;8192&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_cache_limit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;1048576&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_cache_min_res_unit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;4096&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_cache_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;1048576&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_cache_type&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;OFF&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_cache_wlock_invalidate&amp;amp;nbsp;|&amp;amp;nbsp;OFF&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;query_prealloc_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;8192&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;slow_query_log&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;OFF&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n|&amp;amp;nbsp;slow_query_log_file&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;/usr/local/mysql/data/Betty-slow.log&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;\n+------------------------------+--------------------------------------+&amp;amp;nbsp;&amp;amp;nbsp;\n13&amp;amp;nbsp;rows&amp;amp;nbsp;in&amp;amp;nbsp;set&amp;amp;nbsp;(0.01&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;\n&amp;amp;nbsp;\nmysql&amp;amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;修改配置文件，开启 slow log 。 &amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;vi&amp;amp;nbsp;/etc/my.cnf&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;For&amp;lt;/span&amp;gt;&amp;amp;nbsp;advice&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;how&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;change&amp;amp;nbsp;settings&amp;amp;nbsp;please&amp;amp;nbsp;see&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;***&amp;amp;nbsp;DO&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;NOT&amp;lt;/span&amp;gt;&amp;amp;nbsp;EDIT&amp;amp;nbsp;THIS&amp;amp;nbsp;FILE.&amp;amp;nbsp;It&amp;amp;#39;s&amp;amp;nbsp;a&amp;amp;nbsp;template&amp;amp;nbsp;which&amp;amp;nbsp;will&amp;amp;nbsp;be&amp;amp;nbsp;copied&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;***&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;&amp;amp;nbsp;location&amp;amp;nbsp;during&amp;amp;nbsp;install,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt;&amp;amp;nbsp;will&amp;amp;nbsp;be&amp;amp;nbsp;replaced&amp;amp;nbsp;if&amp;amp;nbsp;you&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;***&amp;amp;nbsp;upgrade&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;a&amp;amp;nbsp;newer&amp;amp;nbsp;version&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;MySQL.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[mysqld]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Remove&amp;amp;nbsp;leading&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;amount&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;RAM&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;most&amp;amp;nbsp;important&amp;amp;nbsp;data&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;cache&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;MySQL.&amp;amp;nbsp;Start&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;at&amp;lt;/span&amp;gt;&amp;amp;nbsp;70%&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;total&amp;amp;nbsp;RAM&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;dedicated&amp;amp;nbsp;server,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt;&amp;amp;nbsp;10%.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;innodb_buffer_pool_size&amp;amp;nbsp;=&amp;amp;nbsp;128M&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Remove&amp;amp;nbsp;leading&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;turn&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;a&amp;amp;nbsp;very&amp;amp;nbsp;important&amp;amp;nbsp;data&amp;amp;nbsp;integrity&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;option&amp;lt;/span&amp;gt;:&amp;amp;nbsp;logging&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;changes&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;binary&amp;lt;/span&amp;gt;&amp;amp;nbsp;log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;between&amp;lt;/span&amp;gt;&amp;amp;nbsp;backups.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;log_bin=mysql-bin&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;slow_query_log=&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;slow_query_log_file=mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;long_query_time=2&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;These&amp;amp;nbsp;are&amp;amp;nbsp;commonly&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;,&amp;amp;nbsp;remove&amp;amp;nbsp;the&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt;&amp;amp;nbsp;required.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;basedir&amp;amp;nbsp;=&amp;amp;nbsp;.....&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;datadir&amp;amp;nbsp;=&amp;amp;nbsp;.....&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;port&amp;amp;nbsp;=&amp;amp;nbsp;.....&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;server_id&amp;amp;nbsp;=&amp;amp;nbsp;.....&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;socket&amp;amp;nbsp;=&amp;amp;nbsp;.....&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Remove&amp;amp;nbsp;leading&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;options&amp;amp;nbsp;mainly&amp;amp;nbsp;useful&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;reporting&amp;amp;nbsp;servers.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;The&amp;amp;nbsp;server&amp;amp;nbsp;defaults&amp;amp;nbsp;are&amp;amp;nbsp;faster&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;transactions&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt;&amp;amp;nbsp;fast&amp;amp;nbsp;SELECTs.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Adjust&amp;amp;nbsp;sizes&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt;&amp;amp;nbsp;needed,&amp;amp;nbsp;experiment&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;find&amp;amp;nbsp;the&amp;amp;nbsp;optimal&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;values&amp;lt;/span&amp;gt;.&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;join_buffer_size&amp;amp;nbsp;=&amp;amp;nbsp;128M&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;sort_buffer_size&amp;amp;nbsp;=&amp;amp;nbsp;2M&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;read_rnd_buffer_size&amp;amp;nbsp;=&amp;amp;nbsp;2M&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[mysql]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;socket&amp;amp;nbsp;=&amp;amp;nbsp;/tmp/mysql.sock &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;重启 MySQL 。&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;/etc/init.d/mysql&amp;amp;nbsp;restart&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Shutting&amp;amp;nbsp;down&amp;amp;nbsp;MySQL..&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[&amp;amp;nbsp;&amp;amp;nbsp;OK&amp;amp;nbsp;&amp;amp;nbsp;]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Starting&amp;amp;nbsp;MySQL.&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[&amp;amp;nbsp;&amp;amp;nbsp;OK&amp;amp;nbsp;&amp;amp;nbsp;]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;查看 slow log 。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;ll&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-rw-rw&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----&amp;amp;nbsp;1&amp;amp;nbsp;mysql&amp;amp;nbsp;mysql&amp;amp;nbsp;719&amp;amp;nbsp;Sep&amp;amp;nbsp;&amp;amp;nbsp;6&amp;amp;nbsp;12:43&amp;amp;nbsp;mysql-slow&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;重新查看系统变量值。 &amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;show&amp;amp;nbsp;variables&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;like&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;amp;quot;%query%&amp;amp;quot;&amp;lt;/span&amp;gt;;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;------------------------------+------------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;Variable_name&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;Value&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;------------------------------+------------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;binlog_rows_query_log_events&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;OFF&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;ft_query_expansion_limit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;20&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;have_query_cache&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;YES&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;long_query_time&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;2.000000&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_alloc_block_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;8192&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_cache_limit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;1048576&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_cache_min_res_unit&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;4096&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_cache_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;1048576&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_cache_type&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;OFF&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_cache_wlock_invalidate&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;OFF&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;query_prealloc_size&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;8192&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;slow_query_log&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;ON&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;slow_query_log_file&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;|&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;------------------------------+------------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;13&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(0.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;查看新生成的 slow log 的内容。&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;cat&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;/usr/&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;local&amp;lt;/span&amp;gt;/mysql/bin/mysqld,&amp;amp;nbsp;Version:&amp;amp;nbsp;5.6.10-log&amp;amp;nbsp;(Source&amp;amp;nbsp;distribution).&amp;amp;nbsp;started&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;with&amp;lt;/span&amp;gt;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Tcp&amp;amp;nbsp;port:&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;Unix&amp;amp;nbsp;socket:&amp;amp;nbsp;(&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Id&amp;amp;nbsp;Command&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Argument&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;测试 slow log 。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;1;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(0.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(1);&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(1)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(1.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(3);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(3)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(3.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(4);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(4)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(4.01&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(5);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(5)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(5.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(2);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(2)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(2.01&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(1);&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;sleep(1)&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;----------+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(1.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;2;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;2&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;|&amp;amp;nbsp;2&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;+&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---+&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1&amp;amp;nbsp;row&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;set&amp;lt;/span&amp;gt;&amp;amp;nbsp;(0.00&amp;amp;nbsp;sec)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql&amp;amp;gt; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;查看此时 slow log 的内容。&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty data]# cat mysql-slow &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;/usr/local/mysql/bin/mysqld, Version: 5.6.10-log (Source distribution). started with: &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Tcp port: 0 &amp;amp;nbsp;Unix socket: (null) &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Time &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; Id Command &amp;amp;nbsp; &amp;amp;nbsp;Argument &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Time: 130906 12:52:51 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# User@Host: root[root] @ localhost [] &amp;amp;nbsp;Id: &amp;amp;nbsp; &amp;amp;nbsp; 1 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Query_time: 3.002864 &amp;amp;nbsp;Lock_time: 0.000000 Rows_sent: 1 &amp;amp;nbsp;Rows_examined: 0 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;SET timestamp=1378443171; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;select sleep(3); &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Time: 130906 12:53:01 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# User@Host: root[root] @ localhost [] &amp;amp;nbsp;Id: &amp;amp;nbsp; &amp;amp;nbsp; 1 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Query_time: 4.001943 &amp;amp;nbsp;Lock_time: 0.000000 Rows_sent: 1 &amp;amp;nbsp;Rows_examined: 0 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;SET timestamp=1378443181; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;select sleep(4); &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Time: 130906 12:53:09 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# User@Host: root[root] @ localhost [] &amp;amp;nbsp;Id: &amp;amp;nbsp; &amp;amp;nbsp; 1 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Query_time: 5.002093 &amp;amp;nbsp;Lock_time: 0.000000 Rows_sent: 1 &amp;amp;nbsp;Rows_examined: 0 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;SET timestamp=1378443189; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;select sleep(5); &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Time: 130906 12:53:15 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# User@Host: root[root] @ localhost [] &amp;amp;nbsp;Id: &amp;amp;nbsp; &amp;amp;nbsp; 1 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;# Query_time: 2.002984 &amp;amp;nbsp;Lock_time: 0.000000 Rows_sent: 1 &amp;amp;nbsp;Rows_examined: 0 &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;SET timestamp=1378443195; &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;select sleep(2); &amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty data]#&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;实验：&amp;amp;nbsp;&amp;lt;/span&amp;gt; &amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;a. 使用 mysql 自带慢查询日志分析工具 mysqldumpslow 。 &amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;mysqldumpslow&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Reading&amp;amp;nbsp;mysql&amp;amp;nbsp;slow&amp;amp;nbsp;query&amp;amp;nbsp;log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;from&amp;lt;/span&amp;gt;&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;Count&amp;lt;/span&amp;gt;:&amp;amp;nbsp;4&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;=3.50s&amp;amp;nbsp;(14s)&amp;amp;nbsp;&amp;amp;nbsp;Lock=0.00s&amp;amp;nbsp;(0s)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;=1.0&amp;amp;nbsp;(4),&amp;amp;nbsp;root[root]@localhost&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(N)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;&amp;quot;&amp;gt;b. 使用 hackmysql.com 推出的一款日志分析工具 mysqlsla 。&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;mysqlsla&amp;amp;nbsp;-lt&amp;amp;nbsp;slow&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Report&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;slow&amp;amp;nbsp;logs:&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;4&amp;amp;nbsp;queries&amp;amp;nbsp;total,&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;unique&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Sorted&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;by&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;amp;#39;t_sum&amp;amp;#39;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Grand&amp;amp;nbsp;Totals:&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;14&amp;amp;nbsp;s,&amp;amp;nbsp;Lock&amp;amp;nbsp;0&amp;amp;nbsp;s,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;4,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;Examined&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;______________________________________________________________________&amp;amp;nbsp;001&amp;amp;nbsp;___&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;Count&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;4&amp;amp;nbsp;&amp;amp;nbsp;(100.00%)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;14.009884&amp;amp;nbsp;s&amp;amp;nbsp;total,&amp;amp;nbsp;3.502471&amp;amp;nbsp;s&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;,&amp;amp;nbsp;2.002984&amp;amp;nbsp;s&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;5.002093&amp;amp;nbsp;s&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;(100.00%)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;(s)&amp;amp;nbsp;:&amp;amp;nbsp;0&amp;amp;nbsp;total,&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;,&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;(0.00%)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;,&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;(100.00%)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examined&amp;amp;nbsp;:&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;,&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;(0.00%)&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Database&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Users&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;root@localhost&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;100.00%&amp;amp;nbsp;(4)&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;query,&amp;amp;nbsp;100.00%&amp;amp;nbsp;(4)&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;all&amp;lt;/span&amp;gt;&amp;amp;nbsp;users&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Query&amp;amp;nbsp;abstract:&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=N;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SELECT&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(N);&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Query&amp;amp;nbsp;sample:&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=1378443171;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(3);&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-13 10:20:40','http://my.oschina.net/moooofly/blog/160201','1',31,1,1,0,4,0,1),(123,'MySQL之慢查询日志（2）','慢查询有什么用？它能记录下所有执行超过long_query_time时间的SQL语句，帮你找到执行慢的SQL，方便我们对这些SQL进行优化。','&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;c. 使用德国人写的 mysql_explain_slow_log 。（不知道为什么未统计出信息） &amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;WGET_DIR]#&amp;amp;nbsp;./mysql_explain_slow_log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;--user=root&amp;amp;nbsp;--password=&amp;amp;nbsp;--socket=/tmp/mysql.sock&amp;amp;nbsp;&amp;amp;lt;&amp;amp;nbsp;/usr/local/mysql/data/mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mysql_explain_slow_log&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;======================&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Index&amp;lt;/span&amp;gt;&amp;amp;nbsp;usage&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;------------------------------------&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Queries&amp;amp;nbsp;causing&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;table&amp;lt;/span&amp;gt;&amp;amp;nbsp;scans&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;-------------------&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;Sum&amp;lt;/span&amp;gt;:&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;table&amp;lt;/span&amp;gt;&amp;amp;nbsp;scans&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Summary&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;---------------------------------------&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Select&amp;lt;/span&amp;gt;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;queries&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Update&amp;lt;/span&amp;gt;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;queries&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Load&amp;lt;/span&amp;gt;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;queries&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Logfile:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;26&amp;amp;nbsp;lines&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Started:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Fri&amp;amp;nbsp;Sep&amp;amp;nbsp;&amp;amp;nbsp;6&amp;amp;nbsp;15:59:13&amp;amp;nbsp;2013&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Finished:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Fri&amp;amp;nbsp;Sep&amp;amp;nbsp;&amp;amp;nbsp;6&amp;amp;nbsp;15:59:13&amp;amp;nbsp;2013&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;WGET_DIR]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;d.&amp;amp;nbsp;&amp;lt;/span&amp;gt; &amp;amp;nbsp;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;line-height:21px;&amp;quot;&amp;gt;google code 上的一个分析工具 mysql_filter_slow_log （最后更新日期为2007年），提供了 python 和 php 两种可执行的脚本。&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;WGET_DIR]#&amp;amp;nbsp;python&amp;amp;nbsp;mysql_filter_slow_log.py&amp;amp;nbsp;/usr/&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;local&amp;lt;/span&amp;gt;/mysql/data/mysql-slow&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;--no-duplicates&amp;amp;nbsp;--sort-execution-count&amp;amp;nbsp;--top=10&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Execution&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;count&amp;lt;/span&amp;gt;:&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:23.&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Column&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;sum&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examined:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;User&amp;lt;/span&amp;gt;@Host:&amp;amp;nbsp;root[root]&amp;amp;nbsp;@&amp;amp;nbsp;localhost&amp;amp;nbsp;[]&amp;amp;nbsp;&amp;amp;nbsp;Id:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=1378454843;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(5);&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Execution&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;count&amp;lt;/span&amp;gt;:&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:15.&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Column&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;sum&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examined:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;User&amp;lt;/span&amp;gt;@Host:&amp;amp;nbsp;root[root]&amp;amp;nbsp;@&amp;amp;nbsp;localhost&amp;amp;nbsp;[]&amp;amp;nbsp;&amp;amp;nbsp;Id:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=1378454835;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(4);&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Execution&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;count&amp;lt;/span&amp;gt;:&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:01.&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Column&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;sum&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;3&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;3&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;3&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examined:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;User&amp;lt;/span&amp;gt;@Host:&amp;amp;nbsp;root[root]&amp;amp;nbsp;@&amp;amp;nbsp;localhost&amp;amp;nbsp;[]&amp;amp;nbsp;&amp;amp;nbsp;Id:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=1378454821;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(3);&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Execution&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;count&amp;lt;/span&amp;gt;:&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:28.&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Column&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;|&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;sum&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;2&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;2&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;2&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examined:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;|&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;User&amp;lt;/span&amp;gt;@Host:&amp;amp;nbsp;root[root]&amp;amp;nbsp;@&amp;amp;nbsp;localhost&amp;amp;nbsp;[]&amp;amp;nbsp;&amp;amp;nbsp;Id:&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;timestamp&amp;lt;/span&amp;gt;=1378454848;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(2);&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;WGET_DIR]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;e. 使用 percona-toolkit 中的 pt-query-digest （在《高性能MySQL》中多次提出，值得使用的工具）。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]#&amp;amp;nbsp;pt-query-digest&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;--user=root&amp;amp;nbsp;&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;120ms&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;user&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;,&amp;amp;nbsp;10ms&amp;amp;nbsp;system&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;,&amp;amp;nbsp;20.21M&amp;amp;nbsp;rss,&amp;amp;nbsp;68.70M&amp;amp;nbsp;vsz&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Current&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;date&amp;lt;/span&amp;gt;:&amp;amp;nbsp;Mon&amp;amp;nbsp;Sep&amp;amp;nbsp;&amp;amp;nbsp;9&amp;amp;nbsp;13:21:38&amp;amp;nbsp;2013&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Hostname:&amp;amp;nbsp;Betty&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Files:&amp;amp;nbsp;mysql-slow&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Overall:&amp;amp;nbsp;4&amp;amp;nbsp;total,&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;unique&amp;lt;/span&amp;gt;,&amp;amp;nbsp;0.15&amp;amp;nbsp;QPS,&amp;amp;nbsp;0.52x&amp;amp;nbsp;concurrency&amp;amp;nbsp;________________&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;range:&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:01&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;16:07:28&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Attribute&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;total&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;min&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;95%&amp;amp;nbsp;&amp;amp;nbsp;stddev&amp;amp;nbsp;&amp;amp;nbsp;median&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;============&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Exec&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;14s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;2s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4s&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examine&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;size&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;60&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Profile&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Rank&amp;amp;nbsp;Query&amp;amp;nbsp;ID&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Response&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;Calls&amp;amp;nbsp;R/Call&amp;amp;nbsp;V/M&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Item&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;====&amp;amp;nbsp;==================&amp;amp;nbsp;==============&amp;amp;nbsp;=====&amp;amp;nbsp;======&amp;amp;nbsp;=====&amp;amp;nbsp;======&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;0xF9A57DD5A41825CA&amp;amp;nbsp;14.0097&amp;amp;nbsp;100.0%&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;3.5024&amp;amp;nbsp;&amp;amp;nbsp;0.36&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SELECT&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;1:&amp;amp;nbsp;0.15&amp;amp;nbsp;QPS,&amp;amp;nbsp;0.52x&amp;amp;nbsp;concurrency,&amp;amp;nbsp;ID&amp;amp;nbsp;0xF9A57DD5A41825CA&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;at&amp;lt;/span&amp;gt;&amp;amp;nbsp;byte&amp;amp;nbsp;548&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;This&amp;amp;nbsp;item&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;is&amp;lt;/span&amp;gt;&amp;amp;nbsp;included&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;report&amp;amp;nbsp;because&amp;amp;nbsp;it&amp;amp;nbsp;matches&amp;amp;nbsp;&amp;lt;span class=&amp;quot;comment&amp;quot;&amp;gt;--limit.&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Scores:&amp;amp;nbsp;V/M&amp;amp;nbsp;=&amp;amp;nbsp;0.36&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Time&amp;lt;/span&amp;gt;&amp;amp;nbsp;range:&amp;amp;nbsp;2013-09-06&amp;amp;nbsp;16:07:01&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;16:07:28&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Attribute&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;pct&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;total&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;min&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;max&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;avg&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;95%&amp;amp;nbsp;&amp;amp;nbsp;stddev&amp;amp;nbsp;&amp;amp;nbsp;median&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;============&amp;amp;nbsp;===&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;=======&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;func&amp;quot;&amp;gt;Count&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;100&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Exec&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;100&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;14s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;2s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;5s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1s&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4s&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Lock&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;time&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;sent&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;100&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;4&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;Rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;examine&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;size&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;100&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;60&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;15&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;String:&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Hosts&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;localhost&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Users&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;root&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Query_time&amp;amp;nbsp;distribution&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1us&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;10us&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;100us&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1ms&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;10ms&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;100ms&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;1s&amp;amp;nbsp;&amp;amp;nbsp;################################################################&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;&amp;amp;nbsp;10s+&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;EXPLAIN&amp;amp;nbsp;/*!50100&amp;amp;nbsp;PARTITIONS*/&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;select&amp;lt;/span&amp;gt;&amp;amp;nbsp;sleep(5)\\G&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;[root@Betty&amp;amp;nbsp;data]# &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:&amp;amp;#39;Microsoft YaHei&amp;amp;#39;;font-size:14px;&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;慢查询配置项&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;ol class=&amp;quot;dp-sql list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;I.e.&amp;amp;nbsp;you&amp;amp;nbsp;could&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;add&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;following&amp;amp;nbsp;lines&amp;amp;nbsp;under&amp;amp;nbsp;the&amp;amp;nbsp;[mysqld]&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;section&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;your&amp;amp;nbsp;my.ini&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;or&amp;lt;/span&amp;gt;&amp;amp;nbsp;my.cnf&amp;amp;nbsp;configuration&amp;amp;nbsp;file:&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;all&amp;lt;/span&amp;gt;&amp;amp;nbsp;queries&amp;amp;nbsp;taking&amp;amp;nbsp;more&amp;amp;nbsp;than&amp;amp;nbsp;3&amp;amp;nbsp;seconds&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;long_query_time=3&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;minimum:&amp;amp;nbsp;1,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;:&amp;amp;nbsp;10&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;MySQL&amp;amp;nbsp;&amp;amp;gt;=&amp;amp;nbsp;5.1.21&amp;amp;nbsp;(&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;or&amp;lt;/span&amp;gt;&amp;amp;nbsp;patched):&amp;amp;nbsp;3&amp;amp;nbsp;seconds&amp;amp;nbsp;=&amp;amp;nbsp;3000000&amp;amp;nbsp;microseconds&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;long_query_time=3.000000&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;minimum:&amp;amp;nbsp;0.000001&amp;amp;nbsp;(1&amp;amp;nbsp;microsecond)&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Activate&amp;amp;nbsp;the&amp;amp;nbsp;Slow&amp;amp;nbsp;Query&amp;amp;nbsp;Log&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;slow_query_log&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;&amp;amp;gt;=&amp;amp;nbsp;5.1.29&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;log-slow-queries&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;deprecated&amp;amp;nbsp;since&amp;amp;nbsp;5.1.29&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Write&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;a&amp;amp;nbsp;custom&amp;amp;nbsp;file&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;name&amp;lt;/span&amp;gt;&amp;amp;nbsp;(&amp;amp;gt;=&amp;amp;nbsp;5.1.29)&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;slow_query_log_file=file_name&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;:&amp;amp;nbsp;/data_dir/host_name-slow.log&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;all&amp;lt;/span&amp;gt;&amp;amp;nbsp;queries&amp;amp;nbsp;without&amp;amp;nbsp;indexes&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;log-queries-&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;not&amp;lt;/span&amp;gt;-using-indexes&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Log&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;only&amp;lt;/span&amp;gt;&amp;amp;nbsp;queries&amp;amp;nbsp;which&amp;amp;nbsp;examine&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;at&amp;lt;/span&amp;gt;&amp;amp;nbsp;least&amp;amp;nbsp;N&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;rows&amp;lt;/span&amp;gt;&amp;amp;nbsp;(&amp;amp;gt;=&amp;amp;nbsp;5.1.21)&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;min_examined_row_limit=1000&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;:&amp;amp;nbsp;0&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Log&amp;amp;nbsp;slow&amp;amp;nbsp;OPTIMIZE&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;,&amp;amp;nbsp;ANALYZE&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;,&amp;amp;nbsp;&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;ALTER&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;&amp;amp;nbsp;statements&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;log-slow-admin-statements&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Log&amp;amp;nbsp;slow&amp;amp;nbsp;queries&amp;amp;nbsp;executed&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;by&amp;lt;/span&amp;gt;&amp;amp;nbsp;replication&amp;amp;nbsp;slaves&amp;amp;nbsp;(&amp;amp;gt;=&amp;amp;nbsp;5.1.21)&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;log-slow-slave-statements&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;MySQL&amp;amp;nbsp;5.1.6&amp;amp;nbsp;through&amp;amp;nbsp;5.1.20&amp;amp;nbsp;had&amp;amp;nbsp;a&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;&amp;amp;nbsp;value&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;amp;nbsp;log-&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;output&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;,&amp;amp;nbsp;so&amp;amp;nbsp;you&amp;amp;nbsp;should&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;force&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;Attention:&amp;amp;nbsp;logging&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;only&amp;lt;/span&amp;gt;&amp;amp;nbsp;includes&amp;amp;nbsp;whole&amp;amp;nbsp;seconds&amp;amp;nbsp;information&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;log-&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;output&amp;lt;/span&amp;gt;=FILE&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;##&amp;amp;nbsp;Admin&amp;amp;nbsp;query&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt;&amp;amp;nbsp;online&amp;amp;nbsp;activation&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;is&amp;lt;/span&amp;gt;&amp;amp;nbsp;possible&amp;amp;nbsp;since&amp;amp;nbsp;MySQL&amp;amp;nbsp;5.1&amp;amp;nbsp;(without&amp;amp;nbsp;server&amp;amp;nbsp;restart)&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;##&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;@@&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;global&amp;lt;/span&amp;gt;.slow_query_log=1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;##&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;SET&amp;lt;/span&amp;gt;&amp;amp;nbsp;@@&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;global&amp;lt;/span&amp;gt;.long_query_time=1&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;##&amp;amp;nbsp;Show&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;current&amp;lt;/span&amp;gt;&amp;amp;nbsp;variables&amp;amp;nbsp;related&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt;&amp;amp;nbsp;the&amp;amp;nbsp;Slow&amp;amp;nbsp;Query&amp;amp;nbsp;Log&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;##&amp;amp;nbsp;SHOW&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;GLOBAL&amp;lt;/span&amp;gt;&amp;amp;nbsp;VARIABLES&amp;amp;nbsp;&amp;lt;span class=&amp;quot;keyword&amp;quot;&amp;gt;WHERE&amp;lt;/span&amp;gt;&amp;amp;nbsp;Variable_name&amp;amp;nbsp;REGEXP&amp;amp;nbsp;&amp;lt;span class=&amp;quot;string&amp;quot;&amp;gt;&amp;amp;#39;admin|min_examined|log_output|log_queries|log_slave|long|slow_quer&amp;amp;#39;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;a href=&amp;quot;http://my.oschina.net/moooofly/blog/160201&amp;quot;&amp;gt;http://my.oschina.net/moooofly/blog/160201&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:51:31','http://database.51cto.com/art/201309/410314_1.htm','1',31,1,1,0,1,0,1),(124,'101个MySQL的调优技巧','MySQL是一个功能强大的开源数据库. 随着越来越多的数据库驱动的应用程序，人们一直在推动MySQL发展到它的极限. 这里是101条调节和优化MySQL安装的技巧. 一些技巧是针对特定的安装环境的，但这些思路是通用的. 我已经把他们分成几类，来帮助你掌握更多MySQL的调节和优化技巧。','&amp;lt;p&amp;gt;MySQL是一个功能强大的开源数据库. 随着越来越多的数据库驱动的应用程序，人们一直在推动MySQL发展到它的极限. \n这里是101条调节和优化MySQL安装的技巧. 一些技巧是针对特定的安装环境的，但这些思路是通用的. \n我已经把他们分成几类，来帮助你掌握更多MySQL的调节和优化技巧.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;MySQL 服务器硬件和操作系统调节:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;1. 拥有足够的物理内存来把整个InnoDB文件加载到内存中——在内存中访问文件时的速度要比在硬盘中访问时快的多.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2. 不惜一切代价避免使用Swap交换分区 – 交换时是从硬盘读取的，它的速度很慢.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3. 使用电池供电的RAM（注：RAM即随机存储器）.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;4. 使用高级的RAID（注：Redundant Arrays of Inexpensive Disks，即磁盘阵列） – 最好是RAID10或更高.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;5. 避免RAID5（注：一种存储性能、数据安全和存储成本兼顾的存储解决方案） – 确保数据库完整性的校验是要付出代价的.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;6. 将操作系统和数据分区分开，不仅仅是逻辑上，还包括物理上 – 操作系统的读写操作会影响数据库的性能.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;7. 把MySQL临时空间和复制日志与数据放到不同的分区 – 当数据库后台从磁盘进行读写操作时会影响数据库的性能.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;8. 更多的磁盘空间等于更快的速度.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;9. 更好更快的磁盘.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;10. 使用SAS（注： Serial Attached SCSI，即串行连接SCSI）代替SATA（注：SATA，即串口硬盘）.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;11. 较小的硬盘 比 较大的硬盘快，尤其是在RAID配置的情况下.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;12. 使用电池支持的高速缓存RAID控制器.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;13. 避免使用软件磁盘阵列.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;14. 考虑为数据分区使用固态IO卡 (不是磁盘驱动器) – 这些卡能够为几乎任何数量的数据支持2GB/s的写入速度.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;15. 在Linux中设置swappiness的值为0 – 在数据库服务器中没有理由缓存文件，这是一个服务器或台式机的优势.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;16. 如果可以的话，使用 noatime 和 nodirtime 挂载文件系统 – 没有理由更新访问数据库文件的修改时间.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;17. 使用 XFS 文件系统 – 一种比ext3更快、更小的文件系统，并且有许多日志选项， 而且ext3 已被证实与MySQL有双缓冲问题.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;18. 调整 XFS 文件系统日志和缓冲变量 – 为了最高性能标准.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;19. 在 Linux 系统中, 使用 NOOP 或者 DEADLINE IO 定时调度程序 – 同 NOOP 和 DEADLINE定时调度程序相比，这个 CFQ 和 ANTICIPATORY 定时调度程序 显得非常慢.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;20. 使用64位的操作系统 – 对于MySQL，会有更大的内存支持和使用.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;21. 删除服务器上未使用的安装包和守护进程 – 更少的资源占用.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;22. 把使用MySQL的host和你的MySQL host放到一个hosts文件中 – 没有DNS查找.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;23. 切勿强制杀死一个MySQL进程 – 你会损坏数据库和正在运行备份的程序.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;24. 把服务器贡献给MySQL – 后台进程和其他服务能够缩短数据库占用CPU的时间.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;MySQL 配置:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;25. 当写入时，使用 innodb_flush_method=O_DIRECT 来避免双缓冲.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;26. 避免使用 O_DIRECT 和 EXT3 文件系统 – 你将序列化所有要写入的.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;27. 分配足够的 innodb_buffer_pool_size 来加载整个 InnoDB 文件到内存中– 少从磁盘中读取.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;28. 不要将 innodb_log_file_size 参数设置太大， 这样可以更快同时有更多的磁盘空间 – 丢掉多的日志通常是好的，在数据库崩溃后可以降低恢复数据库的时间.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;29. 不要混用 innodb_thread_concurrency 和 thread_concurrency 参数– 这2个值是不兼容的.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;30. 分配一个极小的数量给 max_connections 参数 – 太多的连接会用尽RAM并锁定MySQL服务.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;31. 保持 thread_cache 在一个相对较高的数字，大约 16 – 防止打开连接时缓慢.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;32. 使用skip-name-resolve参数 – 去掉 DNS 查找.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;33. 如果你的查询都是重复的，并且数据不常常发生变化，那么可以使用查询缓存. 但是如果你的数据经常发生变化，那么使用查询缓存会让你感到失望.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;34. 增大temp_table_size值，以防止写入磁盘&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;35. 增大max_heap_table_size值，以防止写入磁盘&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;36. 不要把sort_buffer_size值设置的太高，否则的话你的内存将会很快耗尽&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;37. 根据key_read_requests和key_reads值来决定key_buffer的大小，一般情况下key_read_requests应该比key_reads值高，否则你不能高效的使用key_buffer&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;38. 将innodb_flush_log_at_trx_commit设置为0将会提高性能，但是如果你要保持默认值（1）的话，那么你就要确保数据的完整性，同时你也要确保复制不会滞后.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;39. 你要有一个测试环境，来测试你的配置，并且在不影响正常生产的情况下，可以常常进行重启.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;MySQL模式优化:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;40. 保持你的数据库整理性.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;41. 旧数据归档 – 删除多余的行返回或搜索查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;42. 将您的数据加上索引.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;43. 不要过度使用索引，比较与查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;44. 压缩文字和BLOB数据类型 – 以节省空间和减少磁盘读取次数.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;45. UTF 8和UTF16都低于latin1执行效率.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;46. 有节制地使用触发器.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;47. 冗余数据保持到最低限度 – 不重复不必要的数据.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;48. 使用链接表，而不是扩展行.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;49. 注意数据类型，在您的真实数据中，尽可能使用最小的一个.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;50. 如果其他数据经常被用于查询时，而BLOB / TEXT数据不是，就把BLOB / TEXT数据从其他数据分离出来.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;51. 检查和经常优化表.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;52. 经常重写InnoDB表优化.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;53. 有时，当添加列时删除索引，然后在添加回来索引，这样就会更快.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;54. 针对不同的需求，使用不同的存储引擎.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;55. 使用归档存储引擎日志表或审计表-这是更有效地写道.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;56. 会话数据存储在缓存（memcache）的而不是MySQL中 – 缓存允许自动自动填值的，并阻止您创建难以读取和写入到MySQL的时空数据.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;57. 存储可变长度的字符串时使用VARCHAR而不是CHAR – 节省空间，因为固定长度的CHAR，而VARCHAR长度不固定（UTF8不受此影响）.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;58. 逐步进行模式的变化 – 一个小的变化，可以有巨大的影响.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;59. 在开发环境中测试所有模式，反映生产变化.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;60. 不要随意更改你的配置文件中的值，它可以产生灾难性的影响.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;61. 有时候，在MySQL的configs少即是多.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;62. 有疑问时使用一个通用的MySQL配置文件.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;查询优化:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;63. 使用慢查询日志去发现慢查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;64. 使用执行计划去判断查询是否正常运行.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;65. 总是去测试你的查询看看是否他们运行在最佳状态下 –久而久之性能总会变化.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;66. 避免在整个表上使用count(*),它可能锁住整张表.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;67. 使查询保持一致以便后续相似的查询可以使用查询缓存.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;68. 在适当的情形下使用GROUP BY而不是DISTINCT.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;69. 在WHERE, GROUP BY和ORDER BY子句中使用有索引的列.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;70. 保持索引简单,不在多个索引中包含同一个列.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;71. 有时候MySQL会使用错误的索引,对于这种情况使用USE INDEX.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;72. 检查使用SQL_MODE=STRICT的问题.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;73. 对于记录数小于5的索引字段，在UNION的时候使用LIMIT不是是用OR.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;74. 为了 避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE ,不要用UPDATE去实现.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;75. 不要使用 MAX,使用索引字段和ORDER BY子句.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;76. 避免使用ORDER BY RAND().&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;77. LIMIT M，N实际上可以减缓查询在某些情况下，有节制地使用.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;78. 在WHERE子句中使用UNION代替子查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;79. 对于UPDATES（更新），使用 SHARE MODE（共享模式），以防止独占锁.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;80. 在重新启动的MySQL，记得来温暖你的数据库，以确保您的数据在内存和查询速度快.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;81. 使用DROP TABLE，CREATE TABLE DELETE FROM从表中删除所有数据.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;82. 最小化的数据在查询你需要的数据，使用*消耗大量的时间.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;83. 考虑持久连接，而不是多个连接，以减少开销.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;84. 基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;85. 当负载增加您的服务器上，使用SHOW PROCESSLIST查看慢的和有问题的查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;86. 在开发环境中产生的镜像数据中 测试的所有可疑的查询.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;MySQL 备份过程:&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;87. 从二级复制服务器上进行备份.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;88. 在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;89. 彻底停止MySQL，从数据库文件进行备份.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;90. 如果使用 MySQL dump进行备份，请同时备份二进制日志文件 – 确保复制没有中断.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;91. 不要信任LVM 快照 – 这很可能产生数据不一致，将来会给你带来麻烦.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;92. 为了更容易进行单表恢复，以表为单位导出数据 – 如果数据是与其他表隔离的.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;93. 当使用mysqldump时请使用 –opt.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;94. 在备份之前检查和优化表.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;95. 为了更快的进行导入，在导入时临时禁用外键约束.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;96. 为了更快的进行导入，在导入时临时禁用唯一性检测.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;97. 在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;98. 通过自动调度脚本监控复制实例的错误和延迟.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;99. 定期执行备份.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;100. 定期测试你的备份.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;101: 执行MySQL 监控: Monitis Unveils The World’s First Free On-demand MySQL Monitoring.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;原文链接：&amp;lt;a href=&amp;quot;http://www.ttlsa.com/html/2498.html&amp;quot;&amp;gt;http://www.ttlsa.com/html/2498.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-12 17:54:50','http://www.ttlsa.com/html/2498.html','1',31,1,1,0,0,0,1),(125,'常用的Linux命令（1）','cd  ls  grep  find  cp  mv  rm  ps  kill  killall  file  tar  cat  chgrp  chmod  vim  gcc  time','&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:#ff0000&amp;quot;&amp;gt;1、cd命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是一个非常基本，也是大家经常需要使用的命令，它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。如：&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cd&amp;amp;nbsp;/root/Docements&amp;amp;nbsp;#&amp;amp;nbsp;切换到目录/root/Docements&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cd&amp;amp;nbsp;./path&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;切换到当前目录下的path目录中，“.”表示当前目录&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cd&amp;amp;nbsp;../path&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;#&amp;amp;nbsp;切换到上层目录中的path目录中，“..”表示上一层目录 &amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;2、ls命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;这是一个非常有用的查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些我常用的参数吧，如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-l&amp;amp;nbsp;：列出长数据串，包含文件的属性与权限数据等&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-a&amp;amp;nbsp;：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-d&amp;amp;nbsp;：仅列出目录本身，而不是列出目录的文件数据&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-h&amp;amp;nbsp;：将文件容量以较易读的方式（GB，kB等）列出来&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-R&amp;amp;nbsp;：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;注：这些参数也可以组合使用，下面举两个例子：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ls&amp;amp;nbsp;-l&amp;amp;nbsp;#以长数据串的形式列出当前目录下的数据文件和目录&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ls&amp;amp;nbsp;-lR&amp;amp;nbsp;#以长数据串的形式列出当前目录下的所有文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;3、grep命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;grep&amp;amp;nbsp;[-acinv]&amp;amp;nbsp;[--color=auto]&amp;amp;nbsp;&amp;amp;#39;查找字符串&amp;amp;#39;&amp;amp;nbsp;filename&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-family:Arial,Helvetica,sans-serif; font-size:12px&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-a&amp;amp;nbsp;：将binary文件以text文件的方式查找数据&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-c&amp;amp;nbsp;：计算找到‘查找字符串’的次数&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-i&amp;amp;nbsp;：忽略大小写的区别，即把大小写视为相同&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-v&amp;amp;nbsp;：反向选择，即显示出没有‘查找字符串’内容的那一行&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;grep&amp;amp;nbsp;--color=auto&amp;amp;nbsp;&amp;amp;#39;MANPATH&amp;amp;#39;&amp;amp;nbsp;/etc/man.config&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;把ls&amp;amp;nbsp;-l的输出中包含字母file（不区分大小写）的内容输出&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ls&amp;amp;nbsp;-l&amp;amp;nbsp;|&amp;amp;nbsp;grep&amp;amp;nbsp;-i&amp;amp;nbsp;file&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;4、find命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;find是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多，所以在这里将给把它们分类列出，它的基本语法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;[PATH]&amp;amp;nbsp;[option]&amp;amp;nbsp;[action]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;与时间有关的参数：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-mtime&amp;amp;nbsp;n&amp;amp;nbsp;:&amp;amp;nbsp;n为数字，意思为在n天之前的“一天内”被更改过的文件；&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-mtime&amp;amp;nbsp;+n&amp;amp;nbsp;:&amp;amp;nbsp;列出在n天之前（不含n天本身）被更改过的文件名；&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-mtime&amp;amp;nbsp;-n&amp;amp;nbsp;:&amp;amp;nbsp;列出在n天之内（含n天本身）被更改过的文件名；&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-newer&amp;amp;nbsp;file&amp;amp;nbsp;:&amp;amp;nbsp;列出比file还要新的文件名&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;/root&amp;amp;nbsp;-mtime&amp;amp;nbsp;0&amp;amp;nbsp;#&amp;amp;nbsp;在当前目录下查找今天之内有改动的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;与用户或用户组名有关的参数：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-user&amp;amp;nbsp;name&amp;amp;nbsp;:&amp;amp;nbsp;列出文件所有者为name的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-group&amp;amp;nbsp;name&amp;amp;nbsp;:&amp;amp;nbsp;列出文件所属用户组为name的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-uid&amp;amp;nbsp;n&amp;amp;nbsp;:&amp;amp;nbsp;列出文件所有者为用户ID为n的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-gid&amp;amp;nbsp;n&amp;amp;nbsp;:&amp;amp;nbsp;列出文件所属用户组为用户组ID为n的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;/home/ljianhui&amp;amp;nbsp;-user&amp;amp;nbsp;ljianhui&amp;amp;nbsp;#&amp;amp;nbsp;在目录/home/ljianhui中找出所有者为ljianhui的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;与文件权限及名称有关的参数：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-name&amp;amp;nbsp;filename&amp;amp;nbsp;：找出文件名为filename的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-size&amp;amp;nbsp;[+-]SIZE&amp;amp;nbsp;：找出比SIZE还要大（+）或小（-）的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-tpye&amp;amp;nbsp;TYPE&amp;amp;nbsp;：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）；&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-perm&amp;amp;nbsp;mode&amp;amp;nbsp;：查找文件权限刚好等于mode的文件，mode用数字表示，如0755；&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-perm&amp;amp;nbsp;-mode&amp;amp;nbsp;：查找文件权限必须要全部包括mode权限的文件，mode用数字表示&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-perm&amp;amp;nbsp;+mode&amp;amp;nbsp;：查找文件权限包含任一mode的权限的文件，mode用数字表示&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;/&amp;amp;nbsp;-name&amp;amp;nbsp;passwd&amp;amp;nbsp;#&amp;amp;nbsp;查找文件名为passwd的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;.&amp;amp;nbsp;-perm&amp;amp;nbsp;0755&amp;amp;nbsp;#&amp;amp;nbsp;查找当前目录中文件权限的0755的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;find&amp;amp;nbsp;.&amp;amp;nbsp;-size&amp;amp;nbsp;+12k&amp;amp;nbsp;#&amp;amp;nbsp;查找当前目录中大于12KB的文件，注意c表示byte&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;5、cp命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;它的常用参数如下：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-a&amp;amp;nbsp;：将文件的特性一起复制&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-p&amp;amp;nbsp;：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-i&amp;amp;nbsp;：若目标文件已经存在时，在覆盖时会先询问操作的进行&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-r&amp;amp;nbsp;：递归持续复制，用于目录的复制行为&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-u&amp;amp;nbsp;：目标文件与源文件有差异时才会复制&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;例如 ：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cp&amp;amp;nbsp;-a&amp;amp;nbsp;file1&amp;amp;nbsp;file2&amp;amp;nbsp;#连同文件的所有特性把文件file1复制成文件file2&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cp&amp;amp;nbsp;file1&amp;amp;nbsp;file2&amp;amp;nbsp;file3&amp;amp;nbsp;dir&amp;amp;nbsp;#把文件file1、file2、file3复制到目录dir中&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;6、mv命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于移动文件、目录或更名，move之意，它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-f&amp;amp;nbsp;：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-i&amp;amp;nbsp;：若目标文件已经存在，就会询问是否覆盖&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-u&amp;amp;nbsp;：若目标文件已经存在，且比目标文件新，才会更新&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;例如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mv&amp;amp;nbsp;file1&amp;amp;nbsp;file2&amp;amp;nbsp;file3&amp;amp;nbsp;dir&amp;amp;nbsp;#&amp;amp;nbsp;把文件file1、file2、file3移动到目录dir中&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mv&amp;amp;nbsp;file1&amp;amp;nbsp;file2&amp;amp;nbsp;#&amp;amp;nbsp;把文件file1重命名为file2&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;7、rm命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于删除文件或目录，remove之间，它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-f&amp;amp;nbsp;：就是force的意思，忽略不存在的文件，不会出现警告消息&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-i&amp;amp;nbsp;：互动模式，在删除前会询问用户是否操作&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-r&amp;amp;nbsp;：递归删除，最常用于目录删除，它是一个非常危险的参数&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;例如：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;rm&amp;amp;nbsp;-i&amp;amp;nbsp;file&amp;amp;nbsp;#&amp;amp;nbsp;删除文件file，在删除之前会询问是否进行该操作&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;rm&amp;amp;nbsp;-fr&amp;amp;nbsp;dir&amp;amp;nbsp;#&amp;amp;nbsp;强制删除目录dir中的所有文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;8、ps命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-A&amp;amp;nbsp;：所有的进程均显示出来&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-a&amp;amp;nbsp;：不与terminal有关的所有进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-u&amp;amp;nbsp;：有效用户的相关进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-x&amp;amp;nbsp;：一般与a参数一起使用，可列出较完整的信息&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-l&amp;amp;nbsp;：较长，较详细地将PID的信息列出&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ps&amp;amp;nbsp;aux&amp;amp;nbsp;#&amp;amp;nbsp;查看系统所有的进程数据&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ps&amp;amp;nbsp;ax&amp;amp;nbsp;#&amp;amp;nbsp;查看不与terminal有关的所有进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ps&amp;amp;nbsp;-lA&amp;amp;nbsp;#&amp;amp;nbsp;查看系统所有的进程数据&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;ps&amp;amp;nbsp;axjf&amp;amp;nbsp;#&amp;amp;nbsp;查看连同一部分进程树状态&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;9、kill命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;kill&amp;amp;nbsp;-signal&amp;amp;nbsp;PID&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(0,0,255)&amp;quot;&amp;gt;signal的常用参数如下：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;1：SIGHUP，启动被终止的进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;2：SIGINT，相当于输入ctrl+c，中断一个程序的进行&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;9：SIGKILL，强制中断一个进程的进行&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;15：SIGTERM，以正常的结束进程方式来终止进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;例如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;kill&amp;amp;nbsp;-SIGTERM&amp;amp;nbsp;%1&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;kill&amp;amp;nbsp;-SIGHUP&amp;amp;nbsp;PID&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;10、killall命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于向一个命令启动的进程发送一个信号，它的一般语法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;killall&amp;amp;nbsp;[-iIe]&amp;amp;nbsp;[command&amp;amp;nbsp;name]&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;它的参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-i&amp;amp;nbsp;：交互式的意思，若需要删除时，会询问用户&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-e&amp;amp;nbsp;：表示后面接的command&amp;amp;nbsp;name要一致，但command&amp;amp;nbsp;name不能超过15个字符&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-I&amp;amp;nbsp;：命令名称忽略大小写&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;killall&amp;amp;nbsp;-SIGHUP&amp;amp;nbsp;syslogd&amp;amp;nbsp;#&amp;amp;nbsp;重新启动syslogd&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;11、file命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;file&amp;amp;nbsp;filename&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;file&amp;amp;nbsp;./test&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;12、tar命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-c&amp;amp;nbsp;：新建打包文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-t&amp;amp;nbsp;：查看打包文件的内容含有哪些文件名&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-x&amp;amp;nbsp;：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-j&amp;amp;nbsp;：通过bzip2的支持进行压缩/解压缩&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-z&amp;amp;nbsp;：通过gzip的支持进行压缩/解压缩&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-v&amp;amp;nbsp;：在压缩/解压缩过程中，将正在处理的文件名显示出来&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-f&amp;amp;nbsp;filename&amp;amp;nbsp;：filename为要处理的文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-C&amp;amp;nbsp;dir&amp;amp;nbsp;：指定压缩/解压缩的目录dir&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;上面的解说可以已经让你晕过去了，但是通常我们只需要记住下面三条命令即可：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;压缩：tar&amp;amp;nbsp;-jcv&amp;amp;nbsp;-f&amp;amp;nbsp;filename.tar.bz2&amp;amp;nbsp;要被处理的文件或目录名称&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;查询：tar&amp;amp;nbsp;-jtv&amp;amp;nbsp;-f&amp;amp;nbsp;filename.tar.bz2&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;解压：tar&amp;amp;nbsp;-jxv&amp;amp;nbsp;-f&amp;amp;nbsp;filename.tar.bz2&amp;amp;nbsp;-C&amp;amp;nbsp;欲解压缩的目录&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;注：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;13、cat命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;cat&amp;amp;nbsp;text&amp;amp;nbsp;|&amp;amp;nbsp;less&amp;amp;nbsp;#&amp;amp;nbsp;查看text文件中的内容&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;注：这条命令也可以使用less&amp;amp;nbsp;text来代替&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;14、chgrp命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;chgrp&amp;amp;nbsp;[-R]&amp;amp;nbsp;dirname/filename&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-R&amp;amp;nbsp;：进行递归的持续对所有文件和子目录更改&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;chgrp&amp;amp;nbsp;users&amp;amp;nbsp;-R&amp;amp;nbsp;./dir&amp;amp;nbsp;#&amp;amp;nbsp;递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;15、chown命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于改变文件的所有者，与chgrp命令的使用方法相同，只是修改的文件属性不同，不再详述。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;16、chmod命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于改变文件的权限，一般的用法如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;chmod&amp;amp;nbsp;[-R]&amp;amp;nbsp;xyz&amp;amp;nbsp;文件或目录&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-R：进行递归的持续更改，即连同子目录下的所有文件都会更改&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;同时，chmod还可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;chmod&amp;amp;nbsp;0755&amp;amp;nbsp;file&amp;amp;nbsp;#&amp;amp;nbsp;把file的文件权限改变为-rxwr-xr-x&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;chmod&amp;amp;nbsp;g+w&amp;amp;nbsp;file&amp;amp;nbsp;#&amp;amp;nbsp;向file的文件权限中加入用户组可写权限&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;18、vim命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px&amp;quot;&amp;gt;该命令主要用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件。vim是一个非常好用的文本编辑器，它里面有很多非常好用的命令，在这里不再多说。你可以从这里下载&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;font-size:24px; color:#cc0000&amp;quot;&amp;gt;&amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;http://download.csdn.net/detail/ljianhui/6215287&amp;quot;&amp;gt;vim常用操作&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;quot;font-size:14px&amp;quot;&amp;gt;的详细说明。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;19、gcc命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;对于一个用Linux开发C程序的人来说，这个命令就非常重要了，它用于把C语言的源程序文件，编译成可执行程序，由于g++的很多参数跟它非常相似，所以这里只介绍gcc的参数，它的常用参数如下：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-o&amp;amp;nbsp;：output之意，用于指定生成一个可执行文件的文件名&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-c&amp;amp;nbsp;：用于把源文件生成目标文件（.o)，并阻止编译器创建一个完整的程序&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-I&amp;amp;nbsp;：增加编译时搜索头文件的路径&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-L&amp;amp;nbsp;：增加编译时搜索静态连接库的路径&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-S&amp;amp;nbsp;：把源文件生成汇编代码文件&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-lm：表示标准库的目录中名为libm.a的函数库&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-lpthread&amp;amp;nbsp;：连接NPTL实现的线程库&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;-std=&amp;amp;nbsp;：用于指定把使用的C语言的版本&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;例如：&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#&amp;amp;nbsp;把源文件test.c按照c99标准编译成可执行程序test&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;gcc&amp;amp;nbsp;-o&amp;amp;nbsp;test&amp;amp;nbsp;test.c&amp;amp;nbsp;-lm&amp;amp;nbsp;-std=c99&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;#把源文件test.c转换为相应的汇编程序源文件test.s&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;gcc&amp;amp;nbsp;-S&amp;amp;nbsp;test.c&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;color:rgb(255,0,0)&amp;quot;&amp;gt;20、time命令&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;该命令用于测算一个命令（即程序）的执行时间。它的使用非常简单，就像平时输入命令一样，不过在命令的前面加入一个time即可，例如：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;ol start=&amp;quot;1&amp;quot; class=&amp;quot; list-paddingleft-2&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;time&amp;amp;nbsp;./process&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;time&amp;amp;nbsp;ps&amp;amp;nbsp;aux&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&amp;quot;&amp;quot;&amp;gt;在程序或命令运行结束后，在最后输出了三个时间，它们分别是：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;user：用户CPU时间，命令执行完成花费的用户CPU时间，即命令在用户态中执行时间总和；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;system：系统CPU时间，命令执行完成花费的系统CPU时间，即命令在核心态中执行时间总和；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;real：实际时间，从command命令行开始执行到运行终止的消逝时间；&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;注：用户CPU时间和系统CPU时间之和为CPU时间，即命令占用CPU执行的时间总和。实际时间要大于CPU时间，因为Linux是多任务操作系统，往往在执行一条命令时，系统还要处理其它任务。另一个需要注意的问题是即使每次执行相同命令，但所花费的时间也是不一样，其花费时间是与系统运行相关的。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-13 11:30:32','','5',33,1,1,0,1,0,1),(126,'mongoDB启动报错 ERROR: child process failed','mongoDB启动报错 ERROR: child process failed','&amp;lt;p style=&amp;quot;text-align: center;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://yijiebuyi.com/file/31b378c127ab4cbb9a58d12c91cf90d6&amp;quot; alt=&amp;quot;http://yijiebuyi.com/file/31b378c127ab4cbb9a58d12c91cf90d6&amp;quot;/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;上面这个错误是今天下午发现,从github down下一个应用,在应用启动前需要redis 启动服务,mongodb启动服务,所以当启动mongodb的时候悲剧出现了:&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;root@myfreebsd:/data/db # mongod --dbpath /data/db/ --logpath /data/mongolog/ --fork --port 27017&amp;lt;br/&amp;gt;about to fork child process, waiting until server is ready for connections.&amp;lt;br/&amp;gt;forked process: 2122&amp;lt;br/&amp;gt;ERROR: child process failed, exited with error number 1&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;出现这种错误的原因:&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;大部分是因为mongodb 服务在不正常关闭的情况下,mongod 被锁,想想可能是上次无故死机造成的.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;如何解决这种问题:&amp;lt;/p&amp;gt;&amp;lt;ol class=&amp;quot; list-paddingleft-2&amp;quot; style=&amp;quot;list-style-type: decimal;&amp;quot;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;删除 mongod.lock 文件和日志文件 mongodb.log.2014-11-17T06-55-20 ,如果有必要把 log日志全部删除&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;mongod.lock 我的在 /tmp/目录下&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;mongod --repair --dbpath /data/db / --repairpath /tmp/mongodb&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;&amp;lt;p&amp;gt;2016-12-13T13:54:35.997+0800 [initandlisten] MongoDB starting : pid=2194 port=27017 dbpath=/data/db 64-bit host=myfreebsd.com&amp;lt;br/&amp;gt;2016-12-13T13:54:35.998+0800 [initandlisten] db version v2.6.12&amp;lt;br/&amp;gt;2016-12-13T13:54:35.998+0800 [initandlisten] git version: nogitversion&amp;lt;br/&amp;gt;2016-12-13T13:54:35.998+0800 [initandlisten] OpenSSL version: OpenSSL 1.0.2j-freebsd&amp;amp;nbsp; 26 Sep 2016&amp;lt;br/&amp;gt;2016-12-13T13:54:35.998+0800 [initandlisten] build info: FreeBSD 110amd64-quarterly-job-04 11.0-RELEASE-p3 FreeBSD 11.0-RELEASE-p3 amd64 BOOST_LIB_VERSION=1_49&amp;lt;br/&amp;gt;2016-12-13T13:54:35.998+0800 [initandlisten] allocator: system&amp;lt;br/&amp;gt;2016-12-13T13:54:35.999+0800 [initandlisten] options: { config: &amp;amp;quot;/usr/local/etc/mongodb.conf&amp;amp;quot;, repair: true }&amp;lt;br/&amp;gt;2016-12-13T13:54:36.309+0800 [initandlisten] repairDatabase local&amp;lt;br/&amp;gt;2016-12-13T13:54:36.310+0800 [initandlisten] allocating new ns file /data/db/_tmp_repairDatabase_0/local.ns, filling with zeroes...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.132+0800 [FileAllocator] allocating new datafile /data/db/_tmp_repairDatabase_0/local.0, filling with zeroes...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.132+0800 [FileAllocator] creating directory /data/db/_tmp_repairDatabase_0/_tmp&amp;lt;br/&amp;gt;2016-12-13T13:54:38.133+0800 [FileAllocator] done allocating datafile /data/db/_tmp_repairDatabase_0/local.0, size: 64MB,&amp;amp;nbsp; took 0 secs&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] finished checking dbs&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] dbexit: &amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: going to close listening sockets...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: going to flush diaglog...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: going to close sockets...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: waiting for fs preallocator...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: closing all files...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] closeAllFiles() finished&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] shutdown: removing fs lock...&amp;lt;br/&amp;gt;2016-12-13T13:54:38.271+0800 [initandlisten] dbexit: really exiting now&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;然后 mongod --dbpath=/data/db &amp;amp;nbsp;--port=27017 &amp;amp;nbsp;--fork --logpath=/data/mongodb/mongodb.log&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;启动成功！&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-13 14:07:28','http://yijiebuyi.com/blog/f2e849b336b4d27fbf91bc52735d7841.html','3',32,1,1,0,0,0,1),(127,'MongoDB常用操作命令','成功启动MongoDB后，再打开一个命令行窗口输入mongo，就可以进行数据库的一些操作。','&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;一、数据库常用命令&amp;lt;br style=&amp;quot;text-align: left;&amp;quot;/&amp;gt;1、Help查看命令提示&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;border: medium none; background-color: rgb(255, 255, 255);&amp;quot;&amp;gt;help&amp;lt;br style=&amp;quot;text-align: left;&amp;quot;/&amp;gt;db.help();&amp;lt;br style=&amp;quot;text-align: left;&amp;quot;/&amp;gt;db.yourColl.help();&amp;lt;br style=&amp;quot;text-align: left;&amp;quot;/&amp;gt;db.youColl.find().help();&amp;lt;br style=&amp;quot;text-align: left;&amp;quot;/&amp;gt;rs.help();&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;text-align: left;&amp;quot;&amp;gt;2、切换/创建数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;use yourDB; 当创建一个集合(table)的时候会自动创建当前数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3、查询所有数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;show dbs;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;4、删除当前使用数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.dropDatabase();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;5、从指定主机上克隆数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.cloneDatabase(“127.0.0.1”); 将指定机器上的数据库的数据克隆到当前数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;6、从指定的机器上复制指定数据库数据到某个数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.copyDatabase(&amp;amp;quot;mydb&amp;amp;quot;, &amp;amp;quot;temp&amp;amp;quot;, &amp;amp;quot;127.0.0.1&amp;amp;quot;);将本机的mydb的数据复制到temp数据库中&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;7、修复当前数据库&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut44927&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.repairDatabase();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;8、查看当前使用的数据库&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut64817&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.getName();&amp;lt;br/&amp;gt;db; db和getName方法是一样的效果，都可以查询当前使用的数据库&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;9、显示当前db状态&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut31705&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.stats();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;10、当前db版本&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut31041&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.version();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;11、查看当前db的链接机器地址&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut6474&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.getMongo();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;二、Collection聚集集合&amp;lt;br/&amp;gt;1、创建一个聚集集合（table）&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut80175&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.createCollection(“collName”, {size: 20, capped: 5, max: 100});//创建成功会显示{“ok”:1}&amp;lt;br/&amp;gt;//判断集合是否为定容量db.collName.isCapped();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;2、得到指定名称的聚集集合（table）&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut32514&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.getCollection(&amp;amp;quot;account&amp;amp;quot;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、得到当前db的所有聚集集合&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut75498&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.getCollectionNames();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;4、显示当前db所有聚集索引的状态&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut99661&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.printCollectionStats();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;三、用户相关 &amp;lt;br/&amp;gt;1、添加一个用户&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut27173&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.addUser(&amp;amp;quot;name&amp;amp;quot;);&amp;lt;br/&amp;gt;db.addUser(&amp;amp;quot;userName&amp;amp;quot;, &amp;amp;quot;pwd123&amp;amp;quot;, true); 添加用户、设置密码、是否只读&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;2、数据库认证、安全模式&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut91520&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.auth(&amp;amp;quot;userName&amp;amp;quot;, &amp;amp;quot;123123&amp;amp;quot;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、显示当前所有用户&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut25037&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;show users;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;4、删除用户&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut97929&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.removeUser(&amp;amp;quot;userName&amp;amp;quot;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;四、聚集集合查询 &amp;lt;br/&amp;gt;1、查询所有记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut5811&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find();&amp;lt;br/&amp;gt;相当于：select* from userInfo;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”&amp;lt;br/&amp;gt;但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。&amp;lt;br/&amp;gt;2、查询去掉后的当前聚集集合中的某列的重复数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut55608&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.distinct(&amp;amp;quot;name&amp;amp;quot;);&amp;lt;br/&amp;gt;会过滤掉name中的相同数据&amp;lt;br/&amp;gt;相当于：select distict name from userInfo;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、查询age = 22的记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut32773&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({&amp;amp;quot;age&amp;amp;quot;: 22});&amp;lt;br/&amp;gt;相当于： select * from userInfo where age = 22;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;4、查询age &amp;amp;gt; 22的记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut27837&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$gt: 22}});&amp;lt;br/&amp;gt;相当于：select * from userInfo where age &amp;amp;gt;22;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;5、查询age &amp;amp;lt; 22的记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut16087&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$lt: 22}});&amp;lt;br/&amp;gt;相当于：select * from userInfo where age &amp;amp;lt;22;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;6、查询age &amp;amp;gt;= 25的记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut51336&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$gte: 25}});&amp;lt;br/&amp;gt;相当于：select * from userInfo where age &amp;amp;gt;= 25;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;7、查询age &amp;amp;lt;= 25的记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut45591&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$lte: 25}});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;8、查询age &amp;amp;gt;= 23 并且 age &amp;amp;lt;= 26&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut89384&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$gte: 23, $lte: 26}});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;9、查询name中包含 mongo的数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut31446&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({name: /mongo/});&amp;lt;br/&amp;gt;//相当于%%&amp;lt;br/&amp;gt;[code]select * from userInfo where name like ‘%mongo%&amp;amp;#39;;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;10、查询name中以mongo开头的&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut78703&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({name: /^mongo/});&amp;lt;br/&amp;gt;select * from userInfo where name like ‘mongo%&amp;amp;#39;;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;11、查询指定列name、age数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut90048&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({}, {name: 1, age: 1});&amp;lt;br/&amp;gt;相当于：select name, age from userInfo;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。&amp;lt;br/&amp;gt;12、查询指定列name、age数据, age &amp;amp;gt; 25&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut82571&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});&amp;lt;br/&amp;gt;相当于：select name, age from userInfo where age &amp;amp;gt;25;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;13、按照年龄排序&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut5002&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;升序：db.userInfo.find().sort({age: 1});&amp;lt;br/&amp;gt;降序：db.userInfo.find().sort({age: -1});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;14、查询name = zhangsan, age = 22的数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut11151&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({name: &amp;amp;#39;zhangsan&amp;amp;#39;, age: 22});&amp;lt;br/&amp;gt;相当于：select * from userInfo where name = ‘zhangsan&amp;amp;#39; and age = ‘22&amp;amp;#39;;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;15、查询前5条数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut39586&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find().limit(5);&amp;lt;br/&amp;gt;相当于：selecttop 5 * from userInfo;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;16、查询10条以后的数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut80839&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find().skip(10);&amp;lt;br/&amp;gt;相当于：select * from userInfo where id not in (&amp;lt;br/&amp;gt;selecttop 10 * from userInfo&amp;lt;br/&amp;gt;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;17、查询在5-10之间的数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut83639&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find().limit(10).skip(5);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;可用于分页，limit是pageSize，skip是第几页*pageSize&amp;lt;br/&amp;gt;18、or与 查询&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut1797&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({$or: [{age: 22}, {age: 25}]});&amp;lt;br/&amp;gt;相当于：select * from userInfo where age = 22 or age = 25;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;19、查询第一条数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut20764&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.findOne();&amp;lt;br/&amp;gt;相当于：selecttop 1 * from userInfo;&amp;lt;br/&amp;gt;db.userInfo.find().limit(1);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;20、查询某个结果集的记录条数&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut10747&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({age: {$gte: 25}}).count();&amp;lt;br/&amp;gt;相当于：select count(*) from userInfo where age &amp;amp;gt;= 20;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;21、按照某列进行排序&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut67358&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.find({sex: {$exists: true}}).count();&amp;lt;br/&amp;gt;相当于：select count(sex) from userInfo;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;五、索引&amp;lt;br/&amp;gt;1、创建索引&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut97525&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.ensureIndex({name: 1});&amp;lt;br/&amp;gt;db.userInfo.ensureIndex({name: 1, ts: -1});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;2、查询当前聚集集合所有索引&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut33582&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.getIndexes();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、查看总索引记录大小&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut72294&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.userInfo.totalIndexSize();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;4、读取当前集合的所有index信息&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut9274&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.reIndex();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;5、删除指定索引&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut98334&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.dropIndex(&amp;amp;quot;name_1&amp;amp;quot;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;6、删除所有索引索引&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut78039&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.dropIndexes();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;六、修改、添加、删除集合数据&amp;lt;br/&amp;gt;1、添加&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut38923&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.save({name: ‘zhangsan&amp;amp;#39;, age: 25, sex: true});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;添加的数据的数据列，没有固定，根据添加的数据为准&amp;lt;br/&amp;gt;2、修改&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut56272&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.update({age: 25}, {$set: {name: &amp;amp;#39;changeName&amp;amp;#39;}}, false, true);&amp;lt;br/&amp;gt;相当于：update users set name = ‘changeName&amp;amp;#39; where age = 25;&amp;lt;br/&amp;gt;db.users.update({name: &amp;amp;#39;Lisi&amp;amp;#39;}, {$inc: {age: 50}}, false, true);&amp;lt;br/&amp;gt;相当于：update users set age = age + 50 where name = ‘Lisi&amp;amp;#39;;&amp;lt;br/&amp;gt;db.users.update({name: &amp;amp;#39;Lisi&amp;amp;#39;}, {$inc: {age: 50}, $set: {name: &amp;amp;#39;hoho&amp;amp;#39;}}, false, true);&amp;lt;br/&amp;gt;相当于：update users set age = age + 50, name = ‘hoho&amp;amp;#39; where name = ‘Lisi&amp;amp;#39;;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、删除&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut57340&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.remove({age: 132});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;4、查询修改删除&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut54136&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.findAndModify({&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; query: {age: {$gte: 25}}, &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; sort: {age: -1}, &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; update: {$set: {name: &amp;amp;#39;a2&amp;amp;#39;}, $inc: {age: 2}},&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; remove: true&amp;lt;br/&amp;gt;});&amp;lt;br/&amp;gt;db.runCommand({ findandmodify : &amp;amp;quot;users&amp;amp;quot;, &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; query: {age: {$gte: 25}}, &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; sort: {age: -1}, &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; update: {$set: {name: &amp;amp;#39;a2&amp;amp;#39;}, $inc: {age: 2}},&amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; remove: true&amp;lt;br/&amp;gt;});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;update 或 remove 其中一个是必须的参数; 其他参数可选。&amp;lt;br/&amp;gt;参数&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 详解&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 默认值 &amp;lt;br/&amp;gt;query&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 查询过滤条件&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; {} &amp;lt;br/&amp;gt;sort&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; {} &amp;lt;br/&amp;gt;remove&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 若为true，被选中对象将在返回前被删除&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; N/A &amp;lt;br/&amp;gt;update&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 一个 修改器对象&amp;lt;br/&amp;gt;N/A &amp;lt;br/&amp;gt;new&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; false &amp;lt;br/&amp;gt;fields&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 参见Retrieving a Subset of Fields (1.5.0+) &amp;lt;br/&amp;gt;All fields &amp;lt;br/&amp;gt;upsert&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; 创建新对象若查询结果为空。 示例 (1.5.4+) &amp;lt;br/&amp;gt;false &amp;lt;br/&amp;gt;七、语句块操作 &amp;lt;br/&amp;gt;1、简单Hello World&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut63749&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;print(&amp;amp;quot;Hello World!&amp;amp;quot;);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;这种写法调用了print函数，和直接写入&amp;amp;quot;Hello World!&amp;amp;quot;的效果是一样的；&amp;lt;br/&amp;gt;2、将一个对象转换成json&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut34909&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;tojson(new Object());&amp;lt;br/&amp;gt;tojson(new Object(&amp;amp;#39;a&amp;amp;#39;));&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;3、循环添加数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut21428&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;amp;gt; for (var i = 0; i &amp;amp;lt; 30; i++) {&amp;lt;br/&amp;gt;... db.users.save({name: &amp;amp;quot;u_&amp;amp;quot; + i, age: 22 + i, sex: i % 2});&amp;lt;br/&amp;gt;... };&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;这样就循环添加了30条数据，同样也可以省略括号的写法&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut35314&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;amp;gt; for (var i = 0; i &amp;amp;lt; 30; i++) db.users.save({name: &amp;amp;quot;u_&amp;amp;quot; + i, age: 22 + i, sex: i % 2});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；&amp;lt;br/&amp;gt;4、find 游标查询&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut93657&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;amp;gt;var cursor = db.users.find();&amp;lt;br/&amp;gt;&amp;amp;gt; while (cursor.hasNext()) { &amp;lt;br/&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; printjson(cursor.next()); &amp;lt;br/&amp;gt;}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;这样就查询所有的users信息，同样可以这样写&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut18628&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;var cursor = db.users.find();&amp;lt;br/&amp;gt;while (cursor.hasNext()) { printjson(cursor.next); }&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;同样可以省略{}号&amp;lt;br/&amp;gt;5、forEach迭代循环&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut17155&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.find().forEach(printjson);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;forEach中必须传递一个函数来处理每条迭代的数据信息&amp;lt;br/&amp;gt;6、将find游标当数组处理&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut48131&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;var cursor = db.users.find();&amp;lt;br/&amp;gt;cursor[4];&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;取得下标索引为4的那条数据&amp;lt;br/&amp;gt;既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();&amp;lt;br/&amp;gt;那样我们也可以用循环显示数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut55204&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;for (var i = 0, len = c.length(); i &amp;amp;lt; len; i++) printjson(c[i]);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;7、将find游标转换成数组&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut60544&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;amp;gt; var arr = db.users.find().toArray();&amp;lt;br/&amp;gt;&amp;amp;gt; printjson(arr[2]);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;用toArray方法将其转换为数组&amp;lt;br/&amp;gt;8、定制我们自己的查询结果&amp;lt;br/&amp;gt;只显示age &amp;amp;lt;= 28的并且只显示age这列数据&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut44522&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);&amp;lt;br/&amp;gt;db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;排除age的列&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut92588&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;9、forEach传递函数显示信息&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut21833&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.things.find({x:4}).forEach(function(x) {print(tojson(x));});&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;八、其他 &amp;lt;br/&amp;gt;1、查询之前的错误信息&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut7542&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.getPrevError();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2、清除错误记录&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut76971&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;db.resetError();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;查看聚集集合基本信息&amp;lt;br/&amp;gt;1、查看帮助&amp;amp;nbsp; db.yourColl.help();&amp;lt;br/&amp;gt;2、查询当前集合的数据条数&amp;amp;nbsp; db.yourColl.count();&amp;lt;br/&amp;gt;3、查看数据空间大小 db.userInfo.dataSize();&amp;lt;br/&amp;gt;4、得到当前聚集集合所在的db db.userInfo.getDB();&amp;lt;br/&amp;gt;5、得到当前聚集的状态 db.userInfo.stats();&amp;lt;br/&amp;gt;6、得到聚集集合总大小 db.userInfo.totalSize();&amp;lt;br/&amp;gt;7、聚集集合储存空间大小 db.userInfo.storageSize();&amp;lt;br/&amp;gt;8、Shard版本信息&amp;amp;nbsp; db.userInfo.getShardVersion()&amp;lt;br/&amp;gt;9、聚集集合重命名 db.userInfo.renameCollection(&amp;amp;quot;users&amp;amp;quot;); 将userInfo重命名为users&amp;lt;br/&amp;gt;10、删除当前聚集集合 db.userInfo.drop();&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a style=&amp;quot;CURSOR: pointer&amp;quot; class=&amp;quot;copybut&amp;quot; id=&amp;quot;copybut42127&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;text-decoration:underline;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;show dbs:显示数据库列表 &amp;lt;br/&amp;gt;show collections：显示当前数据库中的集合（类似关系数据库中的表） &amp;lt;br/&amp;gt;show users：显示用户 &amp;lt;br/&amp;gt;use &amp;amp;lt;db name&amp;amp;gt;：切换当前数据库，这和MS-SQL里面的意思一样 &amp;lt;br/&amp;gt;db.help()：显示数据库操作命令，里面有很多的命令 &amp;lt;br/&amp;gt;db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 &amp;lt;br/&amp;gt;db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） &amp;lt;br/&amp;gt;db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;','2016-12-14 21:32:46','','3',32,1,1,0,3,0,1);

/*Table structure for table `my_auth_access` */

DROP TABLE IF EXISTS `my_auth_access`;

CREATE TABLE `my_auth_access` (
  `role_id` mediumint(8) unsigned NOT NULL COMMENT '角色',
  `rule_name` varchar(255) NOT NULL COMMENT '规则唯一英文标识,全小写',
  `type` varchar(30) DEFAULT NULL COMMENT '权限规则分类，请加应用前缀,如admin_',
  KEY `role_id` (`role_id`),
  KEY `rule_name` (`rule_name`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='权限授权表';

/*Data for the table `my_auth_access` */

insert  into `my_auth_access`(`role_id`,`rule_name`,`type`) values (2,'admin/article/base','admin_url'),(2,'admin/article/index','admin_url'),(2,'admin/article/add','admin_url'),(2,'admin/article/edit','admin_url'),(2,'admin/article/inline','admin_url'),(2,'admin/article/delete','admin_url'),(2,'N;','admin_business');

/*Table structure for table `my_award` */

DROP TABLE IF EXISTS `my_award`;

CREATE TABLE `my_award` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(150) NOT NULL DEFAULT '' COMMENT '奖品名称',
  `intro` varchar(255) NOT NULL DEFAULT '' COMMENT '简介',
  `odds` smallint(6) NOT NULL DEFAULT '0' COMMENT '概率，1到100之间',
  `status` tinyint(1) DEFAULT '1',
  `ctime` timestamp NULL DEFAULT NULL,
  `etime` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `my_award` */

insert  into `my_award`(`id`,`title`,`intro`,`odds`,`status`,`ctime`,`etime`) values (2,'二等奖-1799元（报名优惠600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。二等奖得主16年12月31日0点——17年1月2日24点以前报名1799元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',25,1,'2016-12-21 10:53:58','2016-12-21 10:53:58'),(1,'一等奖-1599元（报名优惠800元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。一等奖得主16年12月31日0点——17年1月2日24点以前报名1599元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',25,1,'2016-12-21 10:47:45','2016-12-21 10:47:45'),(3,'三等奖-1999元（报名优惠400元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。三等奖得主16年12月31日0点——17年1月2日24点以前报名1999元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法，美术绘画任何一门全年班课程（64次课，192课时）',15,1,'2016-12-21 11:01:23','2016-12-21 11:01:23'),(4,'四等奖-2199元（报名优惠200元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。四等奖得主16年12月31日0点——17年1月2日24点以前报名2199元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法，美术绘画任何一门全年班课程（64次课，192课时）',10,1,'2016-12-21 11:02:33','2016-12-21 11:02:33'),(5,'特等奖-3198元（双科优惠1600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。特等奖得主16年12月31日0点——17年1月2日24点以前报名3200元即可享受原价4800元的华艺书画教育硬笔书法，软笔书法，美术绘画任何两门全年班课程（128次课，384课时）',25,1,'2016-12-21 11:10:31','2016-12-21 11:10:31');

/*Table structure for table `my_category` */

DROP TABLE IF EXISTS `my_category`;

CREATE TABLE `my_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) DEFAULT '0' COMMENT '父分类ID',
  `name` varchar(20) NOT NULL DEFAULT '' COMMENT '分类别名',
  `title` varchar(100) DEFAULT '' COMMENT '分类标题',
  `keywords` varchar(255) DEFAULT '' COMMENT '分类关键词',
  `icon` varchar(50) DEFAULT '' COMMENT '图标',
  `status` tinyint(1) DEFAULT '1' COMMENT '状态',
  `description` varchar(255) DEFAULT '' COMMENT '分类描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

/*Data for the table `my_category` */

insert  into `my_category`(`id`,`pid`,`name`,`title`,`keywords`,`icon`,`status`,`description`) values (28,0,'PHP','','PHP','',1,''),(29,0,'数据库','','mysql，mongoDB，Redis','',1,''),(31,29,'mysql','','mysql','',1,''),(32,29,'mongoDB','','mongoDB','',1,''),(33,0,'Linux','','CentOS,FreeBSD,RedHat','',1,''),(34,0,'前端','','HTML,CSS,JS','',1,NULL),(35,0,'小常识','','电脑','',1,'');

/*Table structure for table `my_comments` */

DROP TABLE IF EXISTS `my_comments`;

CREATE TABLE `my_comments` (
  `comID` int(11) NOT NULL,
  `comName` varchar(255) DEFAULT NULL,
  `comTime` datetime DEFAULT NULL,
  `comIP1` varchar(255) DEFAULT NULL,
  `comIP2` varchar(255) DEFAULT NULL,
  `comAvatar` varchar(255) DEFAULT NULL,
  `comContent` text,
  `comArtID` varchar(255) DEFAULT NULL,
  `comParentID` int(11) DEFAULT NULL,
  `comSource` varchar(255) DEFAULT NULL,
  `comURL` varchar(255) DEFAULT NULL,
  `comBlock` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`comID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

/*Data for the table `my_comments` */

/*Table structure for table `my_member` */

DROP TABLE IF EXISTS `my_member`;

CREATE TABLE `my_member` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` varchar(32) NOT NULL,
  `create_at` varchar(11) NOT NULL DEFAULT '0',
  `update_at` varchar(11) NOT NULL DEFAULT '0',
  `login_ip` varchar(20) DEFAULT NULL,
  `login_times` smallint(8) DEFAULT '0',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '0:禁止登陆 1:正常',
  `role_id` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `username` (`username`) USING BTREE,
  KEY `password` (`password`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `my_member` */

insert  into `my_member`(`id`,`username`,`email`,`password`,`create_at`,`update_at`,`login_ip`,`login_times`,`status`,`role_id`) values (1,'admin','462368783@qq.com','21232f297a57a5a743894a0e4a801fc3','0','1482312366','219.239.133.66',19,1,1);

/*Table structure for table `my_member_login` */

DROP TABLE IF EXISTS `my_member_login`;

CREATE TABLE `my_member_login` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `member_id` int(10) NOT NULL DEFAULT '0',
  `ip` varchar(20) NOT NULL DEFAULT '',
  `time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Data for the table `my_member_login` */

insert  into `my_member_login`(`id`,`member_id`,`ip`,`time`) values (1,1,'127.0.0.1','2016-11-29 17:26:11'),(2,1,'127.0.0.1','2016-11-29 16:47:51'),(3,1,'127.0.0.1','2016-11-29 16:47:51'),(7,1,'127.0.0.1','2016-11-30 10:06:22'),(8,1,'127.0.0.1','2016-11-30 10:11:13'),(9,1,'106.121.73.223','2016-12-01 21:07:16'),(10,1,'182.18.109.97','2016-12-01 21:07:43'),(11,1,'219.239.133.66','2016-12-02 10:07:06'),(12,1,'219.239.133.66','2016-12-07 09:30:06'),(13,1,'219.239.133.66','2016-12-12 15:52:33'),(14,1,'219.239.133.66','2016-12-13 10:20:59'),(15,1,'219.239.133.66','2016-12-20 18:11:35'),(16,1,'219.239.133.66','2016-12-20 18:17:03'),(17,1,'112.251.191.245','2016-12-20 22:42:51'),(18,1,'219.239.133.66','2016-12-21 09:31:33'),(19,1,'223.99.211.251','2016-12-21 10:44:24'),(20,1,'223.99.211.251','2016-12-21 10:59:25'),(21,1,'219.239.133.66','2016-12-21 16:00:03');

/*Table structure for table `my_menu` */

DROP TABLE IF EXISTS `my_menu`;

CREATE TABLE `my_menu` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `parentid` smallint(6) unsigned NOT NULL DEFAULT '0',
  `app` char(20) NOT NULL COMMENT '应用名称app',
  `model` char(20) NOT NULL COMMENT '控制器',
  `action` char(20) NOT NULL COMMENT '操作名称',
  `rule_name` varchar(255) NOT NULL DEFAULT '' COMMENT '规则唯一英文标识,全小写',
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '菜单类型  1：权限认证+菜单；0：只作为菜单',
  `status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '状态，1显示，0不显示',
  `name` varchar(50) NOT NULL COMMENT '菜单名称',
  `icon` varchar(50) DEFAULT NULL COMMENT '菜单图标',
  `remark` varchar(255) NOT NULL COMMENT '备注',
  `listorder` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT '排序ID',
  PRIMARY KEY (`id`),
  KEY `status` (`status`),
  KEY `parentid` (`parentid`),
  KEY `model` (`model`),
  KEY `order` (`listorder`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='后台菜单表';

/*Data for the table `my_menu` */

insert  into `my_menu`(`id`,`parentid`,`app`,`model`,`action`,`rule_name`,`type`,`status`,`name`,`icon`,`remark`,`listorder`) values (1,0,'Admin','Article','base','admin/article/base',1,1,'应用管理','Hui-iconfont-canshu','',0),(2,1,'Admin','Article','index','admin/article/index',1,1,'文章列表','','',0),(3,2,'Admin','Article','add','admin/article/add',1,1,'添加文章','','',0),(4,2,'Admin','Article','edit','admin/article/edit',1,1,'编辑文章','','',0),(5,2,'Admin','Article','inline','admin/article/inline',1,1,'文章上下架','','',0),(6,2,'Admin','Article','delete','admin/article/delete',1,1,'删除文章','','',0),(7,1,'Admin','Category','index','admin/category/index',1,1,'文章栏目','','',0),(8,7,'Admin','Category','add','admin/category/add',1,1,'添加栏目','','',0),(9,7,'Admin','Category','edit','admin/category/edit',1,1,'编辑栏目','','',0),(10,7,'Admin','Category','delete','admin/category/delete',1,1,'删除栏目','','',0);

/*Table structure for table `my_message` */

DROP TABLE IF EXISTS `my_message`;

CREATE TABLE `my_message` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `artid` int(10) DEFAULT '0',
  `title` varchar(150) DEFAULT '' COMMENT '主题',
  `name` varchar(150) DEFAULT '' COMMENT '留言人',
  `email` varchar(100) DEFAULT '' COMMENT '邮箱',
  `content` varchar(255) DEFAULT '' COMMENT '内容',
  `ctime` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '留言时间',
  `is_view` tinyint(1) DEFAULT '0' COMMENT '0未被查看，1已查看',
  `vtime` timestamp NULL DEFAULT NULL COMMENT '查看时间',
  `vmember` int(10) DEFAULT '0' COMMENT '首次查看管理员',
  `is_reply` tinyint(1) DEFAULT '0' COMMENT '0未回复，1已回复',
  `rtime` timestamp NULL DEFAULT NULL COMMENT '回复时间',
  `recontent` varchar(255) DEFAULT '' COMMENT '回复内容',
  `rmember` int(10) DEFAULT '0' COMMENT '回复管理员',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `my_message` */

/*Table structure for table `my_role` */

DROP TABLE IF EXISTS `my_role`;

CREATE TABLE `my_role` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 NOT NULL,
  `pid` smallint(6) DEFAULT NULL,
  `status` tinyint(1) unsigned DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `ename` varchar(5) CHARACTER SET utf8 DEFAULT NULL,
  `listorder` smallint(6) DEFAULT '0',
  `create_time` int(11) unsigned NOT NULL DEFAULT '0',
  `update_time` int(11) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `parentId` (`pid`) USING BTREE,
  KEY `ename` (`ename`) USING BTREE,
  KEY `status` (`status`) USING BTREE,
  KEY `order` (`listorder`,`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

/*Data for the table `my_role` */

insert  into `my_role`(`id`,`name`,`pid`,`status`,`remark`,`ename`,`listorder`,`create_time`,`update_time`) values (1,'超级管理员',0,1,NULL,NULL,0,0,0),(2,'一级管理员',NULL,1,'',NULL,0,1480400513,1480400752);

/*Table structure for table `my_setting` */

DROP TABLE IF EXISTS `my_setting`;

CREATE TABLE `my_setting` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `key` varchar(255) NOT NULL DEFAULT '',
  `value` varchar(255) NOT NULL DEFAULT '',
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `key` (`key`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `my_setting` */

/*Table structure for table `my_tags` */

DROP TABLE IF EXISTS `my_tags`;

CREATE TABLE `my_tags` (
  `id` smallint(8) unsigned NOT NULL AUTO_INCREMENT,
  `tvalue` varchar(150) NOT NULL,
  `tcount` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `tValue` (`tvalue`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `my_tags` */

insert  into `my_tags`(`id`,`tvalue`,`tcount`) values (1,'MySQL',0),(2,'PHP',0),(3,'mongoDB',0),(4,'Redis',0),(5,'Linux',0);

/*Table structure for table `my_user` */

DROP TABLE IF EXISTS `my_user`;

CREATE TABLE `my_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `mobile` char(11) DEFAULT '',
  `name` varchar(50) DEFAULT '',
  `headimg` varchar(255) DEFAULT '',
  `openid` varchar(100) DEFAULT '',
  `ctime` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `my_user` */

/*Table structure for table `my_winners` */

DROP TABLE IF EXISTS `my_winners`;

CREATE TABLE `my_winners` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT '',
  `mobile` char(11) DEFAULT '',
  `openid` varchar(50) DEFAULT '',
  `awid` int(10) DEFAULT '0',
  `award` varchar(255) DEFAULT '',
  `intro` varchar(255) DEFAULT '',
  `status` tinyint(1) DEFAULT '0' COMMENT '0未领取，1已领取',
  `ctime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `my_winners` */

insert  into `my_winners`(`id`,`name`,`mobile`,`openid`,`awid`,`award`,`intro`,`status`,`ctime`) values (1,'duyang','17010205598','oB5lps1E9M_RxyjKvxXc1vqUXAqU',1,'测试1','测试测试',1,'2016-12-21 10:20:38'),(2,'','18619191111','',1,'一等奖-1599元（报名优惠800元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。一等奖得主16年12月31日0点——17年1月2日24点以前报名1599元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 11:28:29'),(3,'','18863334440','',2,'二等奖-1799元（报名优惠600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。二等奖得主16年12月31日0点——17年1月2日24点以前报名1799元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 11:29:37'),(4,'','18863334448','',2,'二等奖-1799元（报名优惠600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。二等奖得主16年12月31日0点——17年1月2日24点以前报名1799元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 12:02:13'),(5,'','17010205599','',2,'二等奖-1799元（报名优惠600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。二等奖得主16年12月31日0点——17年1月2日24点以前报名1799元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 12:30:16'),(6,'','17010205558','',2,'二等奖-1799元（报名优惠600元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。二等奖得主16年12月31日0点——17年1月2日24点以前报名1799元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 12:31:32'),(7,'','18863334455','',1,'一等奖-1599元（报名优惠800元）','华艺书画教育元旦跨年盛典。。三天钜惠。。。。一等奖得主16年12月31日0点——17年1月2日24点以前报名1599元即可享受原价2400元的华艺书画教育硬笔书法，软笔书法。美术绘画任何一门全年班课程（64次课，192课时）',0,'2016-12-22 13:11:37');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
